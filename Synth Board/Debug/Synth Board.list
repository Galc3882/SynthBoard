
Synth Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c00  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008d88  08008d88  00018d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa0  08008fa0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa8  08008fa8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008fa8  08008fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08008fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          00008a38  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008af4  20008af4  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   000121cd  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000373a  00000000  00000000  000322fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f48  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bb1  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002791b  00000000  00000000  00037531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001807f  00000000  00000000  0005ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db8f3  00000000  00000000  00076ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004210  00000000  00000000  001527c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001569d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d70 	.word	0x08008d70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08008d70 	.word	0x08008d70

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AUDIO_OUT_Init>:
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume,
		uint32_t AudioFreq) {
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	603a      	str	r2, [r7, #0]
 8000eaa:	80fb      	strh	r3, [r7, #6]
 8000eac:	460b      	mov	r3, r1
 8000eae:	717b      	strb	r3, [r7, #5]
	uint8_t ret = AUDIO_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]

	/* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
//	AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	hAudioOutI2s.Instance = I2S3;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <AUDIO_OUT_Init+0x84>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <AUDIO_OUT_Init+0x88>)
 8000eb8:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET) {
 8000eba:	481a      	ldr	r0, [pc, #104]	; (8000f24 <AUDIO_OUT_Init+0x84>)
 8000ebc:	f005 fb0a 	bl	80064d4 <HAL_I2S_GetState>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d103      	bne.n	8000ece <AUDIO_OUT_Init+0x2e>
		/* Init the I2S MSP: this __weak function can be redefined by the application*/
		AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <AUDIO_OUT_Init+0x84>)
 8000eca:	f000 f899 	bl	8001000 <AUDIO_OUT_MspInit>
	}

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	/* Configure the I2S peripheral */
	if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f000 f95e 	bl	8001190 <I2S3_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <AUDIO_OUT_Init+0x3e>
		ret = AUDIO_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == AUDIO_OK) {
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10e      	bne.n	8000f02 <AUDIO_OUT_Init+0x62>
		/* Retieve audio codec identifier */
		if (((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK)
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <AUDIO_OUT_Init+0x8c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2094      	movs	r0, #148	; 0x94
 8000eea:	4798      	blx	r3
 8000eec:	4603      	mov	r3, r0
 8000eee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000ef2:	2be0      	cmp	r3, #224	; 0xe0
 8000ef4:	d103      	bne.n	8000efe <AUDIO_OUT_Init+0x5e>
				== CS43L22_ID) {
			/* Initialize the audio driver structure */
			pAudioDrv = &cs43l22_drv;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <AUDIO_OUT_Init+0x90>)
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <AUDIO_OUT_Init+0x8c>)
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e001      	b.n	8000f02 <AUDIO_OUT_Init+0x62>
		} else {
			ret = AUDIO_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (ret == AUDIO_OK) {
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <AUDIO_OUT_Init+0x78>
		pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <AUDIO_OUT_Init+0x90>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681c      	ldr	r4, [r3, #0]
 8000f0e:	797a      	ldrb	r2, [r7, #5]
 8000f10:	88f9      	ldrh	r1, [r7, #6]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2094      	movs	r0, #148	; 0x94
 8000f16:	47a0      	blx	r4
	}

	return ret;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000dc 	.word	0x200000dc
 8000f28:	40003c00 	.word	0x40003c00
 8000f2c:	2000007c 	.word	0x2000007c
 8000f30:	200000d8 	.word	0x200000d8

08000f34 <AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size. 
 * @param  pBuffer: Pointer to the buffer 
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <AUDIO_OUT_Play+0x4c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	b292      	uxth	r2, r2
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	2094      	movs	r0, #148	; 0x94
 8000f4c:	4798      	blx	r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00f      	b.n	8000f78 <AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer,
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f5e:	d203      	bcs.n	8000f68 <AUDIO_OUT_Play+0x34>
				DMA_MAX(Size/AUDIODATA_SIZE));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	085b      	lsrs	r3, r3, #1
		HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer,
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	e001      	b.n	8000f6c <AUDIO_OUT_Play+0x38>
 8000f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <AUDIO_OUT_Play+0x50>)
 8000f72:	f005 f9fd 	bl	8006370 <HAL_I2S_Transmit_DMA>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8000f76:	2300      	movs	r3, #0
	}
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000d8 	.word	0x200000d8
 8000f84:	200000dc 	.word	0x200000dc

08000f88 <AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level. 
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <AUDIO_OUT_SetVolume+0x2c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	2094      	movs	r0, #148	; 0x94
 8000f9e:	4798      	blx	r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8000faa:	2300      	movs	r3, #0
	}
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000d8 	.word	0x200000d8

08000fb8 <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_I2S_TxCpltCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		AUDIO_OUT_TransferComplete_CallBack();
 8000fca:	f001 f869 	bl	80020a0 <AUDIO_OUT_TransferComplete_CallBack>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40003c00 	.word	0x40003c00

08000fdc <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_I2S_TxHalfCpltCallback+0x16>
		/* Manage the remaining file size and new address offset: This function should
		 be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
		AUDIO_OUT_HalfTransfer_CallBack();
 8000fee:	f001 f82b 	bl	8002048 <AUDIO_OUT_HalfTransfer_CallBack>
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40003c00 	.word	0x40003c00

08001000 <AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sTx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2S3 clock */
	I2S3_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a55      	ldr	r2, [pc, #340]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]

	/*** Configure the GPIOs ***/
	/* Enable I2S GPIO clocks */
	I2S3_SCK_SD_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a4e      	ldr	r2, [pc, #312]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
	I2S3_WS_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a47      	ldr	r2, [pc, #284]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

	/* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
	GPIO_InitStruct.Pin = I2S3_SCK_PIN | I2S3_SD_PIN;
 800105e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001062:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = I2S3_SCK_SD_WS_AF;
 8001070:	2306      	movs	r3, #6
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	483c      	ldr	r0, [pc, #240]	; (800116c <AUDIO_OUT_MspInit+0x16c>)
 800107c:	f003 fd0c 	bl	8004a98 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S3_WS_PIN;
 8001080:	2310      	movs	r3, #16
 8001082:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4839      	ldr	r0, [pc, #228]	; (8001170 <AUDIO_OUT_MspInit+0x170>)
 800108c:	f003 fd04 	bl	8004a98 <HAL_GPIO_Init>

	/* I2S3 pins configuration: MCK pin */
	I2S3_MCK_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a33      	ldr	r2, [pc, #204]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = I2S3_MCK_PIN;
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	482d      	ldr	r0, [pc, #180]	; (800116c <AUDIO_OUT_MspInit+0x16c>)
 80010b8:	f003 fcee 	bl	8004a98 <HAL_GPIO_Init>

	/* Enable the I2S DMA clock */
	I2S3_DMAx_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a28      	ldr	r2, [pc, #160]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <AUDIO_OUT_MspInit+0x168>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]

	if (hi2s->Instance == I2S3) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a25      	ldr	r2, [pc, #148]	; (8001174 <AUDIO_OUT_MspInit+0x174>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d136      	bne.n	8001150 <AUDIO_OUT_MspInit+0x150>
		/* Configure the hdma_i2sTx handle parameters */
		hdma_i2sTx.Init.Channel = I2S3_DMAx_CHANNEL;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
		hdma_i2sTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	609a      	str	r2, [r3, #8]
		hdma_i2sTx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
		hdma_i2sTx.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fa:	611a      	str	r2, [r3, #16]
		hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	615a      	str	r2, [r3, #20]
		hdma_i2sTx.Init.MemDataAlignment = I2S3_DMAx_MEM_DATA_SIZE;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	619a      	str	r2, [r3, #24]
		hdma_i2sTx.Init.Mode = DMA_NORMAL;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
		hdma_i2sTx.Init.Priority = DMA_PRIORITY_HIGH;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001118:	621a      	str	r2, [r3, #32]
		hdma_i2sTx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 800111c:	2204      	movs	r2, #4
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sTx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001122:	2203      	movs	r2, #3
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sTx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sTx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sTx.Instance = I2S3_DMAx_STREAM;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <AUDIO_OUT_MspInit+0x17c>)
 8001136:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sTx);
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 8001146:	f003 f987 	bl	8004458 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sTx);
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <AUDIO_OUT_MspInit+0x178>)
 800114c:	f003 f8d6 	bl	80042fc <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	210e      	movs	r1, #14
 8001154:	202f      	movs	r0, #47	; 0x2f
 8001156:	f003 f89a 	bl	800428e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 800115a:	202f      	movs	r0, #47	; 0x2f
 800115c:	f003 f8b3 	bl	80042c6 <HAL_NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020000 	.word	0x40020000
 8001174:	40003c00 	.word	0x40003c00
 8001178:	20000124 	.word	0x20000124
 800117c:	400260b8 	.word	0x400260b8

08001180 <AUDIO_OUT_Error_CallBack>:
}

/**
 * @brief  Manages the DMA FIFO error event.
 */
__weak void AUDIO_OUT_Error_CallBack(void) {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	/* Initialize the hAudioOutI2s Instance parameter */
	hAudioOutI2s.Instance = I2S3;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <I2S3_Init+0x68>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <I2S3_Init+0x6c>)
 800119c:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioOutI2s);
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <I2S3_Init+0x68>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <I2S3_Init+0x68>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ac:	61da      	str	r2, [r3, #28]

	/* I2S3 peripheral configuration */
	hAudioOutI2s.Init.AudioFreq = AudioFreq;
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <I2S3_Init+0x68>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6153      	str	r3, [r2, #20]
	hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <I2S3_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
	hAudioOutI2s.Init.CPOL = I2S_CPOL_LOW;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <I2S3_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	hAudioOutI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <I2S3_Init+0x68>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
	hAudioOutI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <I2S3_Init+0x68>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	611a      	str	r2, [r3, #16]
	hAudioOutI2s.Init.Mode = I2S_MODE_MASTER_TX;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <I2S3_Init+0x68>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	605a      	str	r2, [r3, #4]
	hAudioOutI2s.Init.Standard = I2S_STANDARD;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <I2S3_Init+0x68>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioOutI2s) != HAL_OK) {
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <I2S3_Init+0x68>)
 80011de:	f004 ff87 	bl	80060f0 <HAL_I2S_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <I2S3_Init+0x5c>
		return AUDIO_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <I2S3_Init+0x5e>
	} else {
		return AUDIO_OK;
 80011ec:	2300      	movs	r3, #0
	}
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000dc 	.word	0x200000dc
 80011fc:	40003c00 	.word	0x40003c00

08001200 <HAL_I2S_ErrorCallback>:
/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	/* Manage the error generated on DMA FIFO: This function 
	 should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */
	if (hi2s->Instance == I2S3) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_I2S_ErrorCallback+0x20>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_I2S_ErrorCallback+0x16>
		AUDIO_OUT_Error_CallBack();
 8001212:	f7ff ffb5 	bl	8001180 <AUDIO_OUT_Error_CallBack>
	}
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40003c00 	.word	0x40003c00

08001224 <I2Cx_Init>:
/******************************* I2C Routines *********************************/

/**
 * @brief  I2Cx Bus initialization.
 */
static void I2Cx_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET) {
 8001228:	4814      	ldr	r0, [pc, #80]	; (800127c <I2Cx_Init+0x58>)
 800122a:	f004 fb9f 	bl	800596c <HAL_I2C_GetState>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d121      	bne.n	8001278 <I2Cx_Init+0x54>
		I2cHandle.Instance = AUDIO_I2Cx;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <I2Cx_Init+0x58>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <I2Cx_Init+0x5c>)
 8001238:	601a      	str	r2, [r3, #0]
		I2cHandle.Init.OwnAddress1 = 0x43;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <I2Cx_Init+0x58>)
 800123c:	2243      	movs	r2, #67	; 0x43
 800123e:	60da      	str	r2, [r3, #12]
		I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <I2Cx_Init+0x58>)
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <I2Cx_Init+0x60>)
 8001244:	605a      	str	r2, [r3, #4]
		I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <I2Cx_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
		I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <I2Cx_Init+0x58>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
		I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <I2Cx_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
		I2cHandle.Init.OwnAddress2 = 0x00;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <I2Cx_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
		I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <I2Cx_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
		I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <I2Cx_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]

		/* Init the I2C */
		I2Cx_MspInit(&I2cHandle);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <I2Cx_Init+0x58>)
 800126e:	f000 f86b 	bl	8001348 <I2Cx_MspInit>
		HAL_I2C_Init(&I2cHandle);
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <I2Cx_Init+0x58>)
 8001274:	f003 feda 	bl	800502c <HAL_I2C_Init>
	}
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000184 	.word	0x20000184
 8001280:	40005400 	.word	0x40005400
 8001284:	000186a0 	.word	0x000186a0

08001288 <I2Cx_WriteData>:
 * @brief  Writes a value in a register of the device through BUS.
 * @param  Addr: Device address on BUS Bus.  
 * @param  Reg: The target register address to write
 * @param  Value: The target register value to be written 
 */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af04      	add	r7, sp, #16
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
 8001292:	460b      	mov	r3, r1
 8001294:	717b      	strb	r3, [r7, #5]
 8001296:	4613      	mov	r3, r2
 8001298:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t) Reg,
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <I2Cx_WriteData+0x48>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	88f9      	ldrh	r1, [r7, #6]
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <I2Cx_WriteData+0x4c>)
 80012b6:	f004 f82d 	bl	8005314 <HAL_I2C_Mem_Write>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <I2Cx_WriteData+0x40>
		/* Execute user timeout callback */
		I2Cx_Error();
 80012c4:	f000 f834 	bl	8001330 <I2Cx_Error>
	}
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000184 	.word	0x20000184

080012d8 <I2Cx_ReadData>:
 * @brief  Reads a register of the device through BUS.
 * @param  Addr: Device address on BUS Bus.  
 * @param  Reg: The target register address to write
 * @retval Data read at register address
 */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af04      	add	r7, sp, #16
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	80fb      	strh	r3, [r7, #6]
 80012e4:	4613      	mov	r3, r2
 80012e6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT,
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <I2Cx_ReadData+0x50>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	88f9      	ldrh	r1, [r7, #6]
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030e 	add.w	r3, r7, #14
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <I2Cx_ReadData+0x54>)
 800130a:	f004 f8fd 	bl	8005508 <HAL_I2C_Mem_Read>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
			&value, 1, I2cxTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <I2Cx_ReadData+0x44>
		/* Execute user timeout callback */
		I2Cx_Error();
 8001318:	f000 f80a 	bl	8001330 <I2Cx_Error>
	}
	return value;
 800131c:	7bbb      	ldrb	r3, [r7, #14]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	20000184 	.word	0x20000184

08001330 <I2Cx_Error>:

/**
 * @brief  I2Cx error treatment function.
 */
static void I2Cx_Error(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	/* De-initialize the I2C comunication BUS */
	HAL_I2C_DeInit(&I2cHandle);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <I2Cx_Error+0x14>)
 8001336:	f003 ffbd 	bl	80052b4 <HAL_I2C_DeInit>

	/* Re- Initiaize the I2C comunication BUS */
	I2Cx_Init();
 800133a:	f7ff ff73 	bl	8001224 <I2Cx_Init>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000184 	.word	0x20000184

08001348 <I2Cx_MspInit>:

/**
 * @brief  I2Cx MSP Init.
 * @param  hi2c: I2C handle
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the I2C peripheral */
	AUDIO_I2Cx_CLOCK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <I2Cx_MspInit+0xa4>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <I2Cx_MspInit+0xa4>)
 800135a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <I2Cx_MspInit+0xa4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]

	/* Enable SCK and SDA GPIO clocks */
	AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <I2Cx_MspInit+0xa4>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <I2Cx_MspInit+0xa4>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <I2Cx_MspInit+0xa4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]

	/* I2Cx SD1 & SCK pin configuration */
	GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8001388:	f44f 7310 	mov.w	r3, #576	; 0x240
 800138c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800138e:	2312      	movs	r3, #18
 8001390:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 800139a:	2304      	movs	r3, #4
 800139c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	; (80013f0 <I2Cx_MspInit+0xa8>)
 80013a6:	f003 fb77 	bl	8004a98 <HAL_GPIO_Init>

	/* Force the I2C peripheral clock reset */
	AUDIO_I2Cx_FORCE_RESET();
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <I2Cx_MspInit+0xa4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <I2Cx_MspInit+0xa4>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	AUDIO_I2Cx_RELEASE_RESET();
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <I2Cx_MspInit+0xa4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <I2Cx_MspInit+0xa4>)
 80013bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013c0:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	201f      	movs	r0, #31
 80013c8:	f002 ff61 	bl	800428e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 80013cc:	201f      	movs	r0, #31
 80013ce:	f002 ff7a 	bl	80042c6 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210f      	movs	r1, #15
 80013d6:	2020      	movs	r0, #32
 80013d8:	f002 ff59 	bl	800428e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 80013dc:	2020      	movs	r0, #32
 80013de:	f002 ff72 	bl	80042c6 <HAL_NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <AUDIO_IO_Init>:
/********************************* LINK AUDIO *********************************/

/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable Reset GPIO Clock */
	AUDIO_RESET_GPIO_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <AUDIO_IO_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <AUDIO_IO_Init+0x68>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <AUDIO_IO_Init+0x68>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

	/* Audio reset pin configuration -------------------------------------------*/
	GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001416:	2310      	movs	r3, #16
 8001418:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800141e:	2302      	movs	r3, #2
 8001420:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <AUDIO_IO_Init+0x6c>)
 800142c:	f003 fb34 	bl	8004a98 <HAL_GPIO_Init>

	I2Cx_Init();
 8001430:	f7ff fef8 	bl	8001224 <I2Cx_Init>

	/* Power Down the codec */
	CODEC_AUDIO_POWER_OFF();
 8001434:	2200      	movs	r2, #0
 8001436:	2110      	movs	r1, #16
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <AUDIO_IO_Init+0x6c>)
 800143a:	f003 fddd 	bl	8004ff8 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 800143e:	2005      	movs	r0, #5
 8001440:	f002 fa14 	bl	800386c <HAL_Delay>

	/* Power on the codec */
	CODEC_AUDIO_POWER_ON();
 8001444:	2201      	movs	r2, #1
 8001446:	2110      	movs	r1, #16
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <AUDIO_IO_Init+0x6c>)
 800144a:	f003 fdd5 	bl	8004ff8 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 800144e:	2005      	movs	r0, #5
 8001450:	f002 fa0c 	bl	800386c <HAL_Delay>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40020c00 	.word	0x40020c00

08001464 <AUDIO_IO_DeInit>:

/**
 * @brief  DeInitializes Audio low level.
 */
void AUDIO_IO_DeInit(void) {
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address 
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	460b      	mov	r3, r1
 800147e:	71bb      	strb	r3, [r7, #6]
 8001480:	4613      	mov	r3, r2
 8001482:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteData(Addr, Reg, Value);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	b29b      	uxth	r3, r3
 8001488:	797a      	ldrb	r2, [r7, #5]
 800148a:	79b9      	ldrb	r1, [r7, #6]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fefb 	bl	8001288 <I2Cx_WriteData>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address 
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	460a      	mov	r2, r1
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	4613      	mov	r3, r2
 80014a8:	71bb      	strb	r3, [r7, #6]
	return I2Cx_ReadData(Addr, Reg);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	79ba      	ldrb	r2, [r7, #6]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff10 	bl	80012d8 <I2Cx_ReadData>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	0000      	movs	r0, r0
 80014c4:	0000      	movs	r0, r0
	...

080014c8 <_Z9getInputsv>:
        {0, 255, 255},
        {0, 255, 159},
        {255, 0, 0}
    };

void getInputs() {
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ce:	b672      	cpsid	i
}
 80014d0:	bf00      	nop
	__disable_irq();
	for (size_t i = 0; i < ANALOG_INPUTS; ++i) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
 80014d6:	e00b      	b.n	80014f0 <_Z9getInputsv+0x28>
		analogInputs[i] = adc1Buffer[i];
 80014d8:	4a79      	ldr	r2, [pc, #484]	; (80016c0 <_Z9getInputsv+0x1f8>)
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	4413      	add	r3, r2
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	4a78      	ldr	r2, [pc, #480]	; (80016c4 <_Z9getInputsv+0x1fc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < ANALOG_INPUTS; ++i) {
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	d9f0      	bls.n	80014d8 <_Z9getInputsv+0x10>
	}
	bool buttonActive = false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	76fb      	strb	r3, [r7, #27]
	uint8_t index = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	76bb      	strb	r3, [r7, #26]

	// Read button matrix
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
	for (int colIndex = 0; colIndex < 4; ++colIndex) {
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	e0a1      	b.n	8001656 <_Z9getInputsv+0x18e>
		// Set the current column to output and low
		GPIO_InitStruct.Pin = colPins[colIndex];
 8001512:	4a6d      	ldr	r2, [pc, #436]	; (80016c8 <_Z9getInputsv+0x200>)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151a:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(colPorts[colIndex], &GPIO_InitStruct);
 8001524:	4a69      	ldr	r2, [pc, #420]	; (80016cc <_Z9getInputsv+0x204>)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	1d3a      	adds	r2, r7, #4
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fab1 	bl	8004a98 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(colPorts[colIndex], colPins[colIndex],
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <_Z9getInputsv+0x204>)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800153e:	4a62      	ldr	r2, [pc, #392]	; (80016c8 <_Z9getInputsv+0x200>)
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	f003 fd55 	bl	8004ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		// Iterate through the rows
		for (int rowIndex = 0; rowIndex < 4; ++rowIndex) {
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e068      	b.n	8001626 <_Z9getInputsv+0x15e>
			GPIO_InitStruct.Pin = rowPins[rowIndex];
 8001554:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <_Z9getInputsv+0x208>)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155c:	607b      	str	r3, [r7, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(rowPorts[rowIndex], &GPIO_InitStruct);
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <_Z9getInputsv+0x20c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	1d3a      	adds	r2, r7, #4
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fa90 	bl	8004a98 <HAL_GPIO_Init>

			buttonActive = !HAL_GPIO_ReadPin(rowPorts[rowIndex],
 8001578:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <_Z9getInputsv+0x20c>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001580:	4953      	ldr	r1, [pc, #332]	; (80016d0 <_Z9getInputsv+0x208>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f003 fd1c 	bl	8004fc8 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	76fb      	strb	r3, [r7, #27]
					rowPins[rowIndex]);

			index = colIndex + rowIndex * 4;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	76bb      	strb	r3, [r7, #26]
			digitalInputs[index] = buttonActive;
 80015ac:	7ebb      	ldrb	r3, [r7, #26]
 80015ae:	494a      	ldr	r1, [pc, #296]	; (80016d8 <_Z9getInputsv+0x210>)
 80015b0:	7efa      	ldrb	r2, [r7, #27]
 80015b2:	54ca      	strb	r2, [r1, r3]

			// Change LED state
			if (buttonActive) {
 80015b4:	7efb      	ldrb	r3, [r7, #27]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01e      	beq.n	80015f8 <_Z9getInputsv+0x130>
				ws2812_pixel(ledButtonMap[index], ledColors[index][0], ledColors[index][1], ledColors[index][2]);
 80015ba:	7ebb      	ldrb	r3, [r7, #26]
 80015bc:	4a47      	ldr	r2, [pc, #284]	; (80016dc <_Z9getInputsv+0x214>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	b298      	uxth	r0, r3
 80015c2:	7eba      	ldrb	r2, [r7, #26]
 80015c4:	4946      	ldr	r1, [pc, #280]	; (80016e0 <_Z9getInputsv+0x218>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	7819      	ldrb	r1, [r3, #0]
 80015d0:	7eba      	ldrb	r2, [r7, #26]
 80015d2:	4c43      	ldr	r4, [pc, #268]	; (80016e0 <_Z9getInputsv+0x218>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	4423      	add	r3, r4
 80015dc:	3301      	adds	r3, #1
 80015de:	781c      	ldrb	r4, [r3, #0]
 80015e0:	7eba      	ldrb	r2, [r7, #26]
 80015e2:	4d3f      	ldr	r5, [pc, #252]	; (80016e0 <_Z9getInputsv+0x218>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	442b      	add	r3, r5
 80015ec:	3302      	adds	r3, #2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4622      	mov	r2, r4
 80015f2:	f002 f831 	bl	8003658 <_Z12ws2812_pixelthhh>
 80015f6:	e008      	b.n	800160a <_Z9getInputsv+0x142>
			} else {
				ws2812_pixel(ledButtonMap[index], 0, 0, 0);
 80015f8:	7ebb      	ldrb	r3, [r7, #26]
 80015fa:	4a38      	ldr	r2, [pc, #224]	; (80016dc <_Z9getInputsv+0x214>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	b298      	uxth	r0, r3
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	f002 f827 	bl	8003658 <_Z12ws2812_pixelthhh>
			}
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160a:	2302      	movs	r3, #2
 800160c:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(rowPorts[rowIndex], &GPIO_InitStruct);
 800160e:	4a31      	ldr	r2, [pc, #196]	; (80016d4 <_Z9getInputsv+0x20c>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	1d3a      	adds	r2, r7, #4
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fa3c 	bl	8004a98 <HAL_GPIO_Init>
		for (int rowIndex = 0; rowIndex < 4; ++rowIndex) {
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b03      	cmp	r3, #3
 800162a:	dd93      	ble.n	8001554 <_Z9getInputsv+0x8c>
		}

		// Disable the current column by setting it to input with pull-up
		GPIO_InitStruct.Pin = colPins[colIndex];
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <_Z9getInputsv+0x200>)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001634:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(colPorts[colIndex], &GPIO_InitStruct);
 800163e:	4a23      	ldr	r2, [pc, #140]	; (80016cc <_Z9getInputsv+0x204>)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fa24 	bl	8004a98 <HAL_GPIO_Init>
	for (int colIndex = 0; colIndex < 4; ++colIndex) {
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	3301      	adds	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b03      	cmp	r3, #3
 800165a:	f77f af5a 	ble.w	8001512 <_Z9getInputsv+0x4a>

//	digitalInputs[0] = true;
//	digitalInputs[4] = true;
//	digitalInputs[7] = true;

	nextInputTime = time + INPUT_DELAY;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <_Z9getInputsv+0x21c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff14 	bl	8000490 <__aeabi_f2d>
 8001668:	a313      	add	r3, pc, #76	; (adr r3, 80016b8 <_Z9getInputsv+0x1f0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe fdb1 	bl	80001d4 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa43 	bl	8000b04 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <_Z9getInputsv+0x220>)
 8001682:	6013      	str	r3, [r2, #0]

	// Prevent clock overflow
	if (nextInputTime > 10) {
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <_Z9getInputsv+0x220>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dd06      	ble.n	80016a6 <_Z9getInputsv+0x1de>
		time = 0;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <_Z9getInputsv+0x21c>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
		nextInputTime = INPUT_DELAY;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_Z9getInputsv+0x220>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_Z9getInputsv+0x224>)
 80016a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016a6:	b662      	cpsie	i
}
 80016a8:	bf00      	nop
	}

	__enable_irq();
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	47ae147b 	.word	0x47ae147b
 80016bc:	3f847ae1 	.word	0x3f847ae1
 80016c0:	200001d8 	.word	0x200001d8
 80016c4:	20000004 	.word	0x20000004
 80016c8:	20000034 	.word	0x20000034
 80016cc:	20000024 	.word	0x20000024
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	200001e4 	.word	0x200001e4
 80016dc:	2000003c 	.word	0x2000003c
 80016e0:	2000004c 	.word	0x2000004c
 80016e4:	200005f8 	.word	0x200005f8
 80016e8:	200001e0 	.word	0x200001e0
 80016ec:	3c23d70a 	.word	0x3c23d70a

080016f0 <_ZSt17__size_to_integeri>:
      std::__fill_a(__first, __last, __value);
    }

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <_ZN11Synthesizer16generateSineWaveEth>:
public:
	Synthesizer() {
		initializeSineTable();
	}

	inline int16_t generateSineWave(uint16_t phase, uint8_t harmonics) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
		sample = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800171e:	461a      	mov	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800172a:	2201      	movs	r2, #1
 800172c:	721a      	strb	r2, [r3, #8]
 800172e:	e02d      	b.n	800178c <_ZN11Synthesizer16generateSineWaveEth+0x84>
			sample += sineTable[static_cast<uint16_t>(phase * i) >> 2] / i;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800173e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001742:	b29b      	uxth	r3, r3
 8001744:	8879      	ldrh	r1, [r7, #2]
 8001746:	fb11 f303 	smulbb	r3, r1, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	b29b      	uxth	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001758:	4619      	mov	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001760:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001764:	fb91 f3f3 	sdiv	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001770:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001778:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3301      	adds	r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	b25a      	sxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800178a:	721a      	strb	r2, [r3, #8]
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001794:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8001798:	4293      	cmp	r3, r2
 800179a:	dac9      	bge.n	8001730 <_ZN11Synthesizer16generateSineWaveEth+0x28>
		}

		return static_cast<int16_t>(sample / 3);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_ZN11Synthesizer16generateSineWaveEth+0xb4>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b21b      	sxth	r3, r3
	}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	55555556 	.word	0x55555556

080017c0 <_ZN11Synthesizer18generateSquareWaveEth>:

	inline int16_t generateSquareWave(uint16_t phase, uint8_t harmonics) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
		sample = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017d6:	461a      	mov	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017e2:	2201      	movs	r2, #1
 80017e4:	721a      	strb	r2, [r3, #8]
 80017e6:	e02e      	b.n	8001846 <_ZN11Synthesizer18generateSquareWaveEth+0x86>
			sample +=
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017ee:	685a      	ldr	r2, [r3, #4]
					(static_cast<uint16_t>(phase * i) < 32767 ? 32767 : -32768)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	8879      	ldrh	r1, [r7, #2]
 80017fe:	fb11 f303 	smulbb	r3, r1, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8001808:	428b      	cmp	r3, r1
 800180a:	d802      	bhi.n	8001812 <_ZN11Synthesizer18generateSquareWaveEth+0x52>
 800180c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001810:	e000      	b.n	8001814 <_ZN11Synthesizer18generateSquareWaveEth+0x54>
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <_ZN11Synthesizer18generateSquareWaveEth+0xb8>)
							/ i;
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800181a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800181e:	fb93 f3f1 	sdiv	r3, r3, r1
			sample +=
 8001822:	4413      	add	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800182a:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001832:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	b25a      	sxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001844:	721a      	strb	r2, [r3, #8]
 8001846:	787b      	ldrb	r3, [r7, #1]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800184e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8001852:	4293      	cmp	r3, r2
 8001854:	dac8      	bge.n	80017e8 <_ZN11Synthesizer18generateSquareWaveEth+0x28>
		}

		return static_cast<int16_t>(sample / 3);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <_ZN11Synthesizer18generateSquareWaveEth+0xbc>)
 8001860:	fb82 1203 	smull	r1, r2, r2, r3
 8001864:	17db      	asrs	r3, r3, #31
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b21b      	sxth	r3, r3
	}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	ffff8000 	.word	0xffff8000
 800187c:	55555556 	.word	0x55555556

08001880 <_ZN11Synthesizer20generateSawtoothWaveEth>:

	inline int16_t generateSawtoothWave(uint16_t phase, uint8_t harmonics) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
		sample = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001896:	461a      	mov	r2, r3
 8001898:	2300      	movs	r3, #0
 800189a:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018a2:	2201      	movs	r2, #1
 80018a4:	721a      	strb	r2, [r3, #8]
 80018a6:	e02b      	b.n	8001900 <_ZN11Synthesizer20generateSawtoothWaveEth+0x80>
			sample += (static_cast<int16_t>(static_cast<uint16_t>(phase * i)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
					- 32768)) / i;
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8879      	ldrh	r1, [r7, #2]
 80018be:	fb11 f303 	smulbb	r3, r1, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b21b      	sxth	r3, r3
			sample += (static_cast<int16_t>(static_cast<uint16_t>(phase * i)
 80018cc:	4619      	mov	r1, r3
					- 32768)) / i;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018d8:	fb91 f3f3 	sdiv	r3, r1, r3
			sample += (static_cast<int16_t>(static_cast<uint16_t>(phase * i)
 80018dc:	4413      	add	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80018e4:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018fe:	721a      	strb	r2, [r3, #8]
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001908:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800190c:	4293      	cmp	r3, r2
 800190e:	dacb      	bge.n	80018a8 <_ZN11Synthesizer20generateSawtoothWaveEth+0x28>
		}

		return sample / 3;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_ZN11Synthesizer20generateSawtoothWaveEth+0xb0>)
 800191a:	fb82 1203 	smull	r1, r2, r2, r3
 800191e:	17db      	asrs	r3, r3, #31
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b21b      	sxth	r3, r3
	}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	55555556 	.word	0x55555556

08001934 <_ZN11Synthesizer20generateTriangleWaveEth>:

	inline int16_t generateTriangleWave(uint16_t phase, uint8_t harmonics) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
		sample = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001956:	2201      	movs	r2, #1
 8001958:	721a      	strb	r2, [r3, #8]
 800195a:	e07d      	b.n	8001a58 <_ZN11Synthesizer20generateTriangleWaveEth+0x124>
			scaledPhase = phase * i;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001962:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001966:	b29b      	uxth	r3, r3
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	fb12 f303 	smulbb	r3, r2, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001976:	815a      	strh	r2, [r3, #10]
			if (scaledPhase < 16384) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800197e:	895b      	ldrh	r3, [r3, #10]
 8001980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001984:	d219      	bcs.n	80019ba <_ZN11Synthesizer20generateTriangleWaveEth+0x86>
				sample += ((scaledPhase * 32767) >> 14) / i;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001994:	895b      	ldrh	r3, [r3, #10]
 8001996:	4619      	mov	r1, r3
 8001998:	460b      	mov	r3, r1
 800199a:	03db      	lsls	r3, r3, #15
 800199c:	1a5b      	subs	r3, r3, r1
 800199e:	139b      	asrs	r3, r3, #14
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80019a6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 80019aa:	fb93 f3f1 	sdiv	r3, r3, r1
 80019ae:	4413      	add	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80019b6:	6053      	str	r3, [r2, #4]
 80019b8:	e041      	b.n	8001a3e <_ZN11Synthesizer20generateTriangleWaveEth+0x10a>
			} else if (scaledPhase < 49152) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019c0:	895b      	ldrh	r3, [r3, #10]
 80019c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80019c6:	d21d      	bcs.n	8001a04 <_ZN11Synthesizer20generateTriangleWaveEth+0xd0>
				sample += ((32767 - ((scaledPhase - 16384) * 32767 >> 14))) / i;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019d6:	895b      	ldrh	r3, [r3, #10]
 80019d8:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
 80019dc:	4613      	mov	r3, r2
 80019de:	03db      	lsls	r3, r3, #15
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	139b      	asrs	r3, r3, #14
 80019e4:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80019e8:	337f      	adds	r3, #127	; 0x7f
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80019f0:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80019f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a00:	6053      	str	r3, [r2, #4]
 8001a02:	e01c      	b.n	8001a3e <_ZN11Synthesizer20generateTriangleWaveEth+0x10a>
			} else {
				sample += ((((scaledPhase - 49152) * 32767) >> 14) - 32767) / i;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a12:	895b      	ldrh	r3, [r3, #10]
 8001a14:	f5a3 4240 	sub.w	r2, r3, #49152	; 0xc000
 8001a18:	4613      	mov	r3, r2
 8001a1a:	03db      	lsls	r3, r3, #15
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	139b      	asrs	r3, r3, #14
 8001a20:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001a24:	3b7f      	subs	r3, #127	; 0x7f
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a2c:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8001a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a3c:	6053      	str	r3, [r2, #4]
		for (i = 1; i < harmonics + 1; ++i) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a56:	721a      	strb	r2, [r3, #8]
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001a60:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f6bf af79 	bge.w	800195c <_ZN11Synthesizer20generateTriangleWaveEth+0x28>
			}
		}

		return static_cast<int16_t>(sample / 3);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <_ZN11Synthesizer20generateTriangleWaveEth+0x158>)
 8001a74:	fb82 1203 	smull	r1, r2, r2, r3
 8001a78:	17db      	asrs	r3, r3, #31
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	b21b      	sxth	r3, r3
	}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	55555556 	.word	0x55555556

08001a90 <_ZN10Oscillator10nextSampleERA16_s>:
			uint8_t numHarmonics) :
			synth(synth), noteStatesRef(&noteStatesRef), currentWaveform(static_cast<Waveform>(waveformControl >> 6)), harmonics(
					1 + (numHarmonics >> 5)) {
	}

	inline void nextSample(int16_t (&samples)[16]) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
		uint16_t frequency;
		for (size_t i = 0; i < 16; ++i) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e089      	b.n	8001bb4 <_ZN10Oscillator10nextSampleERA16_s+0x124>
			if (!(*noteStatesRef)[i])
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d17b      	bne.n	8001bac <_ZN10Oscillator10nextSampleERA16_s+0x11c>
				continue;

			uint16_t &phase = phases[i];
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]

			switch (currentWaveform) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7a1b      	ldrb	r3, [r3, #8]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d846      	bhi.n	8001b58 <_ZN10Oscillator10nextSampleERA16_s+0xc8>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <_ZN10Oscillator10nextSampleERA16_s+0x40>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001aff 	.word	0x08001aff
 8001ad8:	08001b1d 	.word	0x08001b1d
 8001adc:	08001b3b 	.word	0x08001b3b
			case Sine:
				sample = synth.generateSineWave(phase, harmonics);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	8819      	ldrh	r1, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fe0a 	bl	8001708 <_ZN11Synthesizer16generateSineWaveEth>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
				break;
 8001afc:	e02c      	b.n	8001b58 <_ZN10Oscillator10nextSampleERA16_s+0xc8>
			case Square:
				sample = synth.generateSquareWave(phase, harmonics);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	8819      	ldrh	r1, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff fe57 	bl	80017c0 <_ZN11Synthesizer18generateSquareWaveEth>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
				break;
 8001b1a:	e01d      	b.n	8001b58 <_ZN10Oscillator10nextSampleERA16_s+0xc8>
			case Sawtooth:
				sample = synth.generateSawtoothWave(phase, harmonics);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	8819      	ldrh	r1, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f7ff fea8 	bl	8001880 <_ZN11Synthesizer20generateSawtoothWaveEth>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	855a      	strh	r2, [r3, #42]	; 0x2a
				break;
 8001b38:	e00e      	b.n	8001b58 <_ZN10Oscillator10nextSampleERA16_s+0xc8>
			case Triangle:
				sample = synth.generateTriangleWave(phase, harmonics);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	8819      	ldrh	r1, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7ff fef3 	bl	8001934 <_ZN11Synthesizer20generateTriangleWaveEth>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
				break;
 8001b56:	bf00      	nop
			}

			frequency = noteFrequencies[i] * NOTE_SCALING / 10000;
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <_ZN10Oscillator10nextSampleERA16_s+0x138>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b60:	461a      	mov	r2, r3
 8001b62:	f647 63f4 	movw	r3, #32500	; 0x7ef4
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <_ZN10Oscillator10nextSampleERA16_s+0x13c>)
 8001b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b70:	1312      	asrs	r2, r2, #12
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	81fb      	strh	r3, [r7, #14]
			phase += frequency * static_cast<int32_t>(65535) / SAMPLE_RATE;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	8819      	ldrh	r1, [r3, #0]
 8001b7c:	89fa      	ldrh	r2, [r7, #14]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_ZN10Oscillator10nextSampleERA16_s+0x140>)
 8001b86:	fb82 0203 	smull	r0, r2, r2, r3
 8001b8a:	441a      	add	r2, r3
 8001b8c:	1392      	asrs	r2, r2, #14
 8001b8e:	17db      	asrs	r3, r3, #31
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	440b      	add	r3, r1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	801a      	strh	r2, [r3, #0]
			samples[i] = sample;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001baa:	e000      	b.n	8001bae <_ZN10Oscillator10nextSampleERA16_s+0x11e>
				continue;
 8001bac:	bf00      	nop
		for (size_t i = 0; i < 16; ++i) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f af72 	bls.w	8001aa0 <_ZN10Oscillator10nextSampleERA16_s+0x10>
		}
	}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08008d88 	.word	0x08008d88
 8001bcc:	68db8bad 	.word	0x68db8bad
 8001bd0:	833c6d73 	.word	0x833c6d73

08001bd4 <_ZN13LowPassFilter7processEs>:
	LowPassFilter(uint8_t cutoffFrequency) :
			cutoffFrequency(cutoffFrequency > 10 ? cutoffFrequency : 10), previousOutput(
					0) {
	}

	inline int16_t process(int16_t input) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
		int16_t output = (cutoffFrequency * input
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
				+ (255 - cutoffFrequency) * previousOutput) / 255;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <_ZN13LowPassFilter7processEs+0x54>)
 8001c04:	fb82 1203 	smull	r1, r2, r2, r3
 8001c08:	441a      	add	r2, r3
 8001c0a:	11d2      	asrs	r2, r2, #7
 8001c0c:	17db      	asrs	r3, r3, #31
 8001c0e:	1ad3      	subs	r3, r2, r3
		int16_t output = (cutoffFrequency * input
 8001c10:	81fb      	strh	r3, [r7, #14]
		previousOutput = output;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	805a      	strh	r2, [r3, #2]
		return output;
 8001c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	80808081 	.word	0x80808081

08001c2c <_ZN12ADSREnvelope10nextSampleERA16_t>:
			const uint8_t &releaseRef) :
			noteStatesRef(&noteStatesRef), attack(attackRef), decay(decayRef), sustain(
					sustainRef), release(releaseRef) {
	}

	inline void nextSample(uint16_t (&samples)[16]) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
		for (size_t i = 0; i < 16; ++i) {
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e120      	b.n	8001e7e <_ZN12ADSREnvelope10nextSampleERA16_t+0x252>
			NoteState &ns = noteStates[i];
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
			const bool noteOn = (*noteStatesRef)[i];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	73fb      	strb	r3, [r7, #15]
			if (noteOn && ns.state == NoteState::Off) {
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d012      	beq.n	8001c80 <_ZN12ADSREnvelope10nextSampleERA16_t+0x54>
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10e      	bne.n	8001c80 <_ZN12ADSREnvelope10nextSampleERA16_t+0x54>
				ns.state = NoteState::Attack;
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
				ns.currentValue = 0;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
				++activeCount;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001c74:	3301      	adds	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001c7e:	e01a      	b.n	8001cb6 <_ZN12ADSREnvelope10nextSampleERA16_t+0x8a>
			} else if (noteOn && ns.state == NoteState::Release) {
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <_ZN12ADSREnvelope10nextSampleERA16_t+0x70>
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d106      	bne.n	8001c9c <_ZN12ADSREnvelope10nextSampleERA16_t+0x70>
				ns.state = NoteState::Attack;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
				ns.currentValue = 0;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	e00c      	b.n	8001cb6 <_ZN12ADSREnvelope10nextSampleERA16_t+0x8a>
			} else if (!noteOn && ns.state != NoteState::Off) {
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <_ZN12ADSREnvelope10nextSampleERA16_t+0x8a>
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <_ZN12ADSREnvelope10nextSampleERA16_t+0x8a>
				ns.state = NoteState::Release;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	701a      	strb	r2, [r3, #0]
			}

			switch (ns.state) {
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	f200 80d5 	bhi.w	8001e6a <_ZN12ADSREnvelope10nextSampleERA16_t+0x23e>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <_ZN12ADSREnvelope10nextSampleERA16_t+0x9c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cdd 	.word	0x08001cdd
 8001ccc:	08001ce9 	.word	0x08001ce9
 8001cd0:	08001d4f 	.word	0x08001d4f
 8001cd4:	08001e6b 	.word	0x08001e6b
 8001cd8:	08001ddd 	.word	0x08001ddd
			case NoteState::Off:
				samples[i] = 0;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8001ce6:	e0c0      	b.n	8001e6a <_ZN12ADSREnvelope10nextSampleERA16_t+0x23e>
			case NoteState::Attack:
				if (attack <= 1) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d807      	bhi.n	8001d04 <_ZN12ADSREnvelope10nextSampleERA16_t+0xd8>
					ns.currentValue = 65280;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001cfa:	605a      	str	r2, [r3, #4]
					ns.state = NoteState::Decay;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
					if (ns.currentValue >= 65280) {
						ns.currentValue = 65280;
						ns.state = NoteState::Decay;
					}
				}
				break;
 8001d02:	e0ad      	b.n	8001e60 <_ZN12ADSREnvelope10nextSampleERA16_t+0x234>
					ns.currentValue +=
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	685a      	ldr	r2, [r3, #4]
							(65280 / (attack * SAMPLE_RATE / factor));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f647 43d8 	movw	r3, #31960	; 0x7cd8
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f8b1 1096 	ldrh.w	r1, [r1, #150]	; 0x96
 8001d20:	fb93 f3f1 	sdiv	r3, r3, r1
 8001d24:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001d28:	fb91 f3f3 	sdiv	r3, r1, r3
					ns.currentValue +=
 8001d2c:	441a      	add	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
					if (ns.currentValue >= 65280) {
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8001d3a:	f2c0 8091 	blt.w	8001e60 <_ZN12ADSREnvelope10nextSampleERA16_t+0x234>
						ns.currentValue = 65280;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001d44:	605a      	str	r2, [r3, #4]
						ns.state = NoteState::Decay;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	701a      	strb	r2, [r3, #0]
				break;
 8001d4c:	e088      	b.n	8001e60 <_ZN12ADSREnvelope10nextSampleERA16_t+0x234>
			case NoteState::Decay:
				if ((decay) <= 1) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d80a      	bhi.n	8001d70 <_ZN12ADSREnvelope10nextSampleERA16_t+0x144>
					ns.currentValue = sustain * 256;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	605a      	str	r2, [r3, #4]
					ns.state = NoteState::Sustain;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	701a      	strb	r2, [r3, #0]
					if (ns.currentValue <= sustain * 255) {
						ns.currentValue = sustain * 255;
						ns.state = NoteState::Sustain;
					}
				}
				break;
 8001d6e:	e079      	b.n	8001e64 <_ZN12ADSREnvelope10nextSampleERA16_t+0x238>
					ns.currentValue -= ((65280 - sustain * 256)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d80:	0219      	lsls	r1, r3, #8
							/ (decay * SAMPLE_RATE / factor));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f647 43d8 	movw	r3, #31960	; 0x7cd8
 8001d90:	fb00 f303 	mul.w	r3, r0, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f8b0 0096 	ldrh.w	r0, [r0, #150]	; 0x96
 8001d9a:	fb93 f3f0 	sdiv	r3, r3, r0
 8001d9e:	fb91 f3f3 	sdiv	r3, r1, r3
					ns.currentValue -= ((65280 - sustain * 256)
 8001da2:	1ad2      	subs	r2, r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	605a      	str	r2, [r3, #4]
					if (ns.currentValue <= sustain * 255) {
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	460b      	mov	r3, r1
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	1a5b      	subs	r3, r3, r1
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dc51      	bgt.n	8001e64 <_ZN12ADSREnvelope10nextSampleERA16_t+0x238>
						ns.currentValue = sustain * 255;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4613      	mov	r3, r2
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	1a9a      	subs	r2, r3, r2
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	605a      	str	r2, [r3, #4]
						ns.state = NoteState::Sustain;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	701a      	strb	r2, [r3, #0]
				break;
 8001dda:	e043      	b.n	8001e64 <_ZN12ADSREnvelope10nextSampleERA16_t+0x238>
			case NoteState::Sustain:
				// Hold the sustain level
				break;
			case NoteState::Release:
				if (release <= 1) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d80e      	bhi.n	8001e06 <_ZN12ADSREnvelope10nextSampleERA16_t+0x1da>
					ns.currentValue = 0;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
					ns.state = NoteState::Off;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
					--activeCount;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						ns.currentValue = 0;
						ns.state = NoteState::Off;
						--activeCount;
					}
				}
				break;
 8001e04:	e030      	b.n	8001e68 <_ZN12ADSREnvelope10nextSampleERA16_t+0x23c>
					ns.currentValue -= (sustain * 256
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	0219      	lsls	r1, r3, #8
							/ (release * SAMPLE_RATE / factor));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f647 43d8 	movw	r3, #31960	; 0x7cd8
 8001e22:	fb00 f303 	mul.w	r3, r0, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f8b0 0096 	ldrh.w	r0, [r0, #150]	; 0x96
 8001e2c:	fb93 f3f0 	sdiv	r3, r3, r0
 8001e30:	fb91 f3f3 	sdiv	r3, r1, r3
					ns.currentValue -= (sustain * 256
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
					if (ns.currentValue <= 0) {
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dc12      	bgt.n	8001e68 <_ZN12ADSREnvelope10nextSampleERA16_t+0x23c>
						ns.currentValue = 0;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
						ns.state = NoteState::Off;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
						--activeCount;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
				break;
 8001e5e:	e003      	b.n	8001e68 <_ZN12ADSREnvelope10nextSampleERA16_t+0x23c>
				break;
 8001e60:	bf00      	nop
 8001e62:	e002      	b.n	8001e6a <_ZN12ADSREnvelope10nextSampleERA16_t+0x23e>
				break;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <_ZN12ADSREnvelope10nextSampleERA16_t+0x23e>
				break;
 8001e68:	bf00      	nop
			}
			samples[i] = static_cast<uint16_t>(ns.currentValue);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (size_t i = 0; i < 16; ++i) {
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	f67f aedb 	bls.w	8001c3c <_ZN12ADSREnvelope10nextSampleERA16_t+0x10>
		}
	}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_ZNK12ADSREnvelope19getActiveNotesCountEv>:

	inline uint8_t getActiveNotesCount() const {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
		return activeCount;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
	}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_ZSt6fill_nIPtiiET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001eba:	68fc      	ldr	r4, [r7, #12]
 8001ebc:	68b8      	ldr	r0, [r7, #8]
 8001ebe:	f7ff fc17 	bl	80016f0 <_ZSt17__size_to_integeri>
 8001ec2:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f915 	bl	80020f8 <_ZSt19__iterator_categoryIPtENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001ece:	4633      	mov	r3, r6
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 f919 	bl	800210c <_ZSt10__fill_n_aIPtiiET_S1_T0_RKT1_St26random_access_iterator_tag>
 8001eda:	4603      	mov	r3, r0
    }
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee4 <_Z15fillAudioBufferv>:
uint16_t audioBuffer[AUDIO_BUFFER_SIZE * 2];
bool bufferHalf = false;
float time = 0;

// Fills one half of the audio buffer with synthesized audio samples
inline void fillAudioBuffer() {
 8001ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ee8:	b098      	sub	sp, #96	; 0x60
 8001eea:	af00      	add	r7, sp, #0
	uint16_t *bufferPtr =
			bufferHalf ? &audioBuffer[AUDIO_BUFFER_SIZE] : &audioBuffer[0];
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <_Z15fillAudioBufferv+0x14c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <_Z15fillAudioBufferv+0x14>
 8001ef4:	4b4f      	ldr	r3, [pc, #316]	; (8002034 <_Z15fillAudioBufferv+0x150>)
 8001ef6:	e000      	b.n	8001efa <_Z15fillAudioBufferv+0x16>
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <_Z15fillAudioBufferv+0x154>)
	uint16_t *bufferPtr =
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c

	int16_t oscillatorSamples[16] = { 0 };
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	2220      	movs	r2, #32
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f006 ff07 	bl	8008d18 <memset>
	uint16_t envelopes[16] = { 0 };
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 ff01 	bl	8008d18 <memset>
	int64_t sum;
	int16_t envelopeSample;
	uint16_t filteredSample;
	uint8_t activeNotes;

	for (size_t i = 0; i < AUDIO_BUFFER_SIZE; ++i) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
 8001f1a:	e07a      	b.n	8002012 <_Z15fillAudioBufferv+0x12e>
		oscillator.nextSample(oscillatorSamples);
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	4619      	mov	r1, r3
 8001f22:	4846      	ldr	r0, [pc, #280]	; (800203c <_Z15fillAudioBufferv+0x158>)
 8001f24:	f7ff fdb4 	bl	8001a90 <_ZN10Oscillator10nextSampleERA16_s>
		envelope.nextSample(envelopes);
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4844      	ldr	r0, [pc, #272]	; (8002040 <_Z15fillAudioBufferv+0x15c>)
 8001f2e:	f7ff fe7d 	bl	8001c2c <_ZN12ADSREnvelope10nextSampleERA16_t>

		activeNotes = envelope.getActiveNotesCount();
 8001f32:	4843      	ldr	r0, [pc, #268]	; (8002040 <_Z15fillAudioBufferv+0x15c>)
 8001f34:	f7ff ffae 	bl	8001e94 <_ZNK12ADSREnvelope19getActiveNotesCountEv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if (activeNotes == 0) {
 8001f3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d111      	bne.n	8001f6a <_Z15fillAudioBufferv+0x86>
			std::fill_n(bufferPtr, AUDIO_BUFFER_SIZE, 0);
 8001f46:	2300      	movs	r3, #0
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f56:	f7ff ffaa 	bl	8001eae <_ZSt6fill_nIPtiiET_S1_T0_RKT1_>
			bufferHalf = !bufferHalf;
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <_Z15fillAudioBufferv+0x14c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <_Z15fillAudioBufferv+0x14c>)
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e05d      	b.n	8002026 <_Z15fillAudioBufferv+0x142>
			return;
		}

		sum = 0;
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (size_t j = 0; j < 16; ++j) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	653b      	str	r3, [r7, #80]	; 0x50
 8001f7a:	e01c      	b.n	8001fb6 <_Z15fillAudioBufferv+0xd2>
			sum += oscillatorSamples[j] * envelopes[j];
 8001f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	3360      	adds	r3, #96	; 0x60
 8001f82:	443b      	add	r3, r7
 8001f84:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	3360      	adds	r3, #96	; 0x60
 8001f90:	443b      	add	r3, r7
 8001f92:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	17da      	asrs	r2, r3, #31
 8001f9c:	461c      	mov	r4, r3
 8001f9e:	4615      	mov	r5, r2
 8001fa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fa4:	eb12 0804 	adds.w	r8, r2, r4
 8001fa8:	eb43 0905 	adc.w	r9, r3, r5
 8001fac:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
		for (size_t j = 0; j < 16; ++j) {
 8001fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	653b      	str	r3, [r7, #80]	; 0x50
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d9df      	bls.n	8001f7c <_Z15fillAudioBufferv+0x98>
		}

		// Normalize by max size of int16 and max number of notes
		envelopeSample = static_cast<int16_t>(sum >> (16 + 4 - 1));
 8001fbc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	0cc2      	lsrs	r2, r0, #19
 8001fca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001fce:	14cb      	asrs	r3, r1, #19
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		filteredSample = static_cast<uint16_t>(filter.process(envelopeSample));
 8001fd6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4819      	ldr	r0, [pc, #100]	; (8002044 <_Z15fillAudioBufferv+0x160>)
 8001fde:	f7ff fdf9 	bl	8001bd4 <_ZN13LowPassFilter7processEs>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		bufferPtr[i] = filteredSample;
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fee:	4413      	add	r3, r2
 8001ff0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001ff4:	801a      	strh	r2, [r3, #0]
		bufferPtr[++i] = filteredSample;
 8001ff6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8001ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	3301      	adds	r3, #1
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
 8002002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	460a      	mov	r2, r1
 800200a:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_BUFFER_SIZE; ++i) {
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	3301      	adds	r3, #1
 8002010:	657b      	str	r3, [r7, #84]	; 0x54
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d981      	bls.n	8001f1c <_Z15fillAudioBufferv+0x38>
	}
	bufferHalf = !bufferHalf;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_Z15fillAudioBufferv+0x14c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_Z15fillAudioBufferv+0x14c>)
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	3760      	adds	r7, #96	; 0x60
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800202e:	bf00      	nop
 8002030:	200005f4 	.word	0x200005f4
 8002034:	200003f4 	.word	0x200003f4
 8002038:	200001f4 	.word	0x200001f4
 800203c:	2000860c 	.word	0x2000860c
 8002040:	2000863c 	.word	0x2000863c
 8002044:	200086d4 	.word	0x200086d4

08002048 <AUDIO_OUT_HalfTransfer_CallBack>:

// Callback when half of the audio buffer is played
extern "C" void AUDIO_OUT_HalfTransfer_CallBack(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	time += 10000.0f * AUDIO_BUFFER_SIZE / (SAMPLE_RATE * NOTE_SCALING);
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002094 <AUDIO_OUT_HalfTransfer_CallBack+0x4c>
 8002056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 800205c:	edc3 7a00 	vstr	s15, [r3]

	// Stop interrupt nesting if no user input for some time
	if (time > nextInputTime + 1) {
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <AUDIO_OUT_HalfTransfer_CallBack+0x50>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800206a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	d502      	bpl.n	8002084 <AUDIO_OUT_HalfTransfer_CallBack+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 800207e:	b672      	cpsid	i
}
 8002080:	bf00      	nop
		__disable_irq();
		return;
 8002082:	e004      	b.n	800208e <AUDIO_OUT_HalfTransfer_CallBack+0x46>
	}

	bufferHalf = false;  // First half of the buffer will be filled next
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <AUDIO_OUT_HalfTransfer_CallBack+0x54>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	fillAudioBuffer();  // Fill the first half of the buffer
 800208a:	f7ff ff2b 	bl	8001ee4 <_Z15fillAudioBufferv>
}
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200005f8 	.word	0x200005f8
 8002094:	3b218573 	.word	0x3b218573
 8002098:	200001e0 	.word	0x200001e0
 800209c:	200005f4 	.word	0x200005f4

080020a0 <AUDIO_OUT_TransferComplete_CallBack>:

// Callback when the full audio buffer is played
extern "C" void AUDIO_OUT_TransferComplete_CallBack(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	time += 10000.0f * AUDIO_BUFFER_SIZE / (SAMPLE_RATE * NOTE_SCALING);
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <AUDIO_OUT_TransferComplete_CallBack+0x48>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80020ec <AUDIO_OUT_TransferComplete_CallBack+0x4c>
 80020ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <AUDIO_OUT_TransferComplete_CallBack+0x48>)
 80020b4:	edc3 7a00 	vstr	s15, [r3]

	// Stop interrupt nesting if no user input for some time
	if (time > nextInputTime + 1) {
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <AUDIO_OUT_TransferComplete_CallBack+0x50>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <AUDIO_OUT_TransferComplete_CallBack+0x48>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	d502      	bpl.n	80020dc <AUDIO_OUT_TransferComplete_CallBack+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80020d6:	b672      	cpsid	i
}
 80020d8:	bf00      	nop
		__disable_irq();
		return;
 80020da:	e004      	b.n	80020e6 <AUDIO_OUT_TransferComplete_CallBack+0x46>
	}

	bufferHalf = true;  // Second half of the buffer will be filled next
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <AUDIO_OUT_TransferComplete_CallBack+0x54>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
	fillAudioBuffer();  // Fill the second half of the buffer
 80020e2:	f7ff feff 	bl	8001ee4 <_Z15fillAudioBufferv>
}
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200005f8 	.word	0x200005f8
 80020ec:	3b218573 	.word	0x3b218573
 80020f0:	200001e0 	.word	0x200001e0
 80020f4:	200005f4 	.word	0x200005f4

080020f8 <_ZSt19__iterator_categoryIPtENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZSt10__fill_n_aIPtiiET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	dc01      	bgt.n	8002124 <_ZSt10__fill_n_aIPtiiET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	e00c      	b.n	800213e <_ZSt10__fill_n_aIPtiiET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4619      	mov	r1, r3
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f808 	bl	8002146 <_ZSt8__fill_aIPtiEvT_S1_RKT0_>
      return __first + __n;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4413      	add	r3, r2
    }
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZSt8__fill_aIPtiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f804 	bl	8002164 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002176:	e006      	b.n	8002186 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x22>
	*__first = __tmp;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	801a      	strh	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3302      	adds	r3, #2
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d1f4      	bne.n	8002178 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <cs43l22_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice,
		uint8_t Volume, uint32_t AudioFreq) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	4603      	mov	r3, r0
 80021a6:	81fb      	strh	r3, [r7, #14]
 80021a8:	460b      	mov	r3, r1
 80021aa:	81bb      	strh	r3, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	72fb      	strb	r3, [r7, #11]
	uint32_t counter = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 80021b4:	f7ff f91e 	bl	80013f4 <AUDIO_IO_Init>

	/* Keep Codec powered OFF */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2201      	movs	r2, #1
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fb01 	bl	80027c8 <CODEC_IO_Write>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

	/*Save Output device for mute ON/OFF procedure*/
	switch (OutputDevice) {
 80021d0:	89bb      	ldrh	r3, [r7, #12]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d81b      	bhi.n	8002210 <cs43l22_Init+0x74>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <cs43l22_Init+0x44>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f9 	.word	0x080021f9
 80021e8:	08002201 	.word	0x08002201
 80021ec:	08002209 	.word	0x08002209
	case OUTPUT_DEVICE_SPEAKER:
		OutputDev = 0xFA;
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <cs43l22_Init+0x1c4>)
 80021f2:	22fa      	movs	r2, #250	; 0xfa
 80021f4:	701a      	strb	r2, [r3, #0]
		break;
 80021f6:	e00f      	b.n	8002218 <cs43l22_Init+0x7c>

	case OUTPUT_DEVICE_HEADPHONE:
		OutputDev = 0xAF;
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <cs43l22_Init+0x1c4>)
 80021fa:	22af      	movs	r2, #175	; 0xaf
 80021fc:	701a      	strb	r2, [r3, #0]
		break;
 80021fe:	e00b      	b.n	8002218 <cs43l22_Init+0x7c>

	case OUTPUT_DEVICE_BOTH:
		OutputDev = 0xAA;
 8002200:	4b57      	ldr	r3, [pc, #348]	; (8002360 <cs43l22_Init+0x1c4>)
 8002202:	22aa      	movs	r2, #170	; 0xaa
 8002204:	701a      	strb	r2, [r3, #0]
		break;
 8002206:	e007      	b.n	8002218 <cs43l22_Init+0x7c>

	case OUTPUT_DEVICE_AUTO:
		OutputDev = 0x05;
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <cs43l22_Init+0x1c4>)
 800220a:	2205      	movs	r2, #5
 800220c:	701a      	strb	r2, [r3, #0]
		break;
 800220e:	e003      	b.n	8002218 <cs43l22_Init+0x7c>

	default:
		OutputDev = 0x05;
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <cs43l22_Init+0x1c4>)
 8002212:	2205      	movs	r2, #5
 8002214:	701a      	strb	r2, [r3, #0]
		break;
 8002216:	bf00      	nop
	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <cs43l22_Init+0x1c4>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	2104      	movs	r1, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f000 facf 	bl	80027c8 <CODEC_IO_Write>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4413      	add	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

	/* Clock configuration: Auto detection */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2281      	movs	r2, #129	; 0x81
 800223a:	2105      	movs	r1, #5
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fac3 	bl	80027c8 <CODEC_IO_Write>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

	/* Set the Slave Mode and the audio Standard */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1,
 800224c:	89fb      	ldrh	r3, [r7, #14]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2204      	movs	r2, #4
 8002252:	2106      	movs	r1, #6
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fab7 	bl	80027c8 <CODEC_IO_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4413      	add	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
	CODEC_STANDARD);

	/* Set the Master volume */
	counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8002264:	7afa      	ldrb	r2, [r7, #11]
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f964 	bl	8002538 <cs43l22_SetVolume>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

	/* If the Speaker is enabled, set the Mono mode and volume attenuation level */
	if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8002278:	89bb      	ldrh	r3, [r7, #12]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d023      	beq.n	80022c6 <cs43l22_Init+0x12a>
		/* Set the Speaker Mono mode */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2206      	movs	r2, #6
 8002284:	210f      	movs	r1, #15
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa9e 	bl	80027c8 <CODEC_IO_Write>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

		/* Set the Speaker attenuation level */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2200      	movs	r2, #0
 800229c:	2124      	movs	r1, #36	; 0x24
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fa92 	bl	80027c8 <CODEC_IO_Write>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80022ae:	89fb      	ldrh	r3, [r7, #14]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2200      	movs	r2, #0
 80022b4:	2125      	movs	r1, #37	; 0x25
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fa86 	bl	80027c8 <CODEC_IO_Write>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
	 off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	 If this delay is not inserted, then the codec will not shut down properly and
	 it results in high noise after shut down. */

	/* Disable the analog soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	210a      	movs	r1, #10
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fa7a 	bl	80027c8 <CODEC_IO_Write>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4413      	add	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2204      	movs	r2, #4
 80022e4:	210e      	movs	r1, #14
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fa6e 	bl	80027c8 <CODEC_IO_Write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
	/* Disable the limiter attack level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	2127      	movs	r1, #39	; 0x27
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa62 	bl	80027c8 <CODEC_IO_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4413      	add	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
	/* Adjust Bass and Treble levels */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	220f      	movs	r2, #15
 8002314:	211f      	movs	r1, #31
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa56 	bl	80027c8 <CODEC_IO_Write>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
	/* Adjust PCM volume level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	220a      	movs	r2, #10
 800232c:	211a      	movs	r1, #26
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fa4a 	bl	80027c8 <CODEC_IO_Write>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	4413      	add	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	220a      	movs	r2, #10
 8002344:	211b      	movs	r1, #27
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fa3e 	bl	80027c8 <CODEC_IO_Write>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4413      	add	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

	/* Return communication control value */
	return counter;
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200005fc 	.word	0x200005fc

08002364 <cs43l22_DeInit>:
/**
 * @brief  Deinitializes the audio codec.
 * @param  None
 * @retval  None
 */
void cs43l22_DeInit(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	/* Deinitialize Audio Codec interface */
	AUDIO_IO_DeInit();
 8002368:	f7ff f87c 	bl	8001464 <AUDIO_IO_DeInit>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.   
 * @retval The CS43L22 ID 
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
	uint8_t Value;
	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 800237a:	f7ff f83b 	bl	80013f4 <AUDIO_IO_Init>

	Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f888 	bl	800149a <AUDIO_IO_Read>
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]
	Value = (Value & CS43L22_ID_MASK);
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	f023 0307 	bic.w	r3, r3, #7
 8002394:	73fb      	strb	r3, [r7, #15]

	return ((uint32_t) Value);
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.   
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t *pBuffer, uint16_t Size) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	80fb      	strh	r3, [r7, #6]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80bb      	strh	r3, [r7, #4]
	uint32_t counter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

	if (Is_cs43l22_Stop == 1) {
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <cs43l22_Play+0x70>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d123      	bne.n	8002404 <cs43l22_Play+0x64>
		/* Enable the digital soft ramp */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2206      	movs	r2, #6
 80023c2:	210e      	movs	r1, #14
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f9ff 	bl	80027c8 <CODEC_IO_Write>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

		/* Enable Output device */
		counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f919 	bl	8002610 <cs43l22_SetMute>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

		/* Power on the Codec */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	229e      	movs	r2, #158	; 0x9e
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f9ea 	bl	80027c8 <CODEC_IO_Write>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
		Is_cs43l22_Stop = 0;
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <cs43l22_Play+0x70>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
	}

	/* Return communication control value */
	return counter;
 8002404:	68fb      	ldr	r3, [r7, #12]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200000ac 	.word	0x200000ac

08002414 <cs43l22_Pause>:
/**
 * @brief Pauses playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Pause(uint16_t DeviceAddr) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]

	/* Pause the audio file playing */
	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8f2 	bl	8002610 <cs43l22_SetMute>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

	/* Put the Codec in Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2201      	movs	r2, #1
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f9c3 	bl	80027c8 <CODEC_IO_Write>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

	return counter;
 800244c:	68fb      	ldr	r3, [r7, #12]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <cs43l22_Resume>:
/**
 * @brief Resumes playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Resume(uint16_t DeviceAddr) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
	volatile uint32_t index = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
	/* Resumes the audio file playing */
	/* Unmute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f8ce 	bl	8002610 <cs43l22_SetMute>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

	for (index = 0x00; index < 0xFF; index++)
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	e002      	b.n	8002488 <cs43l22_Resume+0x30>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2bfe      	cmp	r3, #254	; 0xfe
 800248c:	d9f9      	bls.n	8002482 <cs43l22_Resume+0x2a>
		;

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <cs43l22_Resume+0x74>)
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	2104      	movs	r1, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f994 	bl	80027c8 <CODEC_IO_Write>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

	/* Exit the Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	229e      	movs	r2, #158	; 0x9e
 80024b0:	2102      	movs	r1, #2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f988 	bl	80027c8 <CODEC_IO_Write>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

	return counter;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200005fc 	.word	0x200005fc

080024d0 <cs43l22_Stop>:
 *                           mode, the codec is set to default configuration 
 *                           (user should re-Initialize the codec in order to 
 *                            play again the audio stream).
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f893 	bl	8002610 <cs43l22_SetMute>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2204      	movs	r2, #4
 80024f8:	210e      	movs	r1, #14
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f964 	bl	80027c8 <CODEC_IO_Write>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

	/* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	229f      	movs	r2, #159	; 0x9f
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f958 	bl	80027c8 <CODEC_IO_Write>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

	Is_cs43l22_Stop = 1;
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <cs43l22_Stop+0x64>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
	return counter;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200000ac 	.word	0x200000ac

08002538 <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers 
 *                description for more details).
 *         
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	460a      	mov	r2, r1
 8002542:	80fb      	strh	r3, [r7, #6]
 8002544:	4613      	mov	r3, r2
 8002546:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d80b      	bhi.n	800256a <cs43l22_SetVolume+0x32>
 8002552:	797a      	ldrb	r2, [r7, #5]
 8002554:	4613      	mov	r3, r2
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <cs43l22_SetVolume+0xb8>)
 800255c:	fb82 1203 	smull	r1, r2, r2, r3
 8002560:	1152      	asrs	r2, r2, #5
 8002562:	17db      	asrs	r3, r3, #31
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e000      	b.n	800256c <cs43l22_SetVolume+0x34>
 800256a:	23ff      	movs	r3, #255	; 0xff
 800256c:	72fb      	strb	r3, [r7, #11]

	if (convertedvol > 0xE6) {
 800256e:	7afb      	ldrb	r3, [r7, #11]
 8002570:	2be6      	cmp	r3, #230	; 0xe6
 8002572:	d91c      	bls.n	80025ae <cs43l22_SetVolume+0x76>
		/* Set the Master volume */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL,
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	b2d8      	uxtb	r0, r3
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	3319      	adds	r3, #25
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	2120      	movs	r1, #32
 8002582:	f000 f921 	bl	80027c8 <CODEC_IO_Write>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
				convertedvol - 0xE7);
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL,
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	b2d8      	uxtb	r0, r3
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	3319      	adds	r3, #25
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	2121      	movs	r1, #33	; 0x21
 800259e:	f000 f913 	bl	80027c8 <CODEC_IO_Write>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e01b      	b.n	80025e6 <cs43l22_SetVolume+0xae>
				convertedvol - 0xE7);
	} else {
		/* Set the Master volume */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL,
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	b2d8      	uxtb	r0, r3
 80025b2:	7afb      	ldrb	r3, [r7, #11]
 80025b4:	3319      	adds	r3, #25
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	2120      	movs	r1, #32
 80025bc:	f000 f904 	bl	80027c8 <CODEC_IO_Write>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
				convertedvol + 0x19);
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL,
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2d8      	uxtb	r0, r3
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	3319      	adds	r3, #25
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	2121      	movs	r1, #33	; 0x21
 80025d8:	f000 f8f6 	bl	80027c8 <CODEC_IO_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
				convertedvol + 0x19);
	}

	return counter;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	51eb851f 	.word	0x51eb851f

080025f4 <cs43l22_SetFrequency>:
 * @brief Sets new frequency.
 * @param DeviceAddr: Device address on communication Bus.   
 * @param AudioFreq: Audio frequency used to play the audio stream.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	80fb      	strh	r3, [r7, #6]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.   
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]

	/* Set the Mute mode */
	if (Cmd == AUDIO_MUTE_ON) {
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d124      	bne.n	8002670 <cs43l22_SetMute+0x60>
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	2104      	movs	r1, #4
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f8ca 	bl	80027c8 <CODEC_IO_Write>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL,
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2201      	movs	r2, #1
 8002644:	2122      	movs	r1, #34	; 0x22
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8be 	bl	80027c8 <CODEC_IO_Write>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
				0x01);
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL,
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2201      	movs	r2, #1
 800265c:	2123      	movs	r1, #35	; 0x23
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f8b2 	bl	80027c8 <CODEC_IO_Write>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e025      	b.n	80026bc <cs43l22_SetMute+0xac>
				0x01);
	} else /* AUDIO_MUTE_OFF Disable the Mute */
	{
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL,
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2200      	movs	r2, #0
 8002676:	2122      	movs	r1, #34	; 0x22
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f8a5 	bl	80027c8 <CODEC_IO_Write>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
				0x00);
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL,
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2200      	movs	r2, #0
 800268e:	2123      	movs	r1, #35	; 0x23
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f899 	bl	80027c8 <CODEC_IO_Write>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
				0x00);
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <cs43l22_SetMute+0xb8>)
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	2104      	movs	r1, #4
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f88b 	bl	80027c8 <CODEC_IO_Write>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
				OutputDev);
	}
	return counter;
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200005fc 	.word	0x200005fc

080026cc <cs43l22_SetOutputMode>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
 *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	460a      	mov	r2, r1
 80026d6:	80fb      	strh	r3, [r7, #6]
 80026d8:	4613      	mov	r3, r2
 80026da:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

	switch (Output) {
 80026e0:	797b      	ldrb	r3, [r7, #5]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d84b      	bhi.n	8002780 <cs43l22_SetOutputMode+0xb4>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <cs43l22_SetOutputMode+0x24>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002721 	.word	0x08002721
 80026f8:	08002741 	.word	0x08002741
 80026fc:	08002761 	.word	0x08002761
	case OUTPUT_DEVICE_SPEAKER:
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	22fa      	movs	r2, #250	; 0xfa
 8002706:	2104      	movs	r1, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f85d 	bl	80027c8 <CODEC_IO_Write>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
		OutputDev = 0xFA;
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <cs43l22_SetOutputMode+0xe0>)
 800271a:	22fa      	movs	r2, #250	; 0xfa
 800271c:	701a      	strb	r2, [r3, #0]
		break;
 800271e:	e03f      	b.n	80027a0 <cs43l22_SetOutputMode+0xd4>

	case OUTPUT_DEVICE_HEADPHONE:
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	22af      	movs	r2, #175	; 0xaf
 8002726:	2104      	movs	r1, #4
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f84d 	bl	80027c8 <CODEC_IO_Write>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
		OutputDev = 0xAF;
 8002738:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <cs43l22_SetOutputMode+0xe0>)
 800273a:	22af      	movs	r2, #175	; 0xaf
 800273c:	701a      	strb	r2, [r3, #0]
		break;
 800273e:	e02f      	b.n	80027a0 <cs43l22_SetOutputMode+0xd4>

	case OUTPUT_DEVICE_BOTH:
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	22aa      	movs	r2, #170	; 0xaa
 8002746:	2104      	movs	r1, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f83d 	bl	80027c8 <CODEC_IO_Write>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4413      	add	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
		OutputDev = 0xAA;
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <cs43l22_SetOutputMode+0xe0>)
 800275a:	22aa      	movs	r2, #170	; 0xaa
 800275c:	701a      	strb	r2, [r3, #0]
		break;
 800275e:	e01f      	b.n	80027a0 <cs43l22_SetOutputMode+0xd4>

	case OUTPUT_DEVICE_AUTO:
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2205      	movs	r2, #5
 8002766:	2104      	movs	r1, #4
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f82d 	bl	80027c8 <CODEC_IO_Write>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
		OutputDev = 0x05;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <cs43l22_SetOutputMode+0xe0>)
 800277a:	2205      	movs	r2, #5
 800277c:	701a      	strb	r2, [r3, #0]
		break;
 800277e:	e00f      	b.n	80027a0 <cs43l22_SetOutputMode+0xd4>

	default:
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2205      	movs	r2, #5
 8002786:	2104      	movs	r1, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f81d 	bl	80027c8 <CODEC_IO_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
		OutputDev = 0x05;
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <cs43l22_SetOutputMode+0xe0>)
 800279a:	2205      	movs	r2, #5
 800279c:	701a      	strb	r2, [r3, #0]
		break;
 800279e:	bf00      	nop
	}
	return counter;
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200005fc 	.word	0x200005fc

080027b0 <cs43l22_Reset>:
/**
 * @brief Resets cs43l22 registers.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
	return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address 
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
 80027d2:	460b      	mov	r3, r1
 80027d4:	71bb      	strb	r3, [r7, #6]
 80027d6:	4613      	mov	r3, r2
 80027d8:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]

	AUDIO_IO_Write(Addr, Reg, Value);
 80027de:	797a      	ldrb	r2, [r7, #5]
 80027e0:	79b9      	ldrb	r1, [r7, #6]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fe44 	bl	8001472 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

	return result;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN11SynthesizerC1Ev>:
	Synthesizer() {
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
		initializeSineTable();
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f806 	bl	8002810 <_ZN11Synthesizer19initializeSineTableEv>
	}
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <_ZN11Synthesizer19initializeSineTableEv>:
	int16_t sineTable[tableSize];
	int32_t sample;
	int8_t i;
	uint16_t scaledPhase;

	void initializeSineTable() {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
		for (size_t i = 0; i < tableSize; ++i) {
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e030      	b.n	8002880 <_ZN11Synthesizer19initializeSineTableEv+0x70>
			sineTable[i] = std::sin(2 * M_PI * i / tableSize) * 32767;
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7fd fe14 	bl	800044c <__aeabi_ui2d>
 8002824:	a31c      	add	r3, pc, #112	; (adr r3, 8002898 <_ZN11Synthesizer19initializeSineTableEv+0x88>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fd fe89 	bl	8000540 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	a31a      	add	r3, pc, #104	; (adr r3, 80028a0 <_ZN11Synthesizer19initializeSineTableEv+0x90>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fd ffaa 	bl	8000794 <__aeabi_ddiv>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	ec43 2b17 	vmov	d7, r2, r3
 8002848:	eeb0 0a47 	vmov.f32	s0, s14
 800284c:	eef0 0a67 	vmov.f32	s1, s15
 8002850:	f005 fa22 	bl	8007c98 <sin>
 8002854:	ec51 0b10 	vmov	r0, r1, d0
 8002858:	a313      	add	r3, pc, #76	; (adr r3, 80028a8 <_ZN11Synthesizer19initializeSineTableEv+0x98>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fe6f 	bl	8000540 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f903 	bl	8000a74 <__aeabi_d2iz>
 800286e:	4603      	mov	r3, r0
 8002870:	b219      	sxth	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (size_t i = 0; i < tableSize; ++i) {
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002886:	d9ca      	bls.n	800281e <_ZN11Synthesizer19initializeSineTableEv+0xe>
		}
	}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
 8002898:	54442d18 	.word	0x54442d18
 800289c:	401921fb 	.word	0x401921fb
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40d00040 	.word	0x40d00040
 80028a8:	00000000 	.word	0x00000000
 80028ac:	40dfffc0 	.word	0x40dfffc0

080028b0 <_ZN10OscillatorC1ER11SynthesizerRA_Kbhh>:
	Oscillator(Synthesizer &synth, const bool (&noteStatesRef)[], uint8_t waveformControl,
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	70fb      	strb	r3, [r7, #3]
			synth(synth), noteStatesRef(&noteStatesRef), currentWaveform(static_cast<Waveform>(waveformControl >> 6)), harmonics(
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	721a      	strb	r2, [r3, #8]
					1 + (numHarmonics >> 5)) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	330a      	adds	r3, #10
 80028d8:	2220      	movs	r2, #32
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 fa1b 	bl	8008d18 <memset>
 80028e2:	7e3b      	ldrb	r3, [r7, #24]
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
			synth(synth), noteStatesRef(&noteStatesRef), currentWaveform(static_cast<Waveform>(waveformControl >> 6)), harmonics(
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_ZN10Oscillator17determineWaveformEh>:

	void determineWaveform(uint8_t waveformControl) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
		currentWaveform = static_cast<Waveform>(waveformControl >> 6);
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	b2da      	uxtb	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	721a      	strb	r2, [r3, #8]
	}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN10Oscillator12setHarmonicsEh>:

	void setHarmonics(uint8_t numHarmonics) {
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
		harmonics = 1 + (numHarmonics >> 5);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_ZN13LowPassFilterC1Eh>:
	LowPassFilter(uint8_t cutoffFrequency) :
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
			cutoffFrequency(cutoffFrequency > 10 ? cutoffFrequency : 10), previousOutput(
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	2b0a      	cmp	r3, #10
 8002956:	bf38      	it	cc
 8002958:	230a      	movcc	r3, #10
 800295a:	b2da      	uxtb	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	805a      	strh	r2, [r3, #2]
	}
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_ZN13LowPassFilter6updateEh>:

	void update(uint8_t newCutoffFrequency) {
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
		if (newCutoffFrequency > 10) {
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d903      	bls.n	800298e <_ZN13LowPassFilter6updateEh+0x1a>
			cutoffFrequency = newCutoffFrequency;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	701a      	strb	r2, [r3, #0]
		} else {
			cutoffFrequency = 10;
		}
	}
 800298c:	e002      	b.n	8002994 <_ZN13LowPassFilter6updateEh+0x20>
			cutoffFrequency = 10;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	220a      	movs	r2, #10
 8002992:	701a      	strb	r2, [r3, #0]
	}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN12ADSREnvelopeC1ERA_KbRKhS4_S4_S4_>:
	ADSREnvelope(const bool (&noteStatesRef)[], const uint8_t &attackRef,
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
					sustainRef), release(releaseRef) {
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	240f      	movs	r4, #15
 80029b2:	461d      	mov	r5, r3
 80029b4:	e004      	b.n	80029c0 <_ZN12ADSREnvelopeC1ERA_KbRKhS4_S4_S4_+0x20>
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 f822 	bl	8002a00 <_ZN12ADSREnvelope9NoteStateC1Ev>
 80029bc:	3508      	adds	r5, #8
 80029be:	3c01      	subs	r4, #1
 80029c0:	2c00      	cmp	r4, #0
 80029c2:	daf8      	bge.n	80029b6 <_ZN12ADSREnvelopeC1ERA_KbRKhS4_S4_S4_+0x16>
			noteStatesRef(&noteStatesRef), attack(attackRef), decay(decayRef), sustain(
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					sustainRef), release(releaseRef) {
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80029f2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	}
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}

08002a00 <_ZN12ADSREnvelope9NoteStateC1Ev>:
	struct NoteState {
		enum State {
			Off, Attack, Decay, Sustain, Release
		} state;
		int32_t currentValue;
		NoteState() :
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
				state(Off), currentValue(0) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
		}
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	0000      	movs	r0, r0
 8002a24:	0000      	movs	r0, r0
	...

08002a28 <_Z12EventLoopCppv>:
ADSREnvelope envelope(digitalInputs, analogInputs[2], analogInputs[3],
		analogInputs[4], analogInputs[5]);
LowPassFilter filter(analogInputs[6]);

// Main C++ event loop to run application
void EventLoopCpp() {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	// Initialize LEDs
	ws2812_init();
 8002a2c:	f000 fdfa 	bl	8003624 <_Z11ws2812_initv>

	// Initialize inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, ADC1_BUFFER_SIZE);
 8002a30:	2208      	movs	r2, #8
 8002a32:	4931      	ldr	r1, [pc, #196]	; (8002af8 <_Z12EventLoopCppv+0xd0>)
 8002a34:	4831      	ldr	r0, [pc, #196]	; (8002afc <_Z12EventLoopCppv+0xd4>)
 8002a36:	f000 ff81 	bl	800393c <HAL_ADC_Start_DMA>
	getInputs();
 8002a3a:	f7fe fd45 	bl	80014c8 <_Z9getInputsv>

	fillAudioBuffer();  // Initially fill the whole buffer
 8002a3e:	f7ff fa51 	bl	8001ee4 <_Z15fillAudioBufferv>
	fillAudioBuffer();  // Fill the second half
 8002a42:	f7ff fa4f 	bl	8001ee4 <_Z15fillAudioBufferv>

	// Initialize audio output
	if (AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE,
			(uint8_t) analogInputs[0] / 2.55,
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <_Z12EventLoopCppv+0xd8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd0e 	bl	800046c <__aeabi_i2d>
 8002a50:	a327      	add	r3, pc, #156	; (adr r3, 8002af0 <_Z12EventLoopCppv+0xc8>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fe9d 	bl	8000794 <__aeabi_ddiv>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
	if (AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE,
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f82f 	bl	8000ac4 <__aeabi_d2uiz>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f647 42d8 	movw	r2, #31960	; 0x7cd8
 8002a6e:	4619      	mov	r1, r3
 8002a70:	2002      	movs	r0, #2
 8002a72:	f7fe fa15 	bl	8000ea0 <AUDIO_OUT_Init>
 8002a76:	4603      	mov	r3, r0
			SAMPLE_RATE) != AUDIO_OK) {
 8002a78:	2b00      	cmp	r3, #0
		// TODO: Error handling //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin_Err, GPIO_PIN_SET);
	}

	// Start audio playback. Note that the size is in bytes, hence the multiplication by 2 (16-bit samples)
	AUDIO_OUT_Play((uint16_t*) &audioBuffer[0],
 8002a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a7e:	4821      	ldr	r0, [pc, #132]	; (8002b04 <_Z12EventLoopCppv+0xdc>)
 8002a80:	f7fe fa58 	bl	8000f34 <AUDIO_OUT_Play>
	AUDIO_BUFFER_SIZE * 2 * sizeof(uint16_t));

	// Main loop
	while (1) {
		// Handle inputs if delay passed
		if (nextInputTime <= time) {
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <_Z12EventLoopCppv+0xe0>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <_Z12EventLoopCppv+0xe4>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a98:	d8f4      	bhi.n	8002a84 <_Z12EventLoopCppv+0x5c>
			getInputs();
 8002a9a:	f7fe fd15 	bl	80014c8 <_Z9getInputsv>
			// Set volume
			AUDIO_OUT_SetVolume((uint8_t) analogInputs[0] / 2.55);
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <_Z12EventLoopCppv+0xd8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fce2 	bl	800046c <__aeabi_i2d>
 8002aa8:	a311      	add	r3, pc, #68	; (adr r3, 8002af0 <_Z12EventLoopCppv+0xc8>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fe71 	bl	8000794 <__aeabi_ddiv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fe f803 	bl	8000ac4 <__aeabi_d2uiz>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fa60 	bl	8000f88 <AUDIO_OUT_SetVolume>

			// Set waveform
			oscillator.determineWaveform(analogInputs[1]);
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <_Z12EventLoopCppv+0xd8>)
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4810      	ldr	r0, [pc, #64]	; (8002b10 <_Z12EventLoopCppv+0xe8>)
 8002ad0:	f7ff ff14 	bl	80028fc <_ZN10Oscillator17determineWaveformEh>

			// Set filter frequency
			filter.update(analogInputs[6]);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <_Z12EventLoopCppv+0xd8>)
 8002ad6:	799b      	ldrb	r3, [r3, #6]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <_Z12EventLoopCppv+0xec>)
 8002adc:	f7ff ff4a 	bl	8002974 <_ZN13LowPassFilter6updateEh>

			// Set harmonics
			oscillator.setHarmonics(analogInputs[7]);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <_Z12EventLoopCppv+0xd8>)
 8002ae2:	79db      	ldrb	r3, [r3, #7]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480a      	ldr	r0, [pc, #40]	; (8002b10 <_Z12EventLoopCppv+0xe8>)
 8002ae8:	f7ff ff19 	bl	800291e <_ZN10Oscillator12setHarmonicsEh>
		if (nextInputTime <= time) {
 8002aec:	e7ca      	b.n	8002a84 <_Z12EventLoopCppv+0x5c>
 8002aee:	bf00      	nop
 8002af0:	66666666 	.word	0x66666666
 8002af4:	40046666 	.word	0x40046666
 8002af8:	200001d8 	.word	0x200001d8
 8002afc:	200086d8 	.word	0x200086d8
 8002b00:	20000004 	.word	0x20000004
 8002b04:	200001f4 	.word	0x200001f4
 8002b08:	200001e0 	.word	0x200001e0
 8002b0c:	200005f8 	.word	0x200005f8
 8002b10:	2000860c 	.word	0x2000860c
 8002b14:	200086d4 	.word	0x200086d4

08002b18 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8002b1c:	f7ff ff84 	bl	8002a28 <_Z12EventLoopCppv>
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d122      	bne.n	8002b7a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d11d      	bne.n	8002b7a <_Z41__static_initialization_and_destruction_0ii+0x56>
Synthesizer synth;
 8002b3e:	4811      	ldr	r0, [pc, #68]	; (8002b84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002b40:	f7ff fe59 	bl	80027f6 <_ZN11SynthesizerC1Ev>
Oscillator oscillator(synth, digitalInputs, analogInputs[1], analogInputs[7]);
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002b46:	785a      	ldrb	r2, [r3, #1]
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002b4a:	79db      	ldrb	r3, [r3, #7]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002b52:	490c      	ldr	r1, [pc, #48]	; (8002b84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002b54:	480e      	ldr	r0, [pc, #56]	; (8002b90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002b56:	f7ff feab 	bl	80028b0 <_ZN10OscillatorC1ER11SynthesizerRA_Kbhh>
		analogInputs[4], analogInputs[5]);
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002b66:	4909      	ldr	r1, [pc, #36]	; (8002b8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002b68:	480e      	ldr	r0, [pc, #56]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002b6a:	f7ff ff19 	bl	80029a0 <_ZN12ADSREnvelopeC1ERA_KbRKhS4_S4_S4_>
LowPassFilter filter(analogInputs[6]);
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	4619      	mov	r1, r3
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002b76:	f7ff fee6 	bl	8002946 <_ZN13LowPassFilterC1Eh>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000600 	.word	0x20000600
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	200001e4 	.word	0x200001e4
 8002b90:	2000860c 	.word	0x2000860c
 8002b94:	20000009 	.word	0x20000009
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	20000007 	.word	0x20000007
 8002ba0:	20000006 	.word	0x20000006
 8002ba4:	2000863c 	.word	0x2000863c
 8002ba8:	200086d4 	.word	0x200086d4

08002bac <_GLOBAL__sub_I_synth>:
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7ff ffb5 	bl	8002b24 <_Z41__static_initialization_and_destruction_0ii>
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc0:	f000 fde2 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc4:	f000 f810 	bl	8002be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc8:	f000 fa00 	bl	8002fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bcc:	f000 f9c0 	bl	8002f50 <MX_DMA_Init>
  MX_I2C1_Init();
 8002bd0:	f000 f92a 	bl	8002e28 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002bd4:	f000 f956 	bl	8002e84 <MX_I2S3_Init>
  MX_SPI2_Init();
 8002bd8:	f000 f982 	bl	8002ee0 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002bdc:	f000 f86e 	bl	8002cbc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	EventLoopC();
 8002be0:	f7ff ff9a 	bl	8002b18 <EventLoopC>
	while (1) {
 8002be4:	e7fe      	b.n	8002be4 <main+0x28>
	...

08002be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b094      	sub	sp, #80	; 0x50
 8002bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	2230      	movs	r2, #48	; 0x30
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 f88e 	bl	8008d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <SystemClock_Config+0xcc>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <SystemClock_Config+0xcc>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <SystemClock_Config+0xcc>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <SystemClock_Config+0xd0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <SystemClock_Config+0xd0>)
 8002c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <SystemClock_Config+0xd0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002c58:	230d      	movs	r3, #13
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c5c:	23a8      	movs	r3, #168	; 0xa8
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c60:	2302      	movs	r3, #2
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c64:	2307      	movs	r3, #7
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c68:	f107 0320 	add.w	r3, r7, #32
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 ffd5 	bl	8006c1c <HAL_RCC_OscConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c78:	f000 fa28 	bl	80030cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c80:	2302      	movs	r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	2105      	movs	r1, #5
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fa36 	bl	800710c <HAL_RCC_ClockConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ca6:	f000 fa11 	bl	80030cc <Error_Handler>
  }
}
 8002caa:	bf00      	nop
 8002cac:	3750      	adds	r7, #80	; 0x50
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000

08002cbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cce:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cd0:	4a53      	ldr	r2, [pc, #332]	; (8002e20 <MX_ADC1_Init+0x164>)
 8002cd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cea:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <MX_ADC1_Init+0x168>)
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8002d0a:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d1e:	483f      	ldr	r0, [pc, #252]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d20:	f000 fdc8 	bl	80038b4 <HAL_ADC_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002d2a:	f000 f9cf 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d36:	2307      	movs	r3, #7
 8002d38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4837      	ldr	r0, [pc, #220]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d40:	f000 ff2a 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002d4a:	f000 f9bf 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d52:	2302      	movs	r3, #2
 8002d54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d56:	463b      	mov	r3, r7
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4830      	ldr	r0, [pc, #192]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d5c:	f000 ff1c 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002d66:	f000 f9b1 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	4619      	mov	r1, r3
 8002d76:	4829      	ldr	r0, [pc, #164]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d78:	f000 ff0e 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8002d82:	f000 f9a3 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d86:	2303      	movs	r3, #3
 8002d88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d8e:	463b      	mov	r3, r7
 8002d90:	4619      	mov	r1, r3
 8002d92:	4822      	ldr	r0, [pc, #136]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002d94:	f000 ff00 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002d9e:	f000 f995 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002da2:	2304      	movs	r3, #4
 8002da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002da6:	2305      	movs	r3, #5
 8002da8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	481b      	ldr	r0, [pc, #108]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002db0:	f000 fef2 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002dba:	f000 f987 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002dbe:	2305      	movs	r3, #5
 8002dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002dcc:	f000 fee4 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002dd6:	f000 f979 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002dda:	2306      	movs	r3, #6
 8002ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002dde:	2307      	movs	r3, #7
 8002de0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de2:	463b      	mov	r3, r7
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002de8:	f000 fed6 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002df2:	f000 f96b 	bl	80030cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002df6:	2307      	movs	r3, #7
 8002df8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_ADC1_Init+0x160>)
 8002e04:	f000 fec8 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8002e0e:	f000 f95d 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200086d8 	.word	0x200086d8
 8002e20:	40012000 	.word	0x40012000
 8002e24:	0f000001 	.word	0x0f000001

08002e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <MX_I2C1_Init+0x54>)
 8002e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <MX_I2C1_Init+0x58>)
 8002e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e66:	f002 f8e1 	bl	800502c <HAL_I2C_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e70:	f000 f92c 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20008780 	.word	0x20008780
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	00061a80 	.word	0x00061a80

08002e84 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <MX_I2S3_Init+0x58>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002eac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002eb0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002ec4:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <MX_I2S3_Init+0x54>)
 8002ec6:	f003 f913 	bl	80060f0 <HAL_I2S_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8002ed0:	f000 f8fc 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200087d4 	.word	0x200087d4
 8002edc:	40003c00 	.word	0x40003c00

08002ee0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <MX_SPI2_Init+0x6c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ef0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002ef4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ef8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f2e:	220a      	movs	r2, #10
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002f34:	f004 fbf8 	bl	8007728 <HAL_SPI_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002f3e:	f000 f8c5 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000887c 	.word	0x2000887c
 8002f4c:	40003800 	.word	0x40003800

08002f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_DMA_Init+0x78>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	200f      	movs	r0, #15
 8002f94:	f001 f97b 	bl	800428e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f98:	200f      	movs	r0, #15
 8002f9a:	f001 f994 	bl	80042c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	202f      	movs	r0, #47	; 0x2f
 8002fa4:	f001 f973 	bl	800428e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002fa8:	202f      	movs	r0, #47	; 0x2f
 8002faa:	f001 f98c 	bl	80042c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2038      	movs	r0, #56	; 0x38
 8002fb4:	f001 f96b 	bl	800428e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fb8:	2038      	movs	r0, #56	; 0x38
 8002fba:	f001 f984 	bl	80042c6 <HAL_NVIC_EnableIRQ>

}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
 8002fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <MX_GPIO_Init+0xf4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <MX_GPIO_Init+0xf4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <MX_GPIO_Init+0xf4>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <MX_GPIO_Init+0xf4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800306e:	2307      	movs	r3, #7
 8003070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	4810      	ldr	r0, [pc, #64]	; (80030c4 <MX_GPIO_Init+0xf8>)
 8003082:	f001 fd09 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800308e:	2301      	movs	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <MX_GPIO_Init+0xfc>)
 800309a:	f001 fcfd 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800309e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80030a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_GPIO_Init+0xfc>)
 80030b4:	f001 fcf0 	bl	8004a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030b8:	bf00      	nop
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40021000 	.word	0x40021000

080030cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030d0:	b672      	cpsid	i
}
 80030d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80030d4:	e7fe      	b.n	80030d4 <Error_Handler+0x8>
	...

080030d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_MspInit+0x4c>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_MspInit+0x4c>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_MspInit+0x4c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_MspInit+0x4c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_MspInit+0x4c>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_MspInit+0x4c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003116:	2007      	movs	r0, #7
 8003118:	f001 f8ae 	bl	8004278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2e      	ldr	r2, [pc, #184]	; (8003200 <HAL_ADC_MspInit+0xd8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d155      	bne.n	80031f6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_ADC_MspInit+0xdc>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003182:	23ff      	movs	r3, #255	; 0xff
 8003184:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003186:	2303      	movs	r3, #3
 8003188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	481c      	ldr	r0, [pc, #112]	; (8003208 <HAL_ADC_MspInit+0xe0>)
 8003196:	f001 fc7f 	bl	8004a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <HAL_ADC_MspInit+0xe4>)
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_ADC_MspInit+0xe8>)
 800319e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031da:	480c      	ldr	r0, [pc, #48]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031dc:	f001 f88e 	bl	80042fc <HAL_DMA_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80031e6:	f7ff ff71 	bl	80030cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
 80031f0:	4a06      	ldr	r2, [pc, #24]	; (800320c <HAL_ADC_MspInit+0xe4>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031f6:	bf00      	nop
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40012000 	.word	0x40012000
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	20008720 	.word	0x20008720
 8003210:	40026410 	.word	0x40026410

08003214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_I2C_MspInit+0x84>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12c      	bne.n	8003290 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_I2C_MspInit+0x88>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_I2C_MspInit+0x88>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_I2C_MspInit+0x88>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003252:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003258:	2312      	movs	r3, #18
 800325a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003264:	2304      	movs	r3, #4
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <HAL_I2C_MspInit+0x8c>)
 8003270:	f001 fc12 	bl	8004a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_I2C_MspInit+0x88>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_I2C_MspInit+0x88>)
 800327e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003282:	6413      	str	r3, [r2, #64]	; 0x40
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_I2C_MspInit+0x88>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40005400 	.word	0x40005400
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020400 	.word	0x40020400

080032a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_I2C_MspDeInit+0x38>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10e      	bne.n	80032d4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_I2C_MspDeInit+0x3c>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_I2C_MspDeInit+0x3c>)
 80032bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	4807      	ldr	r0, [pc, #28]	; (80032e4 <HAL_I2C_MspDeInit+0x40>)
 80032c6:	f001 fd83 	bl	8004dd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80032ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <HAL_I2C_MspDeInit+0x40>)
 80032d0:	f001 fd7e 	bl	8004dd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40005400 	.word	0x40005400
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	; 0x38
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_I2S_MspInit+0x168>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f040 8096 	bne.w	8003446 <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800331a:	2301      	movs	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 90;
 800331e:	235a      	movs	r3, #90	; 0x5a
 8003320:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003322:	2302      	movs	r3, #2
 8003324:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4618      	mov	r0, r3
 800332c:	f004 f8ba 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8003336:	f7ff fec9 	bl	80030cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	4b45      	ldr	r3, [pc, #276]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a44      	ldr	r2, [pc, #272]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a36      	ldr	r2, [pc, #216]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_I2S_MspInit+0x16c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800338e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033a0:	2306      	movs	r3, #6
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	482b      	ldr	r0, [pc, #172]	; (8003458 <HAL_I2S_MspInit+0x170>)
 80033ac:	f001 fb74 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033c2:	2306      	movs	r3, #6
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	4823      	ldr	r0, [pc, #140]	; (800345c <HAL_I2S_MspInit+0x174>)
 80033ce:	f001 fb63 	bl	8004a98 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80033d2:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_I2S_MspInit+0x17c>)
 80033d6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033da:	2200      	movs	r2, #0
 80033dc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_I2S_MspInit+0x178>)
 80033fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003400:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_I2S_MspInit+0x178>)
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_I2S_MspInit+0x178>)
 800340c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003410:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_I2S_MspInit+0x178>)
 8003414:	2204      	movs	r2, #4
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_I2S_MspInit+0x178>)
 800341a:	2203      	movs	r2, #3
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_I2S_MspInit+0x178>)
 8003420:	2200      	movs	r2, #0
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_I2S_MspInit+0x178>)
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800342a:	480d      	ldr	r0, [pc, #52]	; (8003460 <HAL_I2S_MspInit+0x178>)
 800342c:	f000 ff66 	bl	80042fc <HAL_DMA_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8003436:	f7ff fe49 	bl	80030cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <HAL_I2S_MspInit+0x178>)
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
 8003440:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_I2S_MspInit+0x178>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	3738      	adds	r7, #56	; 0x38
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40003c00 	.word	0x40003c00
 8003454:	40023800 	.word	0x40023800
 8003458:	40020800 	.word	0x40020800
 800345c:	40020000 	.word	0x40020000
 8003460:	2000881c 	.word	0x2000881c
 8003464:	400260b8 	.word	0x400260b8

08003468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_SPI_MspInit+0xe0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d159      	bne.n	800353e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_SPI_MspInit+0xe4>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a2e      	ldr	r2, [pc, #184]	; (800354c <HAL_SPI_MspInit+0xe4>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_SPI_MspInit+0xe4>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_SPI_MspInit+0xe4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a27      	ldr	r2, [pc, #156]	; (800354c <HAL_SPI_MspInit+0xe4>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_SPI_MspInit+0xe4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80034c2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034d4:	2305      	movs	r3, #5
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <HAL_SPI_MspInit+0xe8>)
 80034e0:	f001 fada 	bl	8004a98 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_SPI_MspInit+0xec>)
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_SPI_MspInit+0xf0>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_SPI_MspInit+0xec>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_SPI_MspInit+0xec>)
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_SPI_MspInit+0xec>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_SPI_MspInit+0xec>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_SPI_MspInit+0xec>)
 8003506:	2200      	movs	r2, #0
 8003508:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_SPI_MspInit+0xec>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_SPI_MspInit+0xec>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_SPI_MspInit+0xec>)
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <HAL_SPI_MspInit+0xec>)
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <HAL_SPI_MspInit+0xec>)
 8003524:	f000 feea 	bl	80042fc <HAL_DMA_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800352e:	f7ff fdcd 	bl	80030cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_SPI_MspInit+0xec>)
 8003536:	649a      	str	r2, [r3, #72]	; 0x48
 8003538:	4a06      	ldr	r2, [pc, #24]	; (8003554 <HAL_SPI_MspInit+0xec>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40003800 	.word	0x40003800
 800354c:	40023800 	.word	0x40023800
 8003550:	40020400 	.word	0x40020400
 8003554:	200088d4 	.word	0x200088d4
 8003558:	40026070 	.word	0x40026070

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003560:	e7fe      	b.n	8003560 <NMI_Handler+0x4>

08003562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <HardFault_Handler+0x4>

08003568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <MemManage_Handler+0x4>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <BusFault_Handler+0x4>

08003574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <UsageFault_Handler+0x4>

0800357a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f940 	bl	800382c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <DMA1_Stream4_IRQHandler+0x1c>)
 80035b6:	f001 f805 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */
	HAL_SPI_Transmit_DMA(&WS2812_SPI_HANDLE, ws2812_buffer, WS2812_BUFFER_SIZE);
 80035ba:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <DMA1_Stream4_IRQHandler+0x20>)
 80035c0:	4804      	ldr	r0, [pc, #16]	; (80035d4 <DMA1_Stream4_IRQHandler+0x24>)
 80035c2:	f004 f93b 	bl	800783c <HAL_SPI_Transmit_DMA>
  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200088d4 	.word	0x200088d4
 80035d0:	20008934 	.word	0x20008934
 80035d4:	2000887c 	.word	0x2000887c

080035d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA1_Stream7_IRQHandler+0x10>)
 80035de:	f000 fff1 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000881c 	.word	0x2000881c

080035ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <DMA2_Stream0_IRQHandler+0x10>)
 80035f2:	f000 ffe7 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20008720 	.word	0x20008720

08003600 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <SystemInit+0x20>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <SystemInit+0x20>)
 800360c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <_Z11ws2812_initv>:
#include "main.h"
#include "ws2812-spi.hpp"

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

void ws2812_init(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	memset(ws2812_buffer, 0x80, WS2812_BUFFER_SIZE - WS2812_RESET_PULSE);
 8003628:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	4808      	ldr	r0, [pc, #32]	; (8003650 <_Z11ws2812_initv+0x2c>)
 8003630:	f005 fb72 	bl	8008d18 <memset>
	memset(ws2812_buffer, 0, WS2812_RESET_PULSE);
 8003634:	223c      	movs	r2, #60	; 0x3c
 8003636:	2100      	movs	r1, #0
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <_Z11ws2812_initv+0x2c>)
 800363a:	f005 fb6d 	bl	8008d18 <memset>
	HAL_SPI_Transmit_DMA(&WS2812_SPI_HANDLE, ws2812_buffer, WS2812_BUFFER_SIZE);
 800363e:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8003642:	4903      	ldr	r1, [pc, #12]	; (8003650 <_Z11ws2812_initv+0x2c>)
 8003644:	4803      	ldr	r0, [pc, #12]	; (8003654 <_Z11ws2812_initv+0x30>)
 8003646:	f004 f8f9 	bl	800783c <HAL_SPI_Transmit_DMA>
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20008934 	.word	0x20008934
 8003654:	2000887c 	.word	0x2000887c

08003658 <_Z12ws2812_pixelthhh>:
        } else { \
            *ptr++ = 0x80; \
        } \
    }

void ws2812_pixel(uint16_t led_no, uint8_t r, uint8_t g, uint8_t b) {
 8003658:	b490      	push	{r4, r7}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	80fb      	strh	r3, [r7, #6]
 800366a:	4603      	mov	r3, r0
 800366c:	717b      	strb	r3, [r7, #5]
 800366e:	460b      	mov	r3, r1
 8003670:	713b      	strb	r3, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	70fb      	strb	r3, [r7, #3]
	uint8_t *ptr = &ws2812_buffer[24 * led_no];
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	461a      	mov	r2, r3
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <_Z12ws2812_pixelthhh+0xd8>)
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
	WS2812_FILL_BUFFER(g);
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	72fb      	strb	r3, [r7, #11]
 800368c:	e013      	b.n	80036b6 <_Z12ws2812_pixelthhh+0x5e>
 800368e:	793a      	ldrb	r2, [r7, #4]
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	4013      	ands	r3, r2
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <_Z12ws2812_pixelthhh+0x4e>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	22fc      	movs	r2, #252	; 0xfc
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e004      	b.n	80036b0 <_Z12ws2812_pixelthhh+0x58>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	72fb      	strb	r3, [r7, #11]
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e8      	bne.n	800368e <_Z12ws2812_pixelthhh+0x36>
	WS2812_FILL_BUFFER(r);
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	72bb      	strb	r3, [r7, #10]
 80036c0:	e013      	b.n	80036ea <_Z12ws2812_pixelthhh+0x92>
 80036c2:	797a      	ldrb	r2, [r7, #5]
 80036c4:	7abb      	ldrb	r3, [r7, #10]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <_Z12ws2812_pixelthhh+0x82>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	60fa      	str	r2, [r7, #12]
 80036d4:	22fc      	movs	r2, #252	; 0xfc
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e004      	b.n	80036e4 <_Z12ws2812_pixelthhh+0x8c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	60fa      	str	r2, [r7, #12]
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	7abb      	ldrb	r3, [r7, #10]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	72bb      	strb	r3, [r7, #10]
 80036ea:	7abb      	ldrb	r3, [r7, #10]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e8      	bne.n	80036c2 <_Z12ws2812_pixelthhh+0x6a>
	WS2812_FILL_BUFFER(b);
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	727b      	strb	r3, [r7, #9]
 80036f4:	e013      	b.n	800371e <_Z12ws2812_pixelthhh+0xc6>
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	7a7b      	ldrb	r3, [r7, #9]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <_Z12ws2812_pixelthhh+0xb6>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	22fc      	movs	r2, #252	; 0xfc
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e004      	b.n	8003718 <_Z12ws2812_pixelthhh+0xc0>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	60fa      	str	r2, [r7, #12]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	7a7b      	ldrb	r3, [r7, #9]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	727b      	strb	r3, [r7, #9]
 800371e:	7a7b      	ldrb	r3, [r7, #9]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e8      	bne.n	80036f6 <_Z12ws2812_pixelthhh+0x9e>
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bc90      	pop	{r4, r7}
 800372e:	4770      	bx	lr
 8003730:	20008934 	.word	0x20008934

08003734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800376c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003738:	f7ff ff62 	bl	8003600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800373c:	480c      	ldr	r0, [pc, #48]	; (8003770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800373e:	490d      	ldr	r1, [pc, #52]	; (8003774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003740:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003744:	e002      	b.n	800374c <LoopCopyDataInit>

08003746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374a:	3304      	adds	r3, #4

0800374c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800374c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003750:	d3f9      	bcc.n	8003746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003754:	4c0a      	ldr	r4, [pc, #40]	; (8003780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003758:	e001      	b.n	800375e <LoopFillZerobss>

0800375a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800375c:	3204      	adds	r2, #4

0800375e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003760:	d3fb      	bcc.n	800375a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003762:	f005 fae1 	bl	8008d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003766:	f7ff fa29 	bl	8002bbc <main>
  bx  lr    
 800376a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800376c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003774:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8003778:	08008fb4 	.word	0x08008fb4
  ldr r2, =_sbss
 800377c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8003780:	20008af4 	.word	0x20008af4

08003784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 fd61 	bl	8004278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f000 f808 	bl	80037cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037bc:	f7ff fc8c 	bl	80030d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_InitTick+0x54>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_InitTick+0x58>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd79 	bl	80042e2 <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00e      	b.n	8003818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d80a      	bhi.n	8003816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f000 fd41 	bl	800428e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <HAL_InitTick+0x5c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	200000b0 	.word	0x200000b0
 8003824:	200000b8 	.word	0x200000b8
 8003828:	200000b4 	.word	0x200000b4

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	200000b8 	.word	0x200000b8
 8003850:	20008af0 	.word	0x20008af0

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20008af0 	.word	0x20008af0

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200000b8 	.word	0x200000b8

080038b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e033      	b.n	8003932 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fc28 	bl	8003128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	f043 0202 	orr.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa68 	bl	8003ddc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
 8003922:	e001      	b.n	8003928 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_ADC_Start_DMA+0x1e>
 8003956:	2302      	movs	r3, #2
 8003958:	e0e9      	b.n	8003b2e <HAL_ADC_Start_DMA+0x1f2>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d018      	beq.n	80039a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003980:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_ADC_Start_DMA+0x1fc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6d      	ldr	r2, [pc, #436]	; (8003b3c <HAL_ADC_Start_DMA+0x200>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9a      	lsrs	r2, r3, #18
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003994:	e002      	b.n	800399c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	3b01      	subs	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f9      	bne.n	8003996 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d107      	bne.n	80039c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 80a1 	bne.w	8003b14 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d106      	bne.n	8003a20 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f023 0206 	bic.w	r2, r3, #6
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_ADC_Start_DMA+0x204>)
 8003a30:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4a43      	ldr	r2, [pc, #268]	; (8003b44 <HAL_ADC_Start_DMA+0x208>)
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_ADC_Start_DMA+0x20c>)
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	4a41      	ldr	r2, [pc, #260]	; (8003b4c <HAL_ADC_Start_DMA+0x210>)
 8003a48:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a62:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a72:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	334c      	adds	r3, #76	; 0x4c
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f000 fd46 	bl	8004514 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d12a      	bne.n	8003aea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_ADC_Start_DMA+0x214>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d015      	beq.n	8003aca <HAL_ADC_Start_DMA+0x18e>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <HAL_ADC_Start_DMA+0x218>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d105      	bne.n	8003ab4 <HAL_ADC_Start_DMA+0x178>
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_ADC_Start_DMA+0x204>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_ADC_Start_DMA+0x21c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d136      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_ADC_Start_DMA+0x204>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d130      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d129      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	e020      	b.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_ADC_Start_DMA+0x214>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d11b      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	e00b      	b.n	8003b2c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200000b0 	.word	0x200000b0
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	40012300 	.word	0x40012300
 8003b44:	08003fd5 	.word	0x08003fd5
 8003b48:	0800408f 	.word	0x0800408f
 8003b4c:	080040ab 	.word	0x080040ab
 8003b50:	40012000 	.word	0x40012000
 8003b54:	40012100 	.word	0x40012100
 8003b58:	40012200 	.word	0x40012200

08003b5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x1c>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e105      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x228>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	d925      	bls.n	8003c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b1e      	subs	r3, #30
 8003bda:	2207      	movs	r2, #7
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43da      	mvns	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	400a      	ands	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68d9      	ldr	r1, [r3, #12]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4403      	add	r3, r0
 8003c02:	3b1e      	subs	r3, #30
 8003c04:	409a      	lsls	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	e022      	b.n	8003c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	2207      	movs	r2, #7
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	400a      	ands	r2, r1
 8003c32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6919      	ldr	r1, [r3, #16]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4403      	add	r3, r0
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d824      	bhi.n	8003ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3b05      	subs	r3, #5
 8003c70:	221f      	movs	r2, #31
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43da      	mvns	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	3b05      	subs	r3, #5
 8003c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ca6:	e04c      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d824      	bhi.n	8003cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b23      	subs	r3, #35	; 0x23
 8003cc2:	221f      	movs	r2, #31
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	400a      	ands	r2, r1
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	3b23      	subs	r3, #35	; 0x23
 8003cec:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf8:	e023      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	3b41      	subs	r3, #65	; 0x41
 8003d0c:	221f      	movs	r2, #31
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	400a      	ands	r2, r1
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4618      	mov	r0, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	3b41      	subs	r3, #65	; 0x41
 8003d36:	fa00 f203 	lsl.w	r2, r0, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_ADC_ConfigChannel+0x234>)
 8003d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <HAL_ADC_ConfigChannel+0x238>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1cc>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b12      	cmp	r3, #18
 8003d56:	d105      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_ADC_ConfigChannel+0x238>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d123      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x21e>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d003      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0x1e6>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b11      	cmp	r3, #17
 8003d7c:	d11b      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d111      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_ADC_ConfigChannel+0x23c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <HAL_ADC_ConfigChannel+0x240>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	0c9a      	lsrs	r2, r3, #18
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003da8:	e002      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f9      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40012300 	.word	0x40012300
 8003dd0:	40012000 	.word	0x40012000
 8003dd4:	200000b0 	.word	0x200000b0
 8003dd8:	431bde83 	.word	0x431bde83

08003ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003de4:	4b79      	ldr	r3, [pc, #484]	; (8003fcc <ADC_Init+0x1f0>)
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <ADC_Init+0x1f4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e00f      	b.n	8003eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0202 	bic.w	r2, r2, #2
 8003ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	005a      	lsls	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	3b01      	subs	r3, #1
 8003f34:	035a      	lsls	r2, r3, #13
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	e007      	b.n	8003f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	051a      	lsls	r2, r3, #20
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f92:	025a      	lsls	r2, r3, #9
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	029a      	lsls	r2, r3, #10
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012300 	.word	0x40012300
 8003fd0:	0f000001 	.word	0x0f000001

08003fd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d13c      	bne.n	8004068 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d12b      	bne.n	8004060 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800400c:	2b00      	cmp	r3, #0
 800400e:	d127      	bne.n	8004060 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004028:	2b00      	cmp	r3, #0
 800402a:	d119      	bne.n	8004060 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0220 	bic.w	r2, r2, #32
 800403a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fd7b 	bl	8003b5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004066:	e00e      	b.n	8004086 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff fd85 	bl	8003b84 <HAL_ADC_ErrorCallback>
}
 800407a:	e004      	b.n	8004086 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fd67 	bl	8003b70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fd5a 	bl	8003b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <__NVIC_SetPriorityGrouping+0x44>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040f4:	4013      	ands	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <__NVIC_SetPriorityGrouping+0x44>)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	60d3      	str	r3, [r2, #12]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <__NVIC_GetPriorityGrouping+0x18>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 0307 	and.w	r3, r3, #7
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	2b00      	cmp	r3, #0
 800414c:	db0b      	blt.n	8004166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f003 021f 	and.w	r2, r3, #31
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <__NVIC_EnableIRQ+0x38>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2001      	movs	r0, #1
 800415e:	fa00 f202 	lsl.w	r2, r0, r2
 8004162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000e100 	.word	0xe000e100

08004178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db0a      	blt.n	80041a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	490c      	ldr	r1, [pc, #48]	; (80041c4 <__NVIC_SetPriority+0x4c>)
 8004192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	440b      	add	r3, r1
 800419c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041a0:	e00a      	b.n	80041b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4908      	ldr	r1, [pc, #32]	; (80041c8 <__NVIC_SetPriority+0x50>)
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	3b04      	subs	r3, #4
 80041b0:	0112      	lsls	r2, r2, #4
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	440b      	add	r3, r1
 80041b6:	761a      	strb	r2, [r3, #24]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e100 	.word	0xe000e100
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f1c3 0307 	rsb	r3, r3, #7
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	bf28      	it	cs
 80041ea:	2304      	movcs	r3, #4
 80041ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d902      	bls.n	80041fc <NVIC_EncodePriority+0x30>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3b03      	subs	r3, #3
 80041fa:	e000      	b.n	80041fe <NVIC_EncodePriority+0x32>
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	f04f 32ff 	mov.w	r2, #4294967295
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	401a      	ands	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004214:	f04f 31ff 	mov.w	r1, #4294967295
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	43d9      	mvns	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	4313      	orrs	r3, r2
         );
}
 8004226:	4618      	mov	r0, r3
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004244:	d301      	bcc.n	800424a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004246:	2301      	movs	r3, #1
 8004248:	e00f      	b.n	800426a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <SysTick_Config+0x40>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004252:	210f      	movs	r1, #15
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	f7ff ff8e 	bl	8004178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <SysTick_Config+0x40>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <SysTick_Config+0x40>)
 8004264:	2207      	movs	r2, #7
 8004266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000e010 	.word	0xe000e010

08004278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff29 	bl	80040d8 <__NVIC_SetPriorityGrouping>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	4603      	mov	r3, r0
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042a0:	f7ff ff3e 	bl	8004120 <__NVIC_GetPriorityGrouping>
 80042a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	6978      	ldr	r0, [r7, #20]
 80042ac:	f7ff ff8e 	bl	80041cc <NVIC_EncodePriority>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff5d 	bl	8004178 <__NVIC_SetPriority>
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	4603      	mov	r3, r0
 80042ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff31 	bl	800413c <__NVIC_EnableIRQ>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ffa2 	bl	8004234 <SysTick_Config>
 80042f0:	4603      	mov	r3, r0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff faa4 	bl	8003854 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e099      	b.n	800444c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004338:	e00f      	b.n	800435a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800433a:	f7ff fa8b 	bl	8003854 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b05      	cmp	r3, #5
 8004346:	d908      	bls.n	800435a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2203      	movs	r2, #3
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e078      	b.n	800444c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e8      	bne.n	800433a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_DMA_Init+0x158>)
 8004374:	4013      	ands	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d117      	bne.n	800441e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 facd 	bl	80049a0 <DMA_CheckFifoParam>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800441a:	2301      	movs	r3, #1
 800441c:	e016      	b.n	800444c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa84 	bl	8004934 <DMA_CalcBaseAndBitshift>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	f010803f 	.word	0xf010803f

08004458 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e050      	b.n	800450c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d101      	bne.n	800447a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
 8004478:	e048      	b.n	800450c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa3a 	bl	8004934 <DMA_CalcBaseAndBitshift>
 80044c0:	4603      	mov	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	223f      	movs	r2, #63	; 0x3f
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_DMA_Start_IT+0x26>
 8004536:	2302      	movs	r3, #2
 8004538:	e040      	b.n	80045bc <HAL_DMA_Start_IT+0xa8>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d12f      	bne.n	80045ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f9b8 	bl	80048d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	223f      	movs	r2, #63	; 0x3f
 800456e:	409a      	lsls	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0216 	orr.w	r2, r2, #22
 8004582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0208 	orr.w	r2, r2, #8
 800459a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e005      	b.n	80045ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045d0:	4b8e      	ldr	r3, [pc, #568]	; (800480c <HAL_DMA_IRQHandler+0x248>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a8e      	ldr	r2, [pc, #568]	; (8004810 <HAL_DMA_IRQHandler+0x24c>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	2208      	movs	r2, #8
 80045f0:	409a      	lsls	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01a      	beq.n	8004630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2208      	movs	r2, #8
 800461e:	409a      	lsls	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	2201      	movs	r2, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f043 0202 	orr.w	r2, r3, #2
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2204      	movs	r2, #4
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d012      	beq.n	800469c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2204      	movs	r2, #4
 800468a:	409a      	lsls	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	2210      	movs	r2, #16
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d043      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d03c      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	2210      	movs	r2, #16
 80046c0:	409a      	lsls	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d024      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
 80046f2:	e01f      	b.n	8004734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
 8004704:	e016      	b.n	8004734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0208 	bic.w	r2, r2, #8
 8004722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	2220      	movs	r2, #32
 800473a:	409a      	lsls	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 808f 	beq.w	8004864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8087 	beq.w	8004864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	2220      	movs	r2, #32
 800475c:	409a      	lsls	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b05      	cmp	r3, #5
 800476c:	d136      	bne.n	80047dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0216 	bic.w	r2, r2, #22
 800477c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800478c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <HAL_DMA_IRQHandler+0x1da>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0208 	bic.w	r2, r2, #8
 80047ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	223f      	movs	r2, #63	; 0x3f
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d07e      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
        }
        return;
 80047da:	e079      	b.n	80048d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01d      	beq.n	8004826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
 8004808:	e02c      	b.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
 800480a:	bf00      	nop
 800480c:	200000b0 	.word	0x200000b0
 8004810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d023      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	e01e      	b.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0210 	bic.w	r2, r2, #16
 8004842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	2b00      	cmp	r3, #0
 800486a:	d032      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d022      	beq.n	80048be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2205      	movs	r2, #5
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3301      	adds	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d307      	bcc.n	80048ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f2      	bne.n	8004890 <HAL_DMA_IRQHandler+0x2cc>
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
 80048ce:	e000      	b.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048d0:	bf00      	nop
    }
  }
}
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d108      	bne.n	8004918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004916:	e007      	b.n	8004928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b10      	subs	r3, #16
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <DMA_CalcBaseAndBitshift+0x64>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <DMA_CalcBaseAndBitshift+0x68>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d909      	bls.n	8004976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	659a      	str	r2, [r3, #88]	; 0x58
 8004974:	e007      	b.n	8004986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	aaaaaaab 	.word	0xaaaaaaab
 800499c:	08008dc0 	.word	0x08008dc0

080049a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11f      	bne.n	80049fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d856      	bhi.n	8004a6e <DMA_CheckFifoParam+0xce>
 80049c0:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <DMA_CheckFifoParam+0x28>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049eb 	.word	0x080049eb
 80049d0:	080049d9 	.word	0x080049d9
 80049d4:	08004a6f 	.word	0x08004a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d046      	beq.n	8004a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e8:	e043      	b.n	8004a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049f2:	d140      	bne.n	8004a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f8:	e03d      	b.n	8004a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	d121      	bne.n	8004a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d837      	bhi.n	8004a7a <DMA_CheckFifoParam+0xda>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <DMA_CheckFifoParam+0x70>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a27 	.word	0x08004a27
 8004a18:	08004a21 	.word	0x08004a21
 8004a1c:	08004a39 	.word	0x08004a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e030      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d025      	beq.n	8004a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a36:	e022      	b.n	8004a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a40:	d11f      	bne.n	8004a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a46:	e01c      	b.n	8004a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d903      	bls.n	8004a56 <DMA_CheckFifoParam+0xb6>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d003      	beq.n	8004a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a54:	e018      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5a:	e015      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e00b      	b.n	8004a86 <DMA_CheckFifoParam+0xe6>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e00a      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
 8004a74:	e008      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a76:	bf00      	nop
 8004a78:	e006      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a86:	bf00      	nop
    }
  } 
  
  return status; 
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e16b      	b.n	8004d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f040 815a 	bne.w	8004d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d005      	beq.n	8004aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d130      	bne.n	8004b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2203      	movs	r2, #3
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b20:	2201      	movs	r2, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 0201 	and.w	r2, r3, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d017      	beq.n	8004b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2203      	movs	r2, #3
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d123      	bne.n	8004bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	08da      	lsrs	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3208      	adds	r2, #8
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	220f      	movs	r2, #15
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	08da      	lsrs	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3208      	adds	r2, #8
 8004bd6:	69b9      	ldr	r1, [r7, #24]
 8004bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0203 	and.w	r2, r3, #3
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80b4 	beq.w	8004d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a5f      	ldr	r2, [pc, #380]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3a:	4a5b      	ldr	r2, [pc, #364]	; (8004da8 <HAL_GPIO_Init+0x310>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_GPIO_Init+0x314>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02b      	beq.n	8004cbe <HAL_GPIO_Init+0x226>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_GPIO_Init+0x318>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d025      	beq.n	8004cba <HAL_GPIO_Init+0x222>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_GPIO_Init+0x31c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <HAL_GPIO_Init+0x21e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4f      	ldr	r2, [pc, #316]	; (8004db8 <HAL_GPIO_Init+0x320>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d019      	beq.n	8004cb2 <HAL_GPIO_Init+0x21a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4e      	ldr	r2, [pc, #312]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_GPIO_Init+0x216>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4d      	ldr	r2, [pc, #308]	; (8004dc0 <HAL_GPIO_Init+0x328>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <HAL_GPIO_Init+0x212>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4c      	ldr	r2, [pc, #304]	; (8004dc4 <HAL_GPIO_Init+0x32c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <HAL_GPIO_Init+0x20e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a4b      	ldr	r2, [pc, #300]	; (8004dc8 <HAL_GPIO_Init+0x330>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_GPIO_Init+0x20a>
 8004c9e:	2307      	movs	r3, #7
 8004ca0:	e00e      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	e00c      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	e00a      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004caa:	2305      	movs	r3, #5
 8004cac:	e008      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e006      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e004      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e002      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	f002 0203 	and.w	r2, r2, #3
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cd0:	4935      	ldr	r1, [pc, #212]	; (8004da8 <HAL_GPIO_Init+0x310>)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d02:	4a32      	ldr	r2, [pc, #200]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d08:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d2c:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d80:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	f67f ae90 	bls.w	8004ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3724      	adds	r7, #36	; 0x24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40013800 	.word	0x40013800
 8004dac:	40020000 	.word	0x40020000
 8004db0:	40020400 	.word	0x40020400
 8004db4:	40020800 	.word	0x40020800
 8004db8:	40020c00 	.word	0x40020c00
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40021400 	.word	0x40021400
 8004dc4:	40021800 	.word	0x40021800
 8004dc8:	40021c00 	.word	0x40021c00
 8004dcc:	40013c00 	.word	0x40013c00

08004dd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e0cd      	b.n	8004f88 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dec:	2201      	movs	r2, #1
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	f040 80bd 	bne.w	8004f82 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e08:	4a65      	ldr	r2, [pc, #404]	; (8004fa0 <HAL_GPIO_DeInit+0x1d0>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	3302      	adds	r3, #2
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a5d      	ldr	r2, [pc, #372]	; (8004fa4 <HAL_GPIO_DeInit+0x1d4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <HAL_GPIO_DeInit+0xba>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <HAL_GPIO_DeInit+0x1d8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d025      	beq.n	8004e86 <HAL_GPIO_DeInit+0xb6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a5b      	ldr	r2, [pc, #364]	; (8004fac <HAL_GPIO_DeInit+0x1dc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <HAL_GPIO_DeInit+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a5a      	ldr	r2, [pc, #360]	; (8004fb0 <HAL_GPIO_DeInit+0x1e0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_GPIO_DeInit+0xae>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a59      	ldr	r2, [pc, #356]	; (8004fb4 <HAL_GPIO_DeInit+0x1e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_DeInit+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a58      	ldr	r2, [pc, #352]	; (8004fb8 <HAL_GPIO_DeInit+0x1e8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <HAL_GPIO_DeInit+0xa6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a57      	ldr	r2, [pc, #348]	; (8004fbc <HAL_GPIO_DeInit+0x1ec>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_GPIO_DeInit+0xa2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_GPIO_DeInit+0x1f0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_GPIO_DeInit+0x9e>
 8004e6a:	2307      	movs	r3, #7
 8004e6c:	e00e      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	e00c      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e72:	2306      	movs	r3, #6
 8004e74:	e00a      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e76:	2305      	movs	r3, #5
 8004e78:	e008      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	e006      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e004      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e002      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_GPIO_DeInit+0xbc>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	f002 0203 	and.w	r2, r2, #3
 8004e92:	0092      	lsls	r2, r2, #2
 8004e94:	4093      	lsls	r3, r2
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d132      	bne.n	8004f02 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e9c:	4b49      	ldr	r3, [pc, #292]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	4947      	ldr	r1, [pc, #284]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004eaa:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	4944      	ldr	r1, [pc, #272]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004eb8:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	4940      	ldr	r1, [pc, #256]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	493d      	ldr	r1, [pc, #244]	; (8004fc4 <HAL_GPIO_DeInit+0x1f4>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	220f      	movs	r2, #15
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ee4:	4a2e      	ldr	r2, [pc, #184]	; (8004fa0 <HAL_GPIO_DeInit+0x1d0>)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	3302      	adds	r3, #2
 8004eec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	482a      	ldr	r0, [pc, #168]	; (8004fa0 <HAL_GPIO_DeInit+0x1d0>)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	400a      	ands	r2, r1
 8004efc:	3302      	adds	r3, #2
 8004efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	2103      	movs	r1, #3
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	43db      	mvns	r3, r3
 8004f12:	401a      	ands	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	08da      	lsrs	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3208      	adds	r2, #8
 8004f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	08d2      	lsrs	r2, r2, #3
 8004f38:	4019      	ands	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3208      	adds	r2, #8
 8004f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	2103      	movs	r1, #3
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	401a      	ands	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2103      	movs	r1, #3
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3301      	adds	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	f67f af2e 	bls.w	8004dec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40013800 	.word	0x40013800
 8004fa4:	40020000 	.word	0x40020000
 8004fa8:	40020400 	.word	0x40020400
 8004fac:	40020800 	.word	0x40020800
 8004fb0:	40020c00 	.word	0x40020c00
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40021400 	.word	0x40021400
 8004fbc:	40021800 	.word	0x40021800
 8004fc0:	40021c00 	.word	0x40021c00
 8004fc4:	40013c00 	.word	0x40013c00

08004fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e001      	b.n	8004fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
 8005004:	4613      	mov	r3, r2
 8005006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005008:	787b      	ldrb	r3, [r7, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005014:	e003      	b.n	800501e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005016:	887b      	ldrh	r3, [r7, #2]
 8005018:	041a      	lsls	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	619a      	str	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e12b      	b.n	8005296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe f8de 	bl	8003214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2224      	movs	r2, #36	; 0x24
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800508e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005090:	f002 f9f4 	bl	800747c <HAL_RCC_GetPCLK1Freq>
 8005094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4a81      	ldr	r2, [pc, #516]	; (80052a0 <HAL_I2C_Init+0x274>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d807      	bhi.n	80050b0 <HAL_I2C_Init+0x84>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a80      	ldr	r2, [pc, #512]	; (80052a4 <HAL_I2C_Init+0x278>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bf94      	ite	ls
 80050a8:	2301      	movls	r3, #1
 80050aa:	2300      	movhi	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e006      	b.n	80050be <HAL_I2C_Init+0x92>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a7d      	ldr	r2, [pc, #500]	; (80052a8 <HAL_I2C_Init+0x27c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bf94      	ite	ls
 80050b8:	2301      	movls	r3, #1
 80050ba:	2300      	movhi	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0e7      	b.n	8005296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a78      	ldr	r2, [pc, #480]	; (80052ac <HAL_I2C_Init+0x280>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0c9b      	lsrs	r3, r3, #18
 80050d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_I2C_Init+0x274>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <HAL_I2C_Init+0xd4>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	3301      	adds	r3, #1
 80050fe:	e009      	b.n	8005114 <HAL_I2C_Init+0xe8>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	4a69      	ldr	r2, [pc, #420]	; (80052b0 <HAL_I2C_Init+0x284>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	099b      	lsrs	r3, r3, #6
 8005112:	3301      	adds	r3, #1
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	430b      	orrs	r3, r1
 800511a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	495c      	ldr	r1, [pc, #368]	; (80052a0 <HAL_I2C_Init+0x274>)
 8005130:	428b      	cmp	r3, r1
 8005132:	d819      	bhi.n	8005168 <HAL_I2C_Init+0x13c>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e59      	subs	r1, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005148:	400b      	ands	r3, r1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_I2C_Init+0x138>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1e59      	subs	r1, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	fbb1 f3f3 	udiv	r3, r1, r3
 800515c:	3301      	adds	r3, #1
 800515e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005162:	e051      	b.n	8005208 <HAL_I2C_Init+0x1dc>
 8005164:	2304      	movs	r3, #4
 8005166:	e04f      	b.n	8005208 <HAL_I2C_Init+0x1dc>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d111      	bne.n	8005194 <HAL_I2C_Init+0x168>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	440b      	add	r3, r1
 800517e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005182:	3301      	adds	r3, #1
 8005184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e012      	b.n	80051ba <HAL_I2C_Init+0x18e>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1e58      	subs	r0, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6859      	ldr	r1, [r3, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	0099      	lsls	r1, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051aa:	3301      	adds	r3, #1
 80051ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Init+0x196>
 80051be:	2301      	movs	r3, #1
 80051c0:	e022      	b.n	8005208 <HAL_I2C_Init+0x1dc>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10e      	bne.n	80051e8 <HAL_I2C_Init+0x1bc>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1e58      	subs	r0, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e6:	e00f      	b.n	8005208 <HAL_I2C_Init+0x1dc>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1e58      	subs	r0, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	0099      	lsls	r1, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fe:	3301      	adds	r3, #1
 8005200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	6809      	ldr	r1, [r1, #0]
 800520c:	4313      	orrs	r3, r2
 800520e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6911      	ldr	r1, [r2, #16]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	4311      	orrs	r1, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	000186a0 	.word	0x000186a0
 80052a4:	001e847f 	.word	0x001e847f
 80052a8:	003d08ff 	.word	0x003d08ff
 80052ac:	431bde83 	.word	0x431bde83
 80052b0:	10624dd3 	.word	0x10624dd3

080052b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e021      	b.n	800530a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2224      	movs	r2, #36	; 0x24
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fd ffe0 	bl	80032a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	460b      	mov	r3, r1
 8005328:	813b      	strh	r3, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800532e:	f7fe fa91 	bl	8003854 <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b20      	cmp	r3, #32
 800533e:	f040 80d9 	bne.w	80054f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2319      	movs	r3, #25
 8005348:	2201      	movs	r2, #1
 800534a:	496d      	ldr	r1, [pc, #436]	; (8005500 <HAL_I2C_Mem_Write+0x1ec>)
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fc99 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
 800535a:	e0cc      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_I2C_Mem_Write+0x56>
 8005366:	2302      	movs	r3, #2
 8005368:	e0c5      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d007      	beq.n	8005390 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2221      	movs	r2, #33	; 0x21
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a4d      	ldr	r2, [pc, #308]	; (8005504 <HAL_I2C_Mem_Write+0x1f0>)
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053d2:	88f8      	ldrh	r0, [r7, #6]
 80053d4:	893a      	ldrh	r2, [r7, #8]
 80053d6:	8979      	ldrh	r1, [r7, #10]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	4603      	mov	r3, r0
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fad0 	bl	8005988 <I2C_RequestMemoryWrite>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d052      	beq.n	8005494 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e081      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fd5e 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b04      	cmp	r3, #4
 8005408:	d107      	bne.n	800541a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06b      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b04      	cmp	r3, #4
 800545a:	d11b      	bne.n	8005494 <HAL_I2C_Mem_Write+0x180>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	781a      	ldrb	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1aa      	bne.n	80053f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fd51 	bl	8005f48 <I2C_WaitOnBTFFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d107      	bne.n	80054c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e016      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	00100002 	.word	0x00100002
 8005504:	ffff0000 	.word	0xffff0000

08005508 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	; 0x30
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	817b      	strh	r3, [r7, #10]
 800551a:	460b      	mov	r3, r1
 800551c:	813b      	strh	r3, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005522:	f7fe f997 	bl	8003854 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b20      	cmp	r3, #32
 8005532:	f040 8214 	bne.w	800595e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2319      	movs	r3, #25
 800553c:	2201      	movs	r2, #1
 800553e:	497b      	ldr	r1, [pc, #492]	; (800572c <HAL_I2C_Mem_Read+0x224>)
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fb9f 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
 800554e:	e207      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_I2C_Mem_Read+0x56>
 800555a:	2302      	movs	r3, #2
 800555c:	e200      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d007      	beq.n	8005584 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a5b      	ldr	r2, [pc, #364]	; (8005730 <HAL_I2C_Mem_Read+0x228>)
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c6:	88f8      	ldrh	r0, [r7, #6]
 80055c8:	893a      	ldrh	r2, [r7, #8]
 80055ca:	8979      	ldrh	r1, [r7, #10]
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	4603      	mov	r3, r0
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa6c 	bl	8005ab4 <I2C_RequestMemoryRead>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e1bc      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d113      	bne.n	8005616 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e190      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	2b01      	cmp	r3, #1
 800561c:	d11b      	bne.n	8005656 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e170      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	2b02      	cmp	r3, #2
 800565c:	d11b      	bne.n	8005696 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	e150      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056ac:	e144      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	f200 80f1 	bhi.w	800589a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d123      	bne.n	8005708 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fc87 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e145      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005706:	e117      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	2b02      	cmp	r3, #2
 800570e:	d14e      	bne.n	80057ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	2200      	movs	r2, #0
 8005718:	4906      	ldr	r1, [pc, #24]	; (8005734 <HAL_I2C_Mem_Read+0x22c>)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 fab2 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e11a      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
 800572a:	bf00      	nop
 800572c:	00100002 	.word	0x00100002
 8005730:	ffff0000 	.word	0xffff0000
 8005734:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057ac:	e0c4      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	2200      	movs	r2, #0
 80057b6:	496c      	ldr	r1, [pc, #432]	; (8005968 <HAL_I2C_Mem_Read+0x460>)
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fa63 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0cb      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	2200      	movs	r2, #0
 8005812:	4955      	ldr	r1, [pc, #340]	; (8005968 <HAL_I2C_Mem_Read+0x460>)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa35 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e09d      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005898:	e04e      	b.n	8005938 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fb9a 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e058      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d124      	bne.n	8005938 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d107      	bne.n	8005906 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593c:	2b00      	cmp	r3, #0
 800593e:	f47f aeb6 	bne.w	80056ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e000      	b.n	8005960 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800595e:	2302      	movs	r3, #2
  }
}
 8005960:	4618      	mov	r0, r3
 8005962:	3728      	adds	r7, #40	; 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	00010004 	.word	0x00010004

0800596c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4603      	mov	r3, r0
 8005998:	817b      	strh	r3, [r7, #10]
 800599a:	460b      	mov	r3, r1
 800599c:	813b      	strh	r3, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f960 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d103      	bne.n	80059e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e05f      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <I2C_RequestMemoryWrite+0x128>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f9bb 	bl	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04c      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fa46 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d107      	bne.n	8005a4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02b      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d105      	bne.n	8005a60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e021      	b.n	8005aa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fa20 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e005      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8c2 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d103      	bne.n	8005b1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0aa      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	4952      	ldr	r1, [pc, #328]	; (8005c80 <I2C_RequestMemoryRead+0x1cc>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f91d 	bl	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e097      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f9a8 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d107      	bne.n	8005b86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e076      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	e021      	b.n	8005be0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	6a39      	ldr	r1, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f982 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d107      	bne.n	8005bd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e050      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	6a39      	ldr	r1, [r7, #32]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f967 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d107      	bne.n	8005c08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e035      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f82b 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00d      	beq.n	8005c50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c42:	d103      	bne.n	8005c4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e013      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	6a3a      	ldr	r2, [r7, #32]
 8005c64:	4906      	ldr	r1, [pc, #24]	; (8005c80 <I2C_RequestMemoryRead+0x1cc>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f886 	bl	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	00010002 	.word	0x00010002

08005c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c94:	e048      	b.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d044      	beq.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fd fdd9 	bl	8003854 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d139      	bne.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d10d      	bne.n	8005cda <I2C_WaitOnFlagUntilTimeout+0x56>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	43da      	mvns	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	e00c      	b.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	43da      	mvns	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d116      	bne.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	f043 0220 	orr.w	r2, r3, #32
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e023      	b.n	8005d70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10d      	bne.n	8005d4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	43da      	mvns	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	e00c      	b.n	8005d68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	43da      	mvns	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d093      	beq.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d86:	e071      	b.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d96:	d123      	bne.n	8005de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005db0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e067      	b.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d041      	beq.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7fd fd34 	bl	8003854 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d136      	bne.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10c      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e00b      	b.n	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0220 	orr.w	r2, r3, #32
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e021      	b.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10c      	bne.n	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	43da      	mvns	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	e00b      	b.n	8005ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf14      	ite	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	2300      	moveq	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f af6d 	bne.w	8005d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ec4:	e034      	b.n	8005f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f8e3 	bl	8006092 <I2C_IsAcknowledgeFailed>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e034      	b.n	8005f40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d028      	beq.n	8005f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fd fcb9 	bl	8003854 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11d      	bne.n	8005f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b80      	cmp	r3, #128	; 0x80
 8005f00:	d016      	beq.n	8005f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e007      	b.n	8005f40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	d1c3      	bne.n	8005ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f54:	e034      	b.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f89b 	bl	8006092 <I2C_IsAcknowledgeFailed>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e034      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d028      	beq.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6e:	f7fd fc71 	bl	8003854 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11d      	bne.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d016      	beq.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e007      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d1c3      	bne.n	8005f56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fe4:	e049      	b.n	800607a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d119      	bne.n	8006028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0210 	mvn.w	r2, #16
 8005ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e030      	b.n	800608a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fd fc14 	bl	8003854 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11d      	bne.n	800607a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d016      	beq.n	800607a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e007      	b.n	800608a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d1ae      	bne.n	8005fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d11b      	bne.n	80060e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e128      	b.n	8006354 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a90      	ldr	r2, [pc, #576]	; (800635c <HAL_I2S_Init+0x26c>)
 800611a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fd f8e3 	bl	80032e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006138:	f023 030f 	bic.w	r3, r3, #15
 800613c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2202      	movs	r2, #2
 8006144:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d060      	beq.n	8006210 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006156:	2310      	movs	r3, #16
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e001      	b.n	8006160 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800615c:	2320      	movs	r3, #32
 800615e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b20      	cmp	r3, #32
 8006166:	d802      	bhi.n	800616e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800616e:	2001      	movs	r0, #1
 8006170:	f001 fa7a 	bl	8007668 <HAL_RCCEx_GetPeriphCLKFreq>
 8006174:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617e:	d125      	bne.n	80061cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d010      	beq.n	80061aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	3305      	adds	r3, #5
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e01f      	b.n	80061ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c6:	3305      	adds	r3, #5
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	e00e      	b.n	80061ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	3305      	adds	r3, #5
 80061e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4a5c      	ldr	r2, [pc, #368]	; (8006360 <HAL_I2S_Init+0x270>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	08db      	lsrs	r3, r3, #3
 80061f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e003      	b.n	8006218 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006210:	2302      	movs	r3, #2
 8006212:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d902      	bls.n	8006224 <HAL_I2S_Init+0x134>
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2bff      	cmp	r3, #255	; 0xff
 8006222:	d907      	bls.n	8006234 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f043 0210 	orr.w	r2, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e08f      	b.n	8006354 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	ea42 0103 	orr.w	r1, r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	430a      	orrs	r2, r1
 8006246:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006252:	f023 030f 	bic.w	r3, r3, #15
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6851      	ldr	r1, [r2, #4]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6892      	ldr	r2, [r2, #8]
 800625e:	4311      	orrs	r1, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68d2      	ldr	r2, [r2, #12]
 8006264:	4311      	orrs	r1, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6992      	ldr	r2, [r2, #24]
 800626a:	430a      	orrs	r2, r1
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006276:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d161      	bne.n	8006344 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a38      	ldr	r2, [pc, #224]	; (8006364 <HAL_I2S_Init+0x274>)
 8006284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a37      	ldr	r2, [pc, #220]	; (8006368 <HAL_I2S_Init+0x278>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_I2S_Init+0x1a4>
 8006290:	4b36      	ldr	r3, [pc, #216]	; (800636c <HAL_I2S_Init+0x27c>)
 8006292:	e001      	b.n	8006298 <HAL_I2S_Init+0x1a8>
 8006294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	4932      	ldr	r1, [pc, #200]	; (8006368 <HAL_I2S_Init+0x278>)
 80062a0:	428a      	cmp	r2, r1
 80062a2:	d101      	bne.n	80062a8 <HAL_I2S_Init+0x1b8>
 80062a4:	4a31      	ldr	r2, [pc, #196]	; (800636c <HAL_I2S_Init+0x27c>)
 80062a6:	e001      	b.n	80062ac <HAL_I2S_Init+0x1bc>
 80062a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80062ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062b0:	f023 030f 	bic.w	r3, r3, #15
 80062b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2b      	ldr	r2, [pc, #172]	; (8006368 <HAL_I2S_Init+0x278>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d101      	bne.n	80062c4 <HAL_I2S_Init+0x1d4>
 80062c0:	4b2a      	ldr	r3, [pc, #168]	; (800636c <HAL_I2S_Init+0x27c>)
 80062c2:	e001      	b.n	80062c8 <HAL_I2S_Init+0x1d8>
 80062c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062c8:	2202      	movs	r2, #2
 80062ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a25      	ldr	r2, [pc, #148]	; (8006368 <HAL_I2S_Init+0x278>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_I2S_Init+0x1ea>
 80062d6:	4b25      	ldr	r3, [pc, #148]	; (800636c <HAL_I2S_Init+0x27c>)
 80062d8:	e001      	b.n	80062de <HAL_I2S_Init+0x1ee>
 80062da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ea:	d003      	beq.n	80062f4 <HAL_I2S_Init+0x204>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80062f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062f8:	613b      	str	r3, [r7, #16]
 80062fa:	e001      	b.n	8006300 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800630a:	4313      	orrs	r3, r2
 800630c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006314:	4313      	orrs	r3, r2
 8006316:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800631e:	4313      	orrs	r3, r2
 8006320:	b29a      	uxth	r2, r3
 8006322:	897b      	ldrh	r3, [r7, #10]
 8006324:	4313      	orrs	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800632c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a0d      	ldr	r2, [pc, #52]	; (8006368 <HAL_I2S_Init+0x278>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_I2S_Init+0x24c>
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <HAL_I2S_Init+0x27c>)
 800633a:	e001      	b.n	8006340 <HAL_I2S_Init+0x250>
 800633c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006340:	897a      	ldrh	r2, [r7, #10]
 8006342:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	08006655 	.word	0x08006655
 8006360:	cccccccd 	.word	0xcccccccd
 8006364:	08006769 	.word	0x08006769
 8006368:	40003800 	.word	0x40003800
 800636c:	40003400 	.word	0x40003400

08006370 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_I2S_Transmit_DMA+0x1a>
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e08e      	b.n	80064ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2S_Transmit_DMA+0x2e>
 800639a:	2302      	movs	r3, #2
 800639c:	e086      	b.n	80064ac <HAL_I2S_Transmit_DMA+0x13c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d005      	beq.n	80063be <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
 80063bc:	e076      	b.n	80064ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2203      	movs	r2, #3
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d002      	beq.n	80063ea <HAL_I2S_Transmit_DMA+0x7a>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d10a      	bne.n	8006400 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063fe:	e005      	b.n	800640c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <HAL_I2S_Transmit_DMA+0x144>)
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <HAL_I2S_Transmit_DMA+0x148>)
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	4a26      	ldr	r2, [pc, #152]	; (80064bc <HAL_I2S_Transmit_DMA+0x14c>)
 8006422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800642c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006434:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800643c:	f7fe f86a 	bl	8004514 <HAL_DMA_Start_IT>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e022      	b.n	80064ac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006482:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0202 	orr.w	r2, r2, #2
 80064a0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	08006533 	.word	0x08006533
 80064b8:	080064f1 	.word	0x080064f1
 80064bc:	0800654f 	.word	0x0800654f

080064c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e2:	b2db      	uxtb	r3, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10e      	bne.n	8006524 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0202 	bic.w	r2, r2, #2
 8006514:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7fa fd47 	bl	8000fb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7fa fd4b 	bl	8000fdc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0203 	bic.w	r2, r2, #3
 800656a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	f043 0208 	orr.w	r2, r3, #8
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7fa fe37 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	881a      	ldrh	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10e      	bne.n	80065ee <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fa fce5 	bl	8000fb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	b292      	uxth	r2, r2
 800660a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	1c9a      	adds	r2, r3, #2
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10e      	bne.n	800664c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800663c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff3a 	bl	80064c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b04      	cmp	r3, #4
 800666e:	d13a      	bne.n	80066e6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d109      	bne.n	800668e <I2S_IRQHandler+0x3a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d102      	bne.n	800668e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffb4 	bl	80065f6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d126      	bne.n	80066e6 <I2S_IRQHandler+0x92>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d11f      	bne.n	80066e6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066b4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	f043 0202 	orr.w	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fa fd8d 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d136      	bne.n	8006760 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d109      	bne.n	8006710 <I2S_IRQHandler+0xbc>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d102      	bne.n	8006710 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff ff45 	bl	800659a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b08      	cmp	r3, #8
 8006718:	d122      	bne.n	8006760 <I2S_IRQHandler+0x10c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b20      	cmp	r3, #32
 8006726:	d11b      	bne.n	8006760 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006736:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	f043 0204 	orr.w	r2, r3, #4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fa fd50 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006760:	bf00      	nop
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a92      	ldr	r2, [pc, #584]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006782:	4b92      	ldr	r3, [pc, #584]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006784:	e001      	b.n	800678a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a8b      	ldr	r2, [pc, #556]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d101      	bne.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80067a0:	4b8a      	ldr	r3, [pc, #552]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067a2:	e001      	b.n	80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80067a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d004      	beq.n	80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 8099 	bne.w	80068f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d107      	bne.n	80067da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f925 	bl	8006a24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d107      	bne.n	80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9c8 	bl	8006b84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d13a      	bne.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d035      	beq.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a6e      	ldr	r2, [pc, #440]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006812:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006814:	e001      	b.n	800681a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4969      	ldr	r1, [pc, #420]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006822:	428b      	cmp	r3, r1
 8006824:	d101      	bne.n	800682a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006826:	4b69      	ldr	r3, [pc, #420]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006828:	e001      	b.n	800682e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800682a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006832:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006842:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	f043 0202 	orr.w	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fa fcc6 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b08      	cmp	r3, #8
 800687c:	f040 80c3 	bne.w	8006a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80bd 	beq.w	8006a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800689a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a49      	ldr	r2, [pc, #292]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80068a6:	4b49      	ldr	r3, [pc, #292]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068a8:	e001      	b.n	80068ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80068aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4944      	ldr	r1, [pc, #272]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068b6:	428b      	cmp	r3, r1
 80068b8:	d101      	bne.n	80068be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068ba:	4b44      	ldr	r3, [pc, #272]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068bc:	e001      	b.n	80068c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068c8:	2300      	movs	r3, #0
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]
 80068d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f043 0204 	orr.w	r2, r3, #4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fa fc88 	bl	8001200 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068f0:	e089      	b.n	8006a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d107      	bne.n	800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f8be 	bl	8006a88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d107      	bne.n	8006926 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8fd 	bl	8006b20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d12f      	bne.n	8006990 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d02a      	beq.n	8006990 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006948:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006954:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006956:	e001      	b.n	800695c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4919      	ldr	r1, [pc, #100]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006964:	428b      	cmp	r3, r1
 8006966:	d101      	bne.n	800696c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006968:	4b18      	ldr	r3, [pc, #96]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800696a:	e001      	b.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800696c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006974:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	f043 0202 	orr.w	r2, r3, #2
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fa fc38 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b08      	cmp	r3, #8
 8006998:	d136      	bne.n	8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d031      	beq.n	8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a07      	ldr	r2, [pc, #28]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d101      	bne.n	80069b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069b0:	e001      	b.n	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4902      	ldr	r1, [pc, #8]	; (80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069be:	428b      	cmp	r3, r1
 80069c0:	d106      	bne.n	80069d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80069c2:	4b02      	ldr	r3, [pc, #8]	; (80069cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069c4:	e006      	b.n	80069d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80069c6:	bf00      	nop
 80069c8:	40003800 	.word	0x40003800
 80069cc:	40003400 	.word	0x40003400
 80069d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	f043 0204 	orr.w	r2, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fbfe 	bl	8001200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a04:	e000      	b.n	8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a06:	bf00      	nop
}
 8006a08:	bf00      	nop
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	1c99      	adds	r1, r3, #2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6251      	str	r1, [r2, #36]	; 0x24
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d113      	bne.n	8006a7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ffc9 	bl	8006a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	1c99      	adds	r1, r3, #2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6251      	str	r1, [r2, #36]	; 0x24
 8006a9a:	8819      	ldrh	r1, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <I2SEx_TxISR_I2SExt+0x90>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d101      	bne.n	8006aaa <I2SEx_TxISR_I2SExt+0x22>
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <I2SEx_TxISR_I2SExt+0x94>)
 8006aa8:	e001      	b.n	8006aae <I2SEx_TxISR_I2SExt+0x26>
 8006aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aae:	460a      	mov	r2, r1
 8006ab0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d121      	bne.n	8006b0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <I2SEx_TxISR_I2SExt+0x90>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d101      	bne.n	8006ad8 <I2SEx_TxISR_I2SExt+0x50>
 8006ad4:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <I2SEx_TxISR_I2SExt+0x94>)
 8006ad6:	e001      	b.n	8006adc <I2SEx_TxISR_I2SExt+0x54>
 8006ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	490d      	ldr	r1, [pc, #52]	; (8006b18 <I2SEx_TxISR_I2SExt+0x90>)
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d101      	bne.n	8006aec <I2SEx_TxISR_I2SExt+0x64>
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <I2SEx_TxISR_I2SExt+0x94>)
 8006aea:	e001      	b.n	8006af0 <I2SEx_TxISR_I2SExt+0x68>
 8006aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006af0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006af4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff81 	bl	8006a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40003800 	.word	0x40003800
 8006b1c:	40003400 	.word	0x40003400

08006b20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68d8      	ldr	r0, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	1c99      	adds	r1, r3, #2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b38:	b282      	uxth	r2, r0
 8006b3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d113      	bne.n	8006b7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff4a 	bl	8006a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <I2SEx_RxISR_I2SExt+0x90>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <I2SEx_RxISR_I2SExt+0x16>
 8006b96:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <I2SEx_RxISR_I2SExt+0x94>)
 8006b98:	e001      	b.n	8006b9e <I2SEx_RxISR_I2SExt+0x1a>
 8006b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9e:	68d8      	ldr	r0, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	1c99      	adds	r1, r3, #2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006baa:	b282      	uxth	r2, r0
 8006bac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d121      	bne.n	8006c0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a12      	ldr	r2, [pc, #72]	; (8006c14 <I2SEx_RxISR_I2SExt+0x90>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d101      	bne.n	8006bd4 <I2SEx_RxISR_I2SExt+0x50>
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <I2SEx_RxISR_I2SExt+0x94>)
 8006bd2:	e001      	b.n	8006bd8 <I2SEx_RxISR_I2SExt+0x54>
 8006bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	490d      	ldr	r1, [pc, #52]	; (8006c14 <I2SEx_RxISR_I2SExt+0x90>)
 8006be0:	428b      	cmp	r3, r1
 8006be2:	d101      	bne.n	8006be8 <I2SEx_RxISR_I2SExt+0x64>
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <I2SEx_RxISR_I2SExt+0x94>)
 8006be6:	e001      	b.n	8006bec <I2SEx_RxISR_I2SExt+0x68>
 8006be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d106      	bne.n	8006c0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ff03 	bl	8006a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40003800 	.word	0x40003800
 8006c18:	40003400 	.word	0x40003400

08006c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e267      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d075      	beq.n	8006d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c3a:	4b88      	ldr	r3, [pc, #544]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d00c      	beq.n	8006c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c46:	4b85      	ldr	r3, [pc, #532]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d112      	bne.n	8006c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c52:	4b82      	ldr	r3, [pc, #520]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c5e:	d10b      	bne.n	8006c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c60:	4b7e      	ldr	r3, [pc, #504]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05b      	beq.n	8006d24 <HAL_RCC_OscConfig+0x108>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d157      	bne.n	8006d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e242      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d106      	bne.n	8006c90 <HAL_RCC_OscConfig+0x74>
 8006c82:	4b76      	ldr	r3, [pc, #472]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a75      	ldr	r2, [pc, #468]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e01d      	b.n	8006ccc <HAL_RCC_OscConfig+0xb0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x98>
 8006c9a:	4b70      	ldr	r3, [pc, #448]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a6f      	ldr	r2, [pc, #444]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	4b6d      	ldr	r3, [pc, #436]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a6c      	ldr	r2, [pc, #432]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e00b      	b.n	8006ccc <HAL_RCC_OscConfig+0xb0>
 8006cb4:	4b69      	ldr	r3, [pc, #420]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a68      	ldr	r2, [pc, #416]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b66      	ldr	r3, [pc, #408]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d013      	beq.n	8006cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fc fdbe 	bl	8003854 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cdc:	f7fc fdba 	bl	8003854 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b64      	cmp	r3, #100	; 0x64
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e207      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cee:	4b5b      	ldr	r3, [pc, #364]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0xc0>
 8006cfa:	e014      	b.n	8006d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7fc fdaa 	bl	8003854 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fc fda6 	bl	8003854 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	; 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e1f3      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d16:	4b51      	ldr	r3, [pc, #324]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0xe8>
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d063      	beq.n	8006dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d32:	4b4a      	ldr	r3, [pc, #296]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 030c 	and.w	r3, r3, #12
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d3e:	4b47      	ldr	r3, [pc, #284]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d11c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d4a:	4b44      	ldr	r3, [pc, #272]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d116      	bne.n	8006d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d56:	4b41      	ldr	r3, [pc, #260]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_RCC_OscConfig+0x152>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d001      	beq.n	8006d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e1c7      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6e:	4b3b      	ldr	r3, [pc, #236]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4937      	ldr	r1, [pc, #220]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d82:	e03a      	b.n	8006dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d8c:	4b34      	ldr	r3, [pc, #208]	; (8006e60 <HAL_RCC_OscConfig+0x244>)
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d92:	f7fc fd5f 	bl	8003854 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d9a:	f7fc fd5b 	bl	8003854 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e1a8      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dac:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f0      	beq.n	8006d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db8:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4925      	ldr	r1, [pc, #148]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	600b      	str	r3, [r1, #0]
 8006dcc:	e015      	b.n	8006dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <HAL_RCC_OscConfig+0x244>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fc fd3e 	bl	8003854 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ddc:	f7fc fd3a 	bl	8003854 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e187      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dee:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d036      	beq.n	8006e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e0e:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <HAL_RCC_OscConfig+0x248>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e14:	f7fc fd1e 	bl	8003854 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e1c:	f7fc fd1a 	bl	8003854 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e167      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2e:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCC_OscConfig+0x240>)
 8006e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0x200>
 8006e3a:	e01b      	b.n	8006e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <HAL_RCC_OscConfig+0x248>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e42:	f7fc fd07 	bl	8003854 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e48:	e00e      	b.n	8006e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e4a:	f7fc fd03 	bl	8003854 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d907      	bls.n	8006e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e150      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	42470000 	.word	0x42470000
 8006e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e68:	4b88      	ldr	r3, [pc, #544]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ea      	bne.n	8006e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8097 	beq.w	8006fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e86:	4b81      	ldr	r3, [pc, #516]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	4b7d      	ldr	r3, [pc, #500]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	4a7c      	ldr	r2, [pc, #496]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea2:	4b7a      	ldr	r3, [pc, #488]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	60bb      	str	r3, [r7, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb2:	4b77      	ldr	r3, [pc, #476]	; (8007090 <HAL_RCC_OscConfig+0x474>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d118      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ebe:	4b74      	ldr	r3, [pc, #464]	; (8007090 <HAL_RCC_OscConfig+0x474>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a73      	ldr	r2, [pc, #460]	; (8007090 <HAL_RCC_OscConfig+0x474>)
 8006ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eca:	f7fc fcc3 	bl	8003854 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed2:	f7fc fcbf 	bl	8003854 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e10c      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee4:	4b6a      	ldr	r3, [pc, #424]	; (8007090 <HAL_RCC_OscConfig+0x474>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCC_OscConfig+0x2ea>
 8006ef8:	4b64      	ldr	r3, [pc, #400]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	4a63      	ldr	r2, [pc, #396]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	6713      	str	r3, [r2, #112]	; 0x70
 8006f04:	e01c      	b.n	8006f40 <HAL_RCC_OscConfig+0x324>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x30c>
 8006f0e:	4b5f      	ldr	r3, [pc, #380]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	4a5e      	ldr	r2, [pc, #376]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f14:	f043 0304 	orr.w	r3, r3, #4
 8006f18:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1a:	4b5c      	ldr	r3, [pc, #368]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	4a5b      	ldr	r2, [pc, #364]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6713      	str	r3, [r2, #112]	; 0x70
 8006f26:	e00b      	b.n	8006f40 <HAL_RCC_OscConfig+0x324>
 8006f28:	4b58      	ldr	r3, [pc, #352]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2c:	4a57      	ldr	r2, [pc, #348]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	6713      	str	r3, [r2, #112]	; 0x70
 8006f34:	4b55      	ldr	r3, [pc, #340]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f38:	4a54      	ldr	r2, [pc, #336]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f3a:	f023 0304 	bic.w	r3, r3, #4
 8006f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f48:	f7fc fc84 	bl	8003854 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4e:	e00a      	b.n	8006f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f50:	f7fc fc80 	bl	8003854 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e0cb      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f66:	4b49      	ldr	r3, [pc, #292]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0ee      	beq.n	8006f50 <HAL_RCC_OscConfig+0x334>
 8006f72:	e014      	b.n	8006f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f74:	f7fc fc6e 	bl	8003854 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f7c:	f7fc fc6a 	bl	8003854 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e0b5      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f92:	4b3e      	ldr	r3, [pc, #248]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1ee      	bne.n	8006f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d105      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa4:	4b39      	ldr	r3, [pc, #228]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	4a38      	ldr	r2, [pc, #224]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80a1 	beq.w	80070fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fba:	4b34      	ldr	r3, [pc, #208]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d05c      	beq.n	8007080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d141      	bne.n	8007052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fce:	4b31      	ldr	r3, [pc, #196]	; (8007094 <HAL_RCC_OscConfig+0x478>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd4:	f7fc fc3e 	bl	8003854 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fdc:	f7fc fc3a 	bl	8003854 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e087      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fee:	4b27      	ldr	r3, [pc, #156]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	019b      	lsls	r3, r3, #6
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	3b01      	subs	r3, #1
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	491b      	ldr	r1, [pc, #108]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_RCC_OscConfig+0x478>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702a:	f7fc fc13 	bl	8003854 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007032:	f7fc fc0f 	bl	8003854 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e05c      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007044:	4b11      	ldr	r3, [pc, #68]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <HAL_RCC_OscConfig+0x416>
 8007050:	e054      	b.n	80070fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <HAL_RCC_OscConfig+0x478>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007058:	f7fc fbfc 	bl	8003854 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007060:	f7fc fbf8 	bl	8003854 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e045      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_RCC_OscConfig+0x470>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x444>
 800707e:	e03d      	b.n	80070fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e038      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
 800708c:	40023800 	.word	0x40023800
 8007090:	40007000 	.word	0x40007000
 8007094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007098:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <HAL_RCC_OscConfig+0x4ec>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d028      	beq.n	80070f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d121      	bne.n	80070f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d11a      	bne.n	80070f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d111      	bne.n	80070f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	3b01      	subs	r3, #1
 80070e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d107      	bne.n	80070f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d001      	beq.n	80070fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40023800 	.word	0x40023800

0800710c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0cc      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007120:	4b68      	ldr	r3, [pc, #416]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d90c      	bls.n	8007148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712e:	4b65      	ldr	r3, [pc, #404]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007136:	4b63      	ldr	r3, [pc, #396]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d001      	beq.n	8007148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0b8      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d020      	beq.n	8007196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007160:	4b59      	ldr	r3, [pc, #356]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4a58      	ldr	r2, [pc, #352]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800716a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007178:	4b53      	ldr	r3, [pc, #332]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a52      	ldr	r2, [pc, #328]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007184:	4b50      	ldr	r3, [pc, #320]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	494d      	ldr	r1, [pc, #308]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	4313      	orrs	r3, r2
 8007194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d044      	beq.n	800722c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d107      	bne.n	80071ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071aa:	4b47      	ldr	r3, [pc, #284]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d119      	bne.n	80071ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e07f      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ca:	4b3f      	ldr	r3, [pc, #252]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e06f      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071da:	4b3b      	ldr	r3, [pc, #236]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e067      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ea:	4b37      	ldr	r3, [pc, #220]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0203 	bic.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4934      	ldr	r1, [pc, #208]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071fc:	f7fc fb2a 	bl	8003854 <HAL_GetTick>
 8007200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	e00a      	b.n	800721a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007204:	f7fc fb26 	bl	8003854 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e04f      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	4b2b      	ldr	r3, [pc, #172]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 020c 	and.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	429a      	cmp	r2, r3
 800722a:	d1eb      	bne.n	8007204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800722c:	4b25      	ldr	r3, [pc, #148]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d20c      	bcs.n	8007254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007242:	4b20      	ldr	r3, [pc, #128]	; (80072c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d001      	beq.n	8007254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e032      	b.n	80072ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007260:	4b19      	ldr	r3, [pc, #100]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4916      	ldr	r1, [pc, #88]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	490e      	ldr	r1, [pc, #56]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007292:	f000 f821 	bl	80072d8 <HAL_RCC_GetSysClockFreq>
 8007296:	4602      	mov	r2, r0
 8007298:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <HAL_RCC_ClockConfig+0x1bc>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	490a      	ldr	r1, [pc, #40]	; (80072cc <HAL_RCC_ClockConfig+0x1c0>)
 80072a4:	5ccb      	ldrb	r3, [r1, r3]
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <HAL_RCC_ClockConfig+0x1c8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fc fa8a 	bl	80037cc <HAL_InitTick>

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40023c00 	.word	0x40023c00
 80072c8:	40023800 	.word	0x40023800
 80072cc:	08008da8 	.word	0x08008da8
 80072d0:	200000b0 	.word	0x200000b0
 80072d4:	200000b4 	.word	0x200000b4

080072d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b090      	sub	sp, #64	; 0x40
 80072de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	2300      	movs	r3, #0
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e8:	2300      	movs	r3, #0
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072f0:	4b59      	ldr	r3, [pc, #356]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d00d      	beq.n	8007318 <HAL_RCC_GetSysClockFreq+0x40>
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	f200 80a1 	bhi.w	8007444 <HAL_RCC_GetSysClockFreq+0x16c>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <HAL_RCC_GetSysClockFreq+0x34>
 8007306:	2b04      	cmp	r3, #4
 8007308:	d003      	beq.n	8007312 <HAL_RCC_GetSysClockFreq+0x3a>
 800730a:	e09b      	b.n	8007444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800730c:	4b53      	ldr	r3, [pc, #332]	; (800745c <HAL_RCC_GetSysClockFreq+0x184>)
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007310:	e09b      	b.n	800744a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007312:	4b53      	ldr	r3, [pc, #332]	; (8007460 <HAL_RCC_GetSysClockFreq+0x188>)
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007316:	e098      	b.n	800744a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007318:	4b4f      	ldr	r3, [pc, #316]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007322:	4b4d      	ldr	r3, [pc, #308]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d028      	beq.n	8007380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732e:	4b4a      	ldr	r3, [pc, #296]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	099b      	lsrs	r3, r3, #6
 8007334:	2200      	movs	r2, #0
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	627a      	str	r2, [r7, #36]	; 0x24
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007340:	2100      	movs	r1, #0
 8007342:	4b47      	ldr	r3, [pc, #284]	; (8007460 <HAL_RCC_GetSysClockFreq+0x188>)
 8007344:	fb03 f201 	mul.w	r2, r3, r1
 8007348:	2300      	movs	r3, #0
 800734a:	fb00 f303 	mul.w	r3, r0, r3
 800734e:	4413      	add	r3, r2
 8007350:	4a43      	ldr	r2, [pc, #268]	; (8007460 <HAL_RCC_GetSysClockFreq+0x188>)
 8007352:	fba0 1202 	umull	r1, r2, r0, r2
 8007356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007358:	460a      	mov	r2, r1
 800735a:	62ba      	str	r2, [r7, #40]	; 0x28
 800735c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800735e:	4413      	add	r3, r2
 8007360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007364:	2200      	movs	r2, #0
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	61fa      	str	r2, [r7, #28]
 800736a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800736e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007372:	f7f9 fc17 	bl	8000ba4 <__aeabi_uldivmod>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4613      	mov	r3, r2
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800737e:	e053      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007380:	4b35      	ldr	r3, [pc, #212]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	099b      	lsrs	r3, r3, #6
 8007386:	2200      	movs	r2, #0
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	617a      	str	r2, [r7, #20]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007392:	f04f 0b00 	mov.w	fp, #0
 8007396:	4652      	mov	r2, sl
 8007398:	465b      	mov	r3, fp
 800739a:	f04f 0000 	mov.w	r0, #0
 800739e:	f04f 0100 	mov.w	r1, #0
 80073a2:	0159      	lsls	r1, r3, #5
 80073a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073a8:	0150      	lsls	r0, r2, #5
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	ebb2 080a 	subs.w	r8, r2, sl
 80073b2:	eb63 090b 	sbc.w	r9, r3, fp
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80073c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073ca:	ebb2 0408 	subs.w	r4, r2, r8
 80073ce:	eb63 0509 	sbc.w	r5, r3, r9
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	00eb      	lsls	r3, r5, #3
 80073dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e0:	00e2      	lsls	r2, r4, #3
 80073e2:	4614      	mov	r4, r2
 80073e4:	461d      	mov	r5, r3
 80073e6:	eb14 030a 	adds.w	r3, r4, sl
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	eb45 030b 	adc.w	r3, r5, fp
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073fe:	4629      	mov	r1, r5
 8007400:	028b      	lsls	r3, r1, #10
 8007402:	4621      	mov	r1, r4
 8007404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007408:	4621      	mov	r1, r4
 800740a:	028a      	lsls	r2, r1, #10
 800740c:	4610      	mov	r0, r2
 800740e:	4619      	mov	r1, r3
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	2200      	movs	r2, #0
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	60fa      	str	r2, [r7, #12]
 8007418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800741c:	f7f9 fbc2 	bl	8000ba4 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4613      	mov	r3, r2
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_RCC_GetSysClockFreq+0x180>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	3301      	adds	r3, #1
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007442:	e002      	b.n	800744a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_RCC_GetSysClockFreq+0x184>)
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800744c:	4618      	mov	r0, r3
 800744e:	3740      	adds	r7, #64	; 0x40
 8007450:	46bd      	mov	sp, r7
 8007452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007456:	bf00      	nop
 8007458:	40023800 	.word	0x40023800
 800745c:	00f42400 	.word	0x00f42400
 8007460:	018cba80 	.word	0x018cba80

08007464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007468:	4b03      	ldr	r3, [pc, #12]	; (8007478 <HAL_RCC_GetHCLKFreq+0x14>)
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	200000b0 	.word	0x200000b0

0800747c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007480:	f7ff fff0 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8007484:	4602      	mov	r2, r0
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	0a9b      	lsrs	r3, r3, #10
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	4903      	ldr	r1, [pc, #12]	; (80074a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007492:	5ccb      	ldrb	r3, [r1, r3]
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40023800 	.word	0x40023800
 80074a0:	08008db8 	.word	0x08008db8

080074a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d035      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074cc:	4b62      	ldr	r3, [pc, #392]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074d2:	f7fc f9bf 	bl	8003854 <HAL_GetTick>
 80074d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074da:	f7fc f9bb 	bl	8003854 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e0b0      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074ec:	4b5b      	ldr	r3, [pc, #364]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f0      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	019a      	lsls	r2, r3, #6
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	071b      	lsls	r3, r3, #28
 8007504:	4955      	ldr	r1, [pc, #340]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007506:	4313      	orrs	r3, r2
 8007508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800750c:	4b52      	ldr	r3, [pc, #328]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007512:	f7fc f99f 	bl	8003854 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007518:	e008      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800751a:	f7fc f99b 	bl	8003854 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e090      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800752c:	4b4b      	ldr	r3, [pc, #300]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0f0      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8083 	beq.w	800764c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	4b44      	ldr	r3, [pc, #272]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4a43      	ldr	r2, [pc, #268]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
 8007556:	4b41      	ldr	r3, [pc, #260]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007562:	4b3f      	ldr	r3, [pc, #252]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a3e      	ldr	r2, [pc, #248]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800756e:	f7fc f971 	bl	8003854 <HAL_GetTick>
 8007572:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007576:	f7fc f96d 	bl	8003854 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e062      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007588:	4b35      	ldr	r3, [pc, #212]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0f0      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007594:	4b31      	ldr	r3, [pc, #196]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02f      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d028      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075b2:	4b2a      	ldr	r3, [pc, #168]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075bc:	4b29      	ldr	r3, [pc, #164]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075be:	2201      	movs	r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075c2:	4b28      	ldr	r3, [pc, #160]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075c8:	4a24      	ldr	r2, [pc, #144]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075ce:	4b23      	ldr	r3, [pc, #140]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d114      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075da:	f7fc f93b 	bl	8003854 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fc f937 	bl	8003854 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e02a      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f8:	4b18      	ldr	r3, [pc, #96]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ee      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007610:	d10d      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007626:	490d      	ldr	r1, [pc, #52]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007628:	4313      	orrs	r3, r2
 800762a:	608b      	str	r3, [r1, #8]
 800762c:	e005      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	4a0a      	ldr	r2, [pc, #40]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007634:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007638:	6093      	str	r3, [r2, #8]
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800763c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007646:	4905      	ldr	r1, [pc, #20]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007648:	4313      	orrs	r3, r2
 800764a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	42470068 	.word	0x42470068
 800765c:	40023800 	.word	0x40023800
 8007660:	40007000 	.word	0x40007000
 8007664:	42470e40 	.word	0x42470e40

08007668 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d13f      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007686:	4b24      	ldr	r3, [pc, #144]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769c:	d12f      	bne.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800769e:	4b1f      	ldr	r3, [pc, #124]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80076a0:	617b      	str	r3, [r7, #20]
          break;
 80076a2:	e02f      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076a4:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b0:	d108      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076b2:	4b19      	ldr	r3, [pc, #100]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ba:	4a19      	ldr	r2, [pc, #100]	; (8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e007      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076c4:	4b14      	ldr	r3, [pc, #80]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076cc:	4a15      	ldr	r2, [pc, #84]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80076ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80076d4:	4b10      	ldr	r3, [pc, #64]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076da:	099b      	lsrs	r3, r3, #6
 80076dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80076e8:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ee:	0f1b      	lsrs	r3, r3, #28
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fa:	617b      	str	r3, [r7, #20]
          break;
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
          break;
 8007702:	bf00      	nop
        }
      }
      break;
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8007706:	bf00      	nop
    }
  }
  return frequency;
 8007708:	697b      	ldr	r3, [r7, #20]
}
 800770a:	4618      	mov	r0, r3
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40023800 	.word	0x40023800
 800771c:	00bb8000 	.word	0x00bb8000
 8007720:	018cba80 	.word	0x018cba80
 8007724:	00f42400 	.word	0x00f42400

08007728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e07b      	b.n	8007832 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d108      	bne.n	8007754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774a:	d009      	beq.n	8007760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	61da      	str	r2, [r3, #28]
 8007752:	e005      	b.n	8007760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fb fe74 	bl	8003468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	ea42 0103 	orr.w	r1, r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	f003 0104 	and.w	r1, r3, #4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	f003 0210 	and.w	r2, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_SPI_Transmit_DMA+0x20>
 8007858:	2302      	movs	r3, #2
 800785a:	e097      	b.n	800798c <HAL_SPI_Transmit_DMA+0x150>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d002      	beq.n	8007876 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007870:	2302      	movs	r3, #2
 8007872:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007874:	e085      	b.n	8007982 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_SPI_Transmit_DMA+0x46>
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007886:	e07c      	b.n	8007982 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2203      	movs	r2, #3
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ce:	d10f      	bne.n	80078f0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f4:	4a27      	ldr	r2, [pc, #156]	; (8007994 <HAL_SPI_Transmit_DMA+0x158>)
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <HAL_SPI_Transmit_DMA+0x15c>)
 80078fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <HAL_SPI_Transmit_DMA+0x160>)
 8007906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	2200      	movs	r2, #0
 800790e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	4619      	mov	r1, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	330c      	adds	r3, #12
 8007920:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007926:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007928:	f7fc fdf4 	bl	8004514 <HAL_DMA_Start_IT>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f043 0210 	orr.w	r2, r3, #16
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007942:	e01e      	b.n	8007982 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d007      	beq.n	8007962 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007960:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0220 	orr.w	r2, r2, #32
 8007970:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0202 	orr.w	r2, r2, #2
 8007980:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08007a85 	.word	0x08007a85
 8007998:	080079dd 	.word	0x080079dd
 800799c:	08007aa1 	.word	0x08007aa1

080079a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079ea:	f7fb ff33 	bl	8003854 <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fe:	d03b      	beq.n	8007a78 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0220 	bic.w	r2, r2, #32
 8007a0e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0202 	bic.w	r2, r2, #2
 8007a1e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	2164      	movs	r1, #100	; 0x64
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f000 f8e3 	bl	8007bf0 <SPI_EndRxTxTransaction>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	f043 0220 	orr.w	r2, r3, #32
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a70:	6978      	ldr	r0, [r7, #20]
 8007a72:	f7ff ffa9 	bl	80079c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a76:	e002      	b.n	8007a7e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007a78:	6978      	ldr	r0, [r7, #20]
 8007a7a:	f7ff ff91 	bl	80079a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff ff8e 	bl	80079b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0203 	bic.w	r2, r2, #3
 8007abc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	f043 0210 	orr.w	r2, r3, #16
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff ff78 	bl	80079c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007af0:	f7fb feb0 	bl	8003854 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4413      	add	r3, r2
 8007afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b00:	f7fb fea8 	bl	8003854 <HAL_GetTick>
 8007b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b06:	4b39      	ldr	r3, [pc, #228]	; (8007bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	015b      	lsls	r3, r3, #5
 8007b0c:	0d1b      	lsrs	r3, r3, #20
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
 8007b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b16:	e054      	b.n	8007bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1e:	d050      	beq.n	8007bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b20:	f7fb fe98 	bl	8003854 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d902      	bls.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d13d      	bne.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b4e:	d111      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b58:	d004      	beq.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b62:	d107      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7c:	d10f      	bne.n	8007b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e017      	b.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2300      	movne	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d19b      	bne.n	8007b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200000b0 	.word	0x200000b0

08007bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2201      	movs	r2, #1
 8007c04:	2102      	movs	r1, #2
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ff6a 	bl	8007ae0 <SPI_WaitFlagStateUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	f043 0220 	orr.w	r2, r3, #32
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e032      	b.n	8007c88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c22:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <SPI_EndRxTxTransaction+0xa0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1b      	ldr	r2, [pc, #108]	; (8007c94 <SPI_EndRxTxTransaction+0xa4>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	0d5b      	lsrs	r3, r3, #21
 8007c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c40:	d112      	bne.n	8007c68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff47 	bl	8007ae0 <SPI_WaitFlagStateUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d016      	beq.n	8007c86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e00f      	b.n	8007c88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	2b80      	cmp	r3, #128	; 0x80
 8007c80:	d0f2      	beq.n	8007c68 <SPI_EndRxTxTransaction+0x78>
 8007c82:	e000      	b.n	8007c86 <SPI_EndRxTxTransaction+0x96>
        break;
 8007c84:	bf00      	nop
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200000b0 	.word	0x200000b0
 8007c94:	165e9f81 	.word	0x165e9f81

08007c98 <sin>:
 8007c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c9a:	ec53 2b10 	vmov	r2, r3, d0
 8007c9e:	4828      	ldr	r0, [pc, #160]	; (8007d40 <sin+0xa8>)
 8007ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ca4:	4281      	cmp	r1, r0
 8007ca6:	dc07      	bgt.n	8007cb8 <sin+0x20>
 8007ca8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007d38 <sin+0xa0>
 8007cac:	2000      	movs	r0, #0
 8007cae:	b005      	add	sp, #20
 8007cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb4:	f000 b910 	b.w	8007ed8 <__kernel_sin>
 8007cb8:	4822      	ldr	r0, [pc, #136]	; (8007d44 <sin+0xac>)
 8007cba:	4281      	cmp	r1, r0
 8007cbc:	dd09      	ble.n	8007cd2 <sin+0x3a>
 8007cbe:	ee10 0a10 	vmov	r0, s0
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f7f8 fa84 	bl	80001d0 <__aeabi_dsub>
 8007cc8:	ec41 0b10 	vmov	d0, r0, r1
 8007ccc:	b005      	add	sp, #20
 8007cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd2:	4668      	mov	r0, sp
 8007cd4:	f000 f9c0 	bl	8008058 <__ieee754_rem_pio2>
 8007cd8:	f000 0003 	and.w	r0, r0, #3
 8007cdc:	2801      	cmp	r0, #1
 8007cde:	d00c      	beq.n	8007cfa <sin+0x62>
 8007ce0:	2802      	cmp	r0, #2
 8007ce2:	d011      	beq.n	8007d08 <sin+0x70>
 8007ce4:	b9f0      	cbnz	r0, 8007d24 <sin+0x8c>
 8007ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cea:	ed9d 0b00 	vldr	d0, [sp]
 8007cee:	2001      	movs	r0, #1
 8007cf0:	f000 f8f2 	bl	8007ed8 <__kernel_sin>
 8007cf4:	ec51 0b10 	vmov	r0, r1, d0
 8007cf8:	e7e6      	b.n	8007cc8 <sin+0x30>
 8007cfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cfe:	ed9d 0b00 	vldr	d0, [sp]
 8007d02:	f000 f821 	bl	8007d48 <__kernel_cos>
 8007d06:	e7f5      	b.n	8007cf4 <sin+0x5c>
 8007d08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d0c:	ed9d 0b00 	vldr	d0, [sp]
 8007d10:	2001      	movs	r0, #1
 8007d12:	f000 f8e1 	bl	8007ed8 <__kernel_sin>
 8007d16:	ec53 2b10 	vmov	r2, r3, d0
 8007d1a:	ee10 0a10 	vmov	r0, s0
 8007d1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d22:	e7d1      	b.n	8007cc8 <sin+0x30>
 8007d24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d28:	ed9d 0b00 	vldr	d0, [sp]
 8007d2c:	f000 f80c 	bl	8007d48 <__kernel_cos>
 8007d30:	e7f1      	b.n	8007d16 <sin+0x7e>
 8007d32:	bf00      	nop
 8007d34:	f3af 8000 	nop.w
	...
 8007d40:	3fe921fb 	.word	0x3fe921fb
 8007d44:	7fefffff 	.word	0x7fefffff

08007d48 <__kernel_cos>:
 8007d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	ec57 6b10 	vmov	r6, r7, d0
 8007d50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007d54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d58:	ed8d 1b00 	vstr	d1, [sp]
 8007d5c:	da07      	bge.n	8007d6e <__kernel_cos+0x26>
 8007d5e:	ee10 0a10 	vmov	r0, s0
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fe86 	bl	8000a74 <__aeabi_d2iz>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f000 8088 	beq.w	8007e7e <__kernel_cos+0x136>
 8007d6e:	4632      	mov	r2, r6
 8007d70:	463b      	mov	r3, r7
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 fbe3 	bl	8000540 <__aeabi_dmul>
 8007d7a:	4b51      	ldr	r3, [pc, #324]	; (8007ec0 <__kernel_cos+0x178>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	460d      	mov	r5, r1
 8007d82:	f7f8 fbdd 	bl	8000540 <__aeabi_dmul>
 8007d86:	a340      	add	r3, pc, #256	; (adr r3, 8007e88 <__kernel_cos+0x140>)
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	468b      	mov	fp, r1
 8007d90:	4620      	mov	r0, r4
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7f8 fbd4 	bl	8000540 <__aeabi_dmul>
 8007d98:	a33d      	add	r3, pc, #244	; (adr r3, 8007e90 <__kernel_cos+0x148>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fa19 	bl	80001d4 <__adddf3>
 8007da2:	4622      	mov	r2, r4
 8007da4:	462b      	mov	r3, r5
 8007da6:	f7f8 fbcb 	bl	8000540 <__aeabi_dmul>
 8007daa:	a33b      	add	r3, pc, #236	; (adr r3, 8007e98 <__kernel_cos+0x150>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fa0e 	bl	80001d0 <__aeabi_dsub>
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	f7f8 fbc2 	bl	8000540 <__aeabi_dmul>
 8007dbc:	a338      	add	r3, pc, #224	; (adr r3, 8007ea0 <__kernel_cos+0x158>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa07 	bl	80001d4 <__adddf3>
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	f7f8 fbb9 	bl	8000540 <__aeabi_dmul>
 8007dce:	a336      	add	r3, pc, #216	; (adr r3, 8007ea8 <__kernel_cos+0x160>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 f9fc 	bl	80001d0 <__aeabi_dsub>
 8007dd8:	4622      	mov	r2, r4
 8007dda:	462b      	mov	r3, r5
 8007ddc:	f7f8 fbb0 	bl	8000540 <__aeabi_dmul>
 8007de0:	a333      	add	r3, pc, #204	; (adr r3, 8007eb0 <__kernel_cos+0x168>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 f9f5 	bl	80001d4 <__adddf3>
 8007dea:	4622      	mov	r2, r4
 8007dec:	462b      	mov	r3, r5
 8007dee:	f7f8 fba7 	bl	8000540 <__aeabi_dmul>
 8007df2:	4622      	mov	r2, r4
 8007df4:	462b      	mov	r3, r5
 8007df6:	f7f8 fba3 	bl	8000540 <__aeabi_dmul>
 8007dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fb9b 	bl	8000540 <__aeabi_dmul>
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7f8 f9dd 	bl	80001d0 <__aeabi_dsub>
 8007e16:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <__kernel_cos+0x17c>)
 8007e18:	4598      	cmp	r8, r3
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	dc10      	bgt.n	8007e42 <__kernel_cos+0xfa>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 f9d2 	bl	80001d0 <__aeabi_dsub>
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4926      	ldr	r1, [pc, #152]	; (8007ec8 <__kernel_cos+0x180>)
 8007e30:	4602      	mov	r2, r0
 8007e32:	2000      	movs	r0, #0
 8007e34:	f7f8 f9cc 	bl	80001d0 <__aeabi_dsub>
 8007e38:	ec41 0b10 	vmov	d0, r0, r1
 8007e3c:	b003      	add	sp, #12
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <__kernel_cos+0x184>)
 8007e44:	4920      	ldr	r1, [pc, #128]	; (8007ec8 <__kernel_cos+0x180>)
 8007e46:	4598      	cmp	r8, r3
 8007e48:	bfcc      	ite	gt
 8007e4a:	4d21      	ldrgt	r5, [pc, #132]	; (8007ed0 <__kernel_cos+0x188>)
 8007e4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007e50:	2400      	movs	r4, #0
 8007e52:	4622      	mov	r2, r4
 8007e54:	462b      	mov	r3, r5
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7f8 f9ba 	bl	80001d0 <__aeabi_dsub>
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4680      	mov	r8, r0
 8007e60:	4689      	mov	r9, r1
 8007e62:	462b      	mov	r3, r5
 8007e64:	4650      	mov	r0, sl
 8007e66:	4659      	mov	r1, fp
 8007e68:	f7f8 f9b2 	bl	80001d0 <__aeabi_dsub>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	f7f8 f9ae 	bl	80001d0 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	e7da      	b.n	8007e34 <__kernel_cos+0xec>
 8007e7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007eb8 <__kernel_cos+0x170>
 8007e82:	e7db      	b.n	8007e3c <__kernel_cos+0xf4>
 8007e84:	f3af 8000 	nop.w
 8007e88:	be8838d4 	.word	0xbe8838d4
 8007e8c:	bda8fae9 	.word	0xbda8fae9
 8007e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8007e94:	3e21ee9e 	.word	0x3e21ee9e
 8007e98:	809c52ad 	.word	0x809c52ad
 8007e9c:	3e927e4f 	.word	0x3e927e4f
 8007ea0:	19cb1590 	.word	0x19cb1590
 8007ea4:	3efa01a0 	.word	0x3efa01a0
 8007ea8:	16c15177 	.word	0x16c15177
 8007eac:	3f56c16c 	.word	0x3f56c16c
 8007eb0:	5555554c 	.word	0x5555554c
 8007eb4:	3fa55555 	.word	0x3fa55555
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	3ff00000 	.word	0x3ff00000
 8007ec0:	3fe00000 	.word	0x3fe00000
 8007ec4:	3fd33332 	.word	0x3fd33332
 8007ec8:	3ff00000 	.word	0x3ff00000
 8007ecc:	3fe90000 	.word	0x3fe90000
 8007ed0:	3fd20000 	.word	0x3fd20000
 8007ed4:	00000000 	.word	0x00000000

08007ed8 <__kernel_sin>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	ed2d 8b04 	vpush	{d8-d9}
 8007ee0:	eeb0 8a41 	vmov.f32	s16, s2
 8007ee4:	eef0 8a61 	vmov.f32	s17, s3
 8007ee8:	ec55 4b10 	vmov	r4, r5, d0
 8007eec:	b083      	sub	sp, #12
 8007eee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ef2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007ef6:	9001      	str	r0, [sp, #4]
 8007ef8:	da06      	bge.n	8007f08 <__kernel_sin+0x30>
 8007efa:	ee10 0a10 	vmov	r0, s0
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 fdb8 	bl	8000a74 <__aeabi_d2iz>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d051      	beq.n	8007fac <__kernel_sin+0xd4>
 8007f08:	4622      	mov	r2, r4
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7f8 fb16 	bl	8000540 <__aeabi_dmul>
 8007f14:	4682      	mov	sl, r0
 8007f16:	468b      	mov	fp, r1
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fb0e 	bl	8000540 <__aeabi_dmul>
 8007f24:	a341      	add	r3, pc, #260	; (adr r3, 800802c <__kernel_sin+0x154>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4689      	mov	r9, r1
 8007f2e:	4650      	mov	r0, sl
 8007f30:	4659      	mov	r1, fp
 8007f32:	f7f8 fb05 	bl	8000540 <__aeabi_dmul>
 8007f36:	a33f      	add	r3, pc, #252	; (adr r3, 8008034 <__kernel_sin+0x15c>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f7f8 f948 	bl	80001d0 <__aeabi_dsub>
 8007f40:	4652      	mov	r2, sl
 8007f42:	465b      	mov	r3, fp
 8007f44:	f7f8 fafc 	bl	8000540 <__aeabi_dmul>
 8007f48:	a33c      	add	r3, pc, #240	; (adr r3, 800803c <__kernel_sin+0x164>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 f941 	bl	80001d4 <__adddf3>
 8007f52:	4652      	mov	r2, sl
 8007f54:	465b      	mov	r3, fp
 8007f56:	f7f8 faf3 	bl	8000540 <__aeabi_dmul>
 8007f5a:	a33a      	add	r3, pc, #232	; (adr r3, 8008044 <__kernel_sin+0x16c>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f936 	bl	80001d0 <__aeabi_dsub>
 8007f64:	4652      	mov	r2, sl
 8007f66:	465b      	mov	r3, fp
 8007f68:	f7f8 faea 	bl	8000540 <__aeabi_dmul>
 8007f6c:	a337      	add	r3, pc, #220	; (adr r3, 800804c <__kernel_sin+0x174>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f92f 	bl	80001d4 <__adddf3>
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	4606      	mov	r6, r0
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	b9eb      	cbnz	r3, 8007fba <__kernel_sin+0xe2>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4650      	mov	r0, sl
 8007f84:	4659      	mov	r1, fp
 8007f86:	f7f8 fadb 	bl	8000540 <__aeabi_dmul>
 8007f8a:	a325      	add	r3, pc, #148	; (adr r3, 8008020 <__kernel_sin+0x148>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 f91e 	bl	80001d0 <__aeabi_dsub>
 8007f94:	4642      	mov	r2, r8
 8007f96:	464b      	mov	r3, r9
 8007f98:	f7f8 fad2 	bl	8000540 <__aeabi_dmul>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 f916 	bl	80001d4 <__adddf3>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	ec45 4b10 	vmov	d0, r4, r5
 8007fb0:	b003      	add	sp, #12
 8007fb2:	ecbd 8b04 	vpop	{d8-d9}
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <__kernel_sin+0x150>)
 8007fbc:	ec51 0b18 	vmov	r0, r1, d8
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f7f8 fabd 	bl	8000540 <__aeabi_dmul>
 8007fc6:	4632      	mov	r2, r6
 8007fc8:	ec41 0b19 	vmov	d9, r0, r1
 8007fcc:	463b      	mov	r3, r7
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 fab5 	bl	8000540 <__aeabi_dmul>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	ec51 0b19 	vmov	r0, r1, d9
 8007fde:	f7f8 f8f7 	bl	80001d0 <__aeabi_dsub>
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	f7f8 faab 	bl	8000540 <__aeabi_dmul>
 8007fea:	ec53 2b18 	vmov	r2, r3, d8
 8007fee:	f7f8 f8ef 	bl	80001d0 <__aeabi_dsub>
 8007ff2:	a30b      	add	r3, pc, #44	; (adr r3, 8008020 <__kernel_sin+0x148>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 fa9e 	bl	8000540 <__aeabi_dmul>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 f8e2 	bl	80001d4 <__adddf3>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 f8da 	bl	80001d0 <__aeabi_dsub>
 800801c:	e7c4      	b.n	8007fa8 <__kernel_sin+0xd0>
 800801e:	bf00      	nop
 8008020:	55555549 	.word	0x55555549
 8008024:	3fc55555 	.word	0x3fc55555
 8008028:	3fe00000 	.word	0x3fe00000
 800802c:	5acfd57c 	.word	0x5acfd57c
 8008030:	3de5d93a 	.word	0x3de5d93a
 8008034:	8a2b9ceb 	.word	0x8a2b9ceb
 8008038:	3e5ae5e6 	.word	0x3e5ae5e6
 800803c:	57b1fe7d 	.word	0x57b1fe7d
 8008040:	3ec71de3 	.word	0x3ec71de3
 8008044:	19c161d5 	.word	0x19c161d5
 8008048:	3f2a01a0 	.word	0x3f2a01a0
 800804c:	1110f8a6 	.word	0x1110f8a6
 8008050:	3f811111 	.word	0x3f811111
 8008054:	00000000 	.word	0x00000000

08008058 <__ieee754_rem_pio2>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	ed2d 8b02 	vpush	{d8}
 8008060:	ec55 4b10 	vmov	r4, r5, d0
 8008064:	4bca      	ldr	r3, [pc, #808]	; (8008390 <__ieee754_rem_pio2+0x338>)
 8008066:	b08b      	sub	sp, #44	; 0x2c
 8008068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800806c:	4598      	cmp	r8, r3
 800806e:	4682      	mov	sl, r0
 8008070:	9502      	str	r5, [sp, #8]
 8008072:	dc08      	bgt.n	8008086 <__ieee754_rem_pio2+0x2e>
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	ed80 0b00 	vstr	d0, [r0]
 800807c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008080:	f04f 0b00 	mov.w	fp, #0
 8008084:	e028      	b.n	80080d8 <__ieee754_rem_pio2+0x80>
 8008086:	4bc3      	ldr	r3, [pc, #780]	; (8008394 <__ieee754_rem_pio2+0x33c>)
 8008088:	4598      	cmp	r8, r3
 800808a:	dc78      	bgt.n	800817e <__ieee754_rem_pio2+0x126>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	4ec2      	ldr	r6, [pc, #776]	; (8008398 <__ieee754_rem_pio2+0x340>)
 8008090:	2b00      	cmp	r3, #0
 8008092:	ee10 0a10 	vmov	r0, s0
 8008096:	a3b0      	add	r3, pc, #704	; (adr r3, 8008358 <__ieee754_rem_pio2+0x300>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	4629      	mov	r1, r5
 800809e:	dd39      	ble.n	8008114 <__ieee754_rem_pio2+0xbc>
 80080a0:	f7f8 f896 	bl	80001d0 <__aeabi_dsub>
 80080a4:	45b0      	cmp	r8, r6
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	d01b      	beq.n	80080e4 <__ieee754_rem_pio2+0x8c>
 80080ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8008360 <__ieee754_rem_pio2+0x308>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f88d 	bl	80001d0 <__aeabi_dsub>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	e9ca 2300 	strd	r2, r3, [sl]
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 f885 	bl	80001d0 <__aeabi_dsub>
 80080c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008360 <__ieee754_rem_pio2+0x308>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f7f8 f880 	bl	80001d0 <__aeabi_dsub>
 80080d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80080d4:	f04f 0b01 	mov.w	fp, #1
 80080d8:	4658      	mov	r0, fp
 80080da:	b00b      	add	sp, #44	; 0x2c
 80080dc:	ecbd 8b02 	vpop	{d8}
 80080e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008368 <__ieee754_rem_pio2+0x310>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f871 	bl	80001d0 <__aeabi_dsub>
 80080ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8008370 <__ieee754_rem_pio2+0x318>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	f7f8 f86a 	bl	80001d0 <__aeabi_dsub>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	e9ca 2300 	strd	r2, r3, [sl]
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 f862 	bl	80001d0 <__aeabi_dsub>
 800810c:	a398      	add	r3, pc, #608	; (adr r3, 8008370 <__ieee754_rem_pio2+0x318>)
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	e7db      	b.n	80080cc <__ieee754_rem_pio2+0x74>
 8008114:	f7f8 f85e 	bl	80001d4 <__adddf3>
 8008118:	45b0      	cmp	r8, r6
 800811a:	4604      	mov	r4, r0
 800811c:	460d      	mov	r5, r1
 800811e:	d016      	beq.n	800814e <__ieee754_rem_pio2+0xf6>
 8008120:	a38f      	add	r3, pc, #572	; (adr r3, 8008360 <__ieee754_rem_pio2+0x308>)
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f7f8 f855 	bl	80001d4 <__adddf3>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9ca 2300 	strd	r2, r3, [sl]
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	f7f8 f84b 	bl	80001d0 <__aeabi_dsub>
 800813a:	a389      	add	r3, pc, #548	; (adr r3, 8008360 <__ieee754_rem_pio2+0x308>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 f848 	bl	80001d4 <__adddf3>
 8008144:	f04f 3bff 	mov.w	fp, #4294967295
 8008148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800814c:	e7c4      	b.n	80080d8 <__ieee754_rem_pio2+0x80>
 800814e:	a386      	add	r3, pc, #536	; (adr r3, 8008368 <__ieee754_rem_pio2+0x310>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f83e 	bl	80001d4 <__adddf3>
 8008158:	a385      	add	r3, pc, #532	; (adr r3, 8008370 <__ieee754_rem_pio2+0x318>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	f7f8 f837 	bl	80001d4 <__adddf3>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	e9ca 2300 	strd	r2, r3, [sl]
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f8 f82d 	bl	80001d0 <__aeabi_dsub>
 8008176:	a37e      	add	r3, pc, #504	; (adr r3, 8008370 <__ieee754_rem_pio2+0x318>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	e7e0      	b.n	8008140 <__ieee754_rem_pio2+0xe8>
 800817e:	4b87      	ldr	r3, [pc, #540]	; (800839c <__ieee754_rem_pio2+0x344>)
 8008180:	4598      	cmp	r8, r3
 8008182:	f300 80d8 	bgt.w	8008336 <__ieee754_rem_pio2+0x2de>
 8008186:	f000 f96d 	bl	8008464 <fabs>
 800818a:	ec55 4b10 	vmov	r4, r5, d0
 800818e:	ee10 0a10 	vmov	r0, s0
 8008192:	a379      	add	r3, pc, #484	; (adr r3, 8008378 <__ieee754_rem_pio2+0x320>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 f9d1 	bl	8000540 <__aeabi_dmul>
 800819e:	4b80      	ldr	r3, [pc, #512]	; (80083a0 <__ieee754_rem_pio2+0x348>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	f7f8 f817 	bl	80001d4 <__adddf3>
 80081a6:	f7f8 fc65 	bl	8000a74 <__aeabi_d2iz>
 80081aa:	4683      	mov	fp, r0
 80081ac:	f7f8 f95e 	bl	800046c <__aeabi_i2d>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	ec43 2b18 	vmov	d8, r2, r3
 80081b8:	a367      	add	r3, pc, #412	; (adr r3, 8008358 <__ieee754_rem_pio2+0x300>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f9bf 	bl	8000540 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 f801 	bl	80001d0 <__aeabi_dsub>
 80081ce:	a364      	add	r3, pc, #400	; (adr r3, 8008360 <__ieee754_rem_pio2+0x308>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	ec51 0b18 	vmov	r0, r1, d8
 80081dc:	f7f8 f9b0 	bl	8000540 <__aeabi_dmul>
 80081e0:	f1bb 0f1f 	cmp.w	fp, #31
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	dc0d      	bgt.n	8008206 <__ieee754_rem_pio2+0x1ae>
 80081ea:	4b6e      	ldr	r3, [pc, #440]	; (80083a4 <__ieee754_rem_pio2+0x34c>)
 80081ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	4543      	cmp	r3, r8
 80081f6:	d006      	beq.n	8008206 <__ieee754_rem_pio2+0x1ae>
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7f7 ffe6 	bl	80001d0 <__aeabi_dsub>
 8008204:	e00e      	b.n	8008224 <__ieee754_rem_pio2+0x1cc>
 8008206:	462b      	mov	r3, r5
 8008208:	4622      	mov	r2, r4
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f7 ffdf 	bl	80001d0 <__aeabi_dsub>
 8008212:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800821c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008220:	2b10      	cmp	r3, #16
 8008222:	dc02      	bgt.n	800822a <__ieee754_rem_pio2+0x1d2>
 8008224:	e9ca 0100 	strd	r0, r1, [sl]
 8008228:	e039      	b.n	800829e <__ieee754_rem_pio2+0x246>
 800822a:	a34f      	add	r3, pc, #316	; (adr r3, 8008368 <__ieee754_rem_pio2+0x310>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	ec51 0b18 	vmov	r0, r1, d8
 8008234:	f7f8 f984 	bl	8000540 <__aeabi_dmul>
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f7 ffc4 	bl	80001d0 <__aeabi_dsub>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4680      	mov	r8, r0
 800824e:	4689      	mov	r9, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f7 ffbc 	bl	80001d0 <__aeabi_dsub>
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	f7f7 ffb8 	bl	80001d0 <__aeabi_dsub>
 8008260:	a343      	add	r3, pc, #268	; (adr r3, 8008370 <__ieee754_rem_pio2+0x318>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	ec51 0b18 	vmov	r0, r1, d8
 800826e:	f7f8 f967 	bl	8000540 <__aeabi_dmul>
 8008272:	4622      	mov	r2, r4
 8008274:	462b      	mov	r3, r5
 8008276:	f7f7 ffab 	bl	80001d0 <__aeabi_dsub>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f7 ffa3 	bl	80001d0 <__aeabi_dsub>
 800828a:	9a03      	ldr	r2, [sp, #12]
 800828c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b31      	cmp	r3, #49	; 0x31
 8008294:	dc24      	bgt.n	80082e0 <__ieee754_rem_pio2+0x288>
 8008296:	e9ca 0100 	strd	r0, r1, [sl]
 800829a:	4646      	mov	r6, r8
 800829c:	464f      	mov	r7, r9
 800829e:	e9da 8900 	ldrd	r8, r9, [sl]
 80082a2:	4630      	mov	r0, r6
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f7 ff91 	bl	80001d0 <__aeabi_dsub>
 80082ae:	462b      	mov	r3, r5
 80082b0:	4622      	mov	r2, r4
 80082b2:	f7f7 ff8d 	bl	80001d0 <__aeabi_dsub>
 80082b6:	9b02      	ldr	r3, [sp, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082be:	f6bf af0b 	bge.w	80080d8 <__ieee754_rem_pio2+0x80>
 80082c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082c6:	f8ca 3004 	str.w	r3, [sl, #4]
 80082ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ce:	f8ca 8000 	str.w	r8, [sl]
 80082d2:	f8ca 0008 	str.w	r0, [sl, #8]
 80082d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80082da:	f1cb 0b00 	rsb	fp, fp, #0
 80082de:	e6fb      	b.n	80080d8 <__ieee754_rem_pio2+0x80>
 80082e0:	a327      	add	r3, pc, #156	; (adr r3, 8008380 <__ieee754_rem_pio2+0x328>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	ec51 0b18 	vmov	r0, r1, d8
 80082ea:	f7f8 f929 	bl	8000540 <__aeabi_dmul>
 80082ee:	4604      	mov	r4, r0
 80082f0:	460d      	mov	r5, r1
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f7 ff69 	bl	80001d0 <__aeabi_dsub>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4606      	mov	r6, r0
 8008304:	460f      	mov	r7, r1
 8008306:	4640      	mov	r0, r8
 8008308:	4649      	mov	r1, r9
 800830a:	f7f7 ff61 	bl	80001d0 <__aeabi_dsub>
 800830e:	4622      	mov	r2, r4
 8008310:	462b      	mov	r3, r5
 8008312:	f7f7 ff5d 	bl	80001d0 <__aeabi_dsub>
 8008316:	a31c      	add	r3, pc, #112	; (adr r3, 8008388 <__ieee754_rem_pio2+0x330>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	f7f8 f90c 	bl	8000540 <__aeabi_dmul>
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	f7f7 ff50 	bl	80001d0 <__aeabi_dsub>
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	e760      	b.n	80081f8 <__ieee754_rem_pio2+0x1a0>
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <__ieee754_rem_pio2+0x350>)
 8008338:	4598      	cmp	r8, r3
 800833a:	dd37      	ble.n	80083ac <__ieee754_rem_pio2+0x354>
 800833c:	ee10 2a10 	vmov	r2, s0
 8008340:	462b      	mov	r3, r5
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f7f7 ff43 	bl	80001d0 <__aeabi_dsub>
 800834a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800834e:	e9ca 0100 	strd	r0, r1, [sl]
 8008352:	e695      	b.n	8008080 <__ieee754_rem_pio2+0x28>
 8008354:	f3af 8000 	nop.w
 8008358:	54400000 	.word	0x54400000
 800835c:	3ff921fb 	.word	0x3ff921fb
 8008360:	1a626331 	.word	0x1a626331
 8008364:	3dd0b461 	.word	0x3dd0b461
 8008368:	1a600000 	.word	0x1a600000
 800836c:	3dd0b461 	.word	0x3dd0b461
 8008370:	2e037073 	.word	0x2e037073
 8008374:	3ba3198a 	.word	0x3ba3198a
 8008378:	6dc9c883 	.word	0x6dc9c883
 800837c:	3fe45f30 	.word	0x3fe45f30
 8008380:	2e000000 	.word	0x2e000000
 8008384:	3ba3198a 	.word	0x3ba3198a
 8008388:	252049c1 	.word	0x252049c1
 800838c:	397b839a 	.word	0x397b839a
 8008390:	3fe921fb 	.word	0x3fe921fb
 8008394:	4002d97b 	.word	0x4002d97b
 8008398:	3ff921fb 	.word	0x3ff921fb
 800839c:	413921fb 	.word	0x413921fb
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	08008dc8 	.word	0x08008dc8
 80083a8:	7fefffff 	.word	0x7fefffff
 80083ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 80083b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80083b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80083b8:	4620      	mov	r0, r4
 80083ba:	460d      	mov	r5, r1
 80083bc:	f7f8 fb5a 	bl	8000a74 <__aeabi_d2iz>
 80083c0:	f7f8 f854 	bl	800046c <__aeabi_i2d>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4620      	mov	r0, r4
 80083ca:	4629      	mov	r1, r5
 80083cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083d0:	f7f7 fefe 	bl	80001d0 <__aeabi_dsub>
 80083d4:	4b21      	ldr	r3, [pc, #132]	; (800845c <__ieee754_rem_pio2+0x404>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	f7f8 f8b2 	bl	8000540 <__aeabi_dmul>
 80083dc:	460d      	mov	r5, r1
 80083de:	4604      	mov	r4, r0
 80083e0:	f7f8 fb48 	bl	8000a74 <__aeabi_d2iz>
 80083e4:	f7f8 f842 	bl	800046c <__aeabi_i2d>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083f4:	f7f7 feec 	bl	80001d0 <__aeabi_dsub>
 80083f8:	4b18      	ldr	r3, [pc, #96]	; (800845c <__ieee754_rem_pio2+0x404>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7f8 f8a0 	bl	8000540 <__aeabi_dmul>
 8008400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008404:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008408:	2703      	movs	r7, #3
 800840a:	2400      	movs	r4, #0
 800840c:	2500      	movs	r5, #0
 800840e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	46b9      	mov	r9, r7
 8008418:	3f01      	subs	r7, #1
 800841a:	f7f8 faf9 	bl	8000a10 <__aeabi_dcmpeq>
 800841e:	2800      	cmp	r0, #0
 8008420:	d1f5      	bne.n	800840e <__ieee754_rem_pio2+0x3b6>
 8008422:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <__ieee754_rem_pio2+0x408>)
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	2302      	movs	r3, #2
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	4632      	mov	r2, r6
 800842c:	464b      	mov	r3, r9
 800842e:	4651      	mov	r1, sl
 8008430:	a804      	add	r0, sp, #16
 8008432:	f000 f821 	bl	8008478 <__kernel_rem_pio2>
 8008436:	9b02      	ldr	r3, [sp, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	4683      	mov	fp, r0
 800843c:	f6bf ae4c 	bge.w	80080d8 <__ieee754_rem_pio2+0x80>
 8008440:	e9da 2100 	ldrd	r2, r1, [sl]
 8008444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008448:	e9ca 2300 	strd	r2, r3, [sl]
 800844c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008454:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008458:	e73f      	b.n	80082da <__ieee754_rem_pio2+0x282>
 800845a:	bf00      	nop
 800845c:	41700000 	.word	0x41700000
 8008460:	08008e48 	.word	0x08008e48

08008464 <fabs>:
 8008464:	ec51 0b10 	vmov	r0, r1, d0
 8008468:	ee10 2a10 	vmov	r2, s0
 800846c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008470:	ec43 2b10 	vmov	d0, r2, r3
 8008474:	4770      	bx	lr
	...

08008478 <__kernel_rem_pio2>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	ed2d 8b02 	vpush	{d8}
 8008480:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008484:	f112 0f14 	cmn.w	r2, #20
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9104      	str	r1, [sp, #16]
 800848c:	4bc2      	ldr	r3, [pc, #776]	; (8008798 <__kernel_rem_pio2+0x320>)
 800848e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008490:	9009      	str	r0, [sp, #36]	; 0x24
 8008492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	9b06      	ldr	r3, [sp, #24]
 800849a:	f103 33ff 	add.w	r3, r3, #4294967295
 800849e:	bfa8      	it	ge
 80084a0:	1ed4      	subge	r4, r2, #3
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	bfb2      	itee	lt
 80084a6:	2400      	movlt	r4, #0
 80084a8:	2318      	movge	r3, #24
 80084aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80084ae:	f06f 0317 	mvn.w	r3, #23
 80084b2:	fb04 3303 	mla	r3, r4, r3, r3
 80084b6:	eb03 0a02 	add.w	sl, r3, r2
 80084ba:	9b00      	ldr	r3, [sp, #0]
 80084bc:	9a05      	ldr	r2, [sp, #20]
 80084be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008788 <__kernel_rem_pio2+0x310>
 80084c2:	eb03 0802 	add.w	r8, r3, r2
 80084c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80084c8:	1aa7      	subs	r7, r4, r2
 80084ca:	ae20      	add	r6, sp, #128	; 0x80
 80084cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80084d0:	2500      	movs	r5, #0
 80084d2:	4545      	cmp	r5, r8
 80084d4:	dd13      	ble.n	80084fe <__kernel_rem_pio2+0x86>
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	aa20      	add	r2, sp, #128	; 0x80
 80084da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80084de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	4598      	cmp	r8, r3
 80084ea:	dc31      	bgt.n	8008550 <__kernel_rem_pio2+0xd8>
 80084ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008788 <__kernel_rem_pio2+0x310>
 80084f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084f8:	462f      	mov	r7, r5
 80084fa:	2600      	movs	r6, #0
 80084fc:	e01b      	b.n	8008536 <__kernel_rem_pio2+0xbe>
 80084fe:	42ef      	cmn	r7, r5
 8008500:	d407      	bmi.n	8008512 <__kernel_rem_pio2+0x9a>
 8008502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008506:	f7f7 ffb1 	bl	800046c <__aeabi_i2d>
 800850a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800850e:	3501      	adds	r5, #1
 8008510:	e7df      	b.n	80084d2 <__kernel_rem_pio2+0x5a>
 8008512:	ec51 0b18 	vmov	r0, r1, d8
 8008516:	e7f8      	b.n	800850a <__kernel_rem_pio2+0x92>
 8008518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008520:	f7f8 f80e 	bl	8000540 <__aeabi_dmul>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852c:	f7f7 fe52 	bl	80001d4 <__adddf3>
 8008530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008534:	3601      	adds	r6, #1
 8008536:	9b05      	ldr	r3, [sp, #20]
 8008538:	429e      	cmp	r6, r3
 800853a:	f1a7 0708 	sub.w	r7, r7, #8
 800853e:	ddeb      	ble.n	8008518 <__kernel_rem_pio2+0xa0>
 8008540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008544:	f108 0801 	add.w	r8, r8, #1
 8008548:	ecab 7b02 	vstmia	fp!, {d7}
 800854c:	3508      	adds	r5, #8
 800854e:	e7ca      	b.n	80084e6 <__kernel_rem_pio2+0x6e>
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	aa0c      	add	r2, sp, #48	; 0x30
 8008554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008558:	930b      	str	r3, [sp, #44]	; 0x2c
 800855a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800855c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008560:	9c00      	ldr	r4, [sp, #0]
 8008562:	930a      	str	r3, [sp, #40]	; 0x28
 8008564:	00e3      	lsls	r3, r4, #3
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	ab98      	add	r3, sp, #608	; 0x260
 800856a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800856e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008572:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008576:	ab70      	add	r3, sp, #448	; 0x1c0
 8008578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800857c:	46c3      	mov	fp, r8
 800857e:	46a1      	mov	r9, r4
 8008580:	f1b9 0f00 	cmp.w	r9, #0
 8008584:	f1a5 0508 	sub.w	r5, r5, #8
 8008588:	dc77      	bgt.n	800867a <__kernel_rem_pio2+0x202>
 800858a:	ec47 6b10 	vmov	d0, r6, r7
 800858e:	4650      	mov	r0, sl
 8008590:	f000 fac2 	bl	8008b18 <scalbn>
 8008594:	ec57 6b10 	vmov	r6, r7, d0
 8008598:	2200      	movs	r2, #0
 800859a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800859e:	ee10 0a10 	vmov	r0, s0
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f7 ffcc 	bl	8000540 <__aeabi_dmul>
 80085a8:	ec41 0b10 	vmov	d0, r0, r1
 80085ac:	f000 fb34 	bl	8008c18 <floor>
 80085b0:	4b7a      	ldr	r3, [pc, #488]	; (800879c <__kernel_rem_pio2+0x324>)
 80085b2:	ec51 0b10 	vmov	r0, r1, d0
 80085b6:	2200      	movs	r2, #0
 80085b8:	f7f7 ffc2 	bl	8000540 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f7f7 fe04 	bl	80001d0 <__aeabi_dsub>
 80085c8:	460f      	mov	r7, r1
 80085ca:	4606      	mov	r6, r0
 80085cc:	f7f8 fa52 	bl	8000a74 <__aeabi_d2iz>
 80085d0:	9002      	str	r0, [sp, #8]
 80085d2:	f7f7 ff4b 	bl	800046c <__aeabi_i2d>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f7 fdf7 	bl	80001d0 <__aeabi_dsub>
 80085e2:	f1ba 0f00 	cmp.w	sl, #0
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	dd6d      	ble.n	80086c8 <__kernel_rem_pio2+0x250>
 80085ec:	1e61      	subs	r1, r4, #1
 80085ee:	ab0c      	add	r3, sp, #48	; 0x30
 80085f0:	9d02      	ldr	r5, [sp, #8]
 80085f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085f6:	f1ca 0018 	rsb	r0, sl, #24
 80085fa:	fa43 f200 	asr.w	r2, r3, r0
 80085fe:	4415      	add	r5, r2
 8008600:	4082      	lsls	r2, r0
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	aa0c      	add	r2, sp, #48	; 0x30
 8008606:	9502      	str	r5, [sp, #8]
 8008608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800860c:	f1ca 0217 	rsb	r2, sl, #23
 8008610:	fa43 fb02 	asr.w	fp, r3, r2
 8008614:	f1bb 0f00 	cmp.w	fp, #0
 8008618:	dd65      	ble.n	80086e6 <__kernel_rem_pio2+0x26e>
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	3301      	adds	r3, #1
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	4615      	mov	r5, r2
 8008624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008628:	4294      	cmp	r4, r2
 800862a:	f300 809f 	bgt.w	800876c <__kernel_rem_pio2+0x2f4>
 800862e:	f1ba 0f00 	cmp.w	sl, #0
 8008632:	dd07      	ble.n	8008644 <__kernel_rem_pio2+0x1cc>
 8008634:	f1ba 0f01 	cmp.w	sl, #1
 8008638:	f000 80c1 	beq.w	80087be <__kernel_rem_pio2+0x346>
 800863c:	f1ba 0f02 	cmp.w	sl, #2
 8008640:	f000 80c7 	beq.w	80087d2 <__kernel_rem_pio2+0x35a>
 8008644:	f1bb 0f02 	cmp.w	fp, #2
 8008648:	d14d      	bne.n	80086e6 <__kernel_rem_pio2+0x26e>
 800864a:	4632      	mov	r2, r6
 800864c:	463b      	mov	r3, r7
 800864e:	4954      	ldr	r1, [pc, #336]	; (80087a0 <__kernel_rem_pio2+0x328>)
 8008650:	2000      	movs	r0, #0
 8008652:	f7f7 fdbd 	bl	80001d0 <__aeabi_dsub>
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	2d00      	cmp	r5, #0
 800865c:	d043      	beq.n	80086e6 <__kernel_rem_pio2+0x26e>
 800865e:	4650      	mov	r0, sl
 8008660:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008790 <__kernel_rem_pio2+0x318>
 8008664:	f000 fa58 	bl	8008b18 <scalbn>
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	ec53 2b10 	vmov	r2, r3, d0
 8008670:	f7f7 fdae 	bl	80001d0 <__aeabi_dsub>
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	e035      	b.n	80086e6 <__kernel_rem_pio2+0x26e>
 800867a:	4b4a      	ldr	r3, [pc, #296]	; (80087a4 <__kernel_rem_pio2+0x32c>)
 800867c:	2200      	movs	r2, #0
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f7 ff5d 	bl	8000540 <__aeabi_dmul>
 8008686:	f7f8 f9f5 	bl	8000a74 <__aeabi_d2iz>
 800868a:	f7f7 feef 	bl	800046c <__aeabi_i2d>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	ec43 2b18 	vmov	d8, r2, r3
 8008696:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <__kernel_rem_pio2+0x330>)
 8008698:	2200      	movs	r2, #0
 800869a:	f7f7 ff51 	bl	8000540 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f7 fd93 	bl	80001d0 <__aeabi_dsub>
 80086aa:	f7f8 f9e3 	bl	8000a74 <__aeabi_d2iz>
 80086ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086b2:	f84b 0b04 	str.w	r0, [fp], #4
 80086b6:	ec51 0b18 	vmov	r0, r1, d8
 80086ba:	f7f7 fd8b 	bl	80001d4 <__adddf3>
 80086be:	f109 39ff 	add.w	r9, r9, #4294967295
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	e75b      	b.n	8008580 <__kernel_rem_pio2+0x108>
 80086c8:	d106      	bne.n	80086d8 <__kernel_rem_pio2+0x260>
 80086ca:	1e63      	subs	r3, r4, #1
 80086cc:	aa0c      	add	r2, sp, #48	; 0x30
 80086ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80086d6:	e79d      	b.n	8008614 <__kernel_rem_pio2+0x19c>
 80086d8:	4b34      	ldr	r3, [pc, #208]	; (80087ac <__kernel_rem_pio2+0x334>)
 80086da:	2200      	movs	r2, #0
 80086dc:	f7f8 f9b6 	bl	8000a4c <__aeabi_dcmpge>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d140      	bne.n	8008766 <__kernel_rem_pio2+0x2ee>
 80086e4:	4683      	mov	fp, r0
 80086e6:	2200      	movs	r2, #0
 80086e8:	2300      	movs	r3, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f8 f98f 	bl	8000a10 <__aeabi_dcmpeq>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f000 80c1 	beq.w	800887a <__kernel_rem_pio2+0x402>
 80086f8:	1e65      	subs	r5, r4, #1
 80086fa:	462b      	mov	r3, r5
 80086fc:	2200      	movs	r2, #0
 80086fe:	9900      	ldr	r1, [sp, #0]
 8008700:	428b      	cmp	r3, r1
 8008702:	da6d      	bge.n	80087e0 <__kernel_rem_pio2+0x368>
 8008704:	2a00      	cmp	r2, #0
 8008706:	f000 808a 	beq.w	800881e <__kernel_rem_pio2+0x3a6>
 800870a:	ab0c      	add	r3, sp, #48	; 0x30
 800870c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80ae 	beq.w	8008876 <__kernel_rem_pio2+0x3fe>
 800871a:	4650      	mov	r0, sl
 800871c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008790 <__kernel_rem_pio2+0x318>
 8008720:	f000 f9fa 	bl	8008b18 <scalbn>
 8008724:	1c6b      	adds	r3, r5, #1
 8008726:	00da      	lsls	r2, r3, #3
 8008728:	9205      	str	r2, [sp, #20]
 800872a:	ec57 6b10 	vmov	r6, r7, d0
 800872e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008730:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80087a4 <__kernel_rem_pio2+0x32c>
 8008734:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008738:	462c      	mov	r4, r5
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	2c00      	cmp	r4, #0
 8008740:	f280 80d4 	bge.w	80088ec <__kernel_rem_pio2+0x474>
 8008744:	462c      	mov	r4, r5
 8008746:	2c00      	cmp	r4, #0
 8008748:	f2c0 8102 	blt.w	8008950 <__kernel_rem_pio2+0x4d8>
 800874c:	4b18      	ldr	r3, [pc, #96]	; (80087b0 <__kernel_rem_pio2+0x338>)
 800874e:	461e      	mov	r6, r3
 8008750:	ab70      	add	r3, sp, #448	; 0x1c0
 8008752:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008756:	1b2b      	subs	r3, r5, r4
 8008758:	f04f 0900 	mov.w	r9, #0
 800875c:	f04f 0a00 	mov.w	sl, #0
 8008760:	2700      	movs	r7, #0
 8008762:	9306      	str	r3, [sp, #24]
 8008764:	e0e6      	b.n	8008934 <__kernel_rem_pio2+0x4bc>
 8008766:	f04f 0b02 	mov.w	fp, #2
 800876a:	e756      	b.n	800861a <__kernel_rem_pio2+0x1a2>
 800876c:	f8d8 3000 	ldr.w	r3, [r8]
 8008770:	bb05      	cbnz	r5, 80087b4 <__kernel_rem_pio2+0x33c>
 8008772:	b123      	cbz	r3, 800877e <__kernel_rem_pio2+0x306>
 8008774:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008778:	f8c8 3000 	str.w	r3, [r8]
 800877c:	2301      	movs	r3, #1
 800877e:	3201      	adds	r2, #1
 8008780:	f108 0804 	add.w	r8, r8, #4
 8008784:	461d      	mov	r5, r3
 8008786:	e74f      	b.n	8008628 <__kernel_rem_pio2+0x1b0>
	...
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	08008f90 	.word	0x08008f90
 800879c:	40200000 	.word	0x40200000
 80087a0:	3ff00000 	.word	0x3ff00000
 80087a4:	3e700000 	.word	0x3e700000
 80087a8:	41700000 	.word	0x41700000
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	08008f50 	.word	0x08008f50
 80087b4:	1acb      	subs	r3, r1, r3
 80087b6:	f8c8 3000 	str.w	r3, [r8]
 80087ba:	462b      	mov	r3, r5
 80087bc:	e7df      	b.n	800877e <__kernel_rem_pio2+0x306>
 80087be:	1e62      	subs	r2, r4, #1
 80087c0:	ab0c      	add	r3, sp, #48	; 0x30
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80087ca:	a90c      	add	r1, sp, #48	; 0x30
 80087cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80087d0:	e738      	b.n	8008644 <__kernel_rem_pio2+0x1cc>
 80087d2:	1e62      	subs	r2, r4, #1
 80087d4:	ab0c      	add	r3, sp, #48	; 0x30
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80087de:	e7f4      	b.n	80087ca <__kernel_rem_pio2+0x352>
 80087e0:	a90c      	add	r1, sp, #48	; 0x30
 80087e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	430a      	orrs	r2, r1
 80087ea:	e788      	b.n	80086fe <__kernel_rem_pio2+0x286>
 80087ec:	3301      	adds	r3, #1
 80087ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d0fa      	beq.n	80087ec <__kernel_rem_pio2+0x374>
 80087f6:	9a08      	ldr	r2, [sp, #32]
 80087f8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80087fc:	446a      	add	r2, sp
 80087fe:	3a98      	subs	r2, #152	; 0x98
 8008800:	9208      	str	r2, [sp, #32]
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	a920      	add	r1, sp, #128	; 0x80
 8008806:	18a2      	adds	r2, r4, r2
 8008808:	18e3      	adds	r3, r4, r3
 800880a:	f104 0801 	add.w	r8, r4, #1
 800880e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	4543      	cmp	r3, r8
 8008818:	da04      	bge.n	8008824 <__kernel_rem_pio2+0x3ac>
 800881a:	461c      	mov	r4, r3
 800881c:	e6a2      	b.n	8008564 <__kernel_rem_pio2+0xec>
 800881e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008820:	2301      	movs	r3, #1
 8008822:	e7e4      	b.n	80087ee <__kernel_rem_pio2+0x376>
 8008824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008826:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800882a:	f7f7 fe1f 	bl	800046c <__aeabi_i2d>
 800882e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008834:	46ab      	mov	fp, r5
 8008836:	461c      	mov	r4, r3
 8008838:	f04f 0900 	mov.w	r9, #0
 800883c:	2600      	movs	r6, #0
 800883e:	2700      	movs	r7, #0
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	4599      	cmp	r9, r3
 8008844:	dd06      	ble.n	8008854 <__kernel_rem_pio2+0x3dc>
 8008846:	9b08      	ldr	r3, [sp, #32]
 8008848:	e8e3 6702 	strd	r6, r7, [r3], #8
 800884c:	f108 0801 	add.w	r8, r8, #1
 8008850:	9308      	str	r3, [sp, #32]
 8008852:	e7df      	b.n	8008814 <__kernel_rem_pio2+0x39c>
 8008854:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008858:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800885c:	f7f7 fe70 	bl	8000540 <__aeabi_dmul>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4630      	mov	r0, r6
 8008866:	4639      	mov	r1, r7
 8008868:	f7f7 fcb4 	bl	80001d4 <__adddf3>
 800886c:	f109 0901 	add.w	r9, r9, #1
 8008870:	4606      	mov	r6, r0
 8008872:	460f      	mov	r7, r1
 8008874:	e7e4      	b.n	8008840 <__kernel_rem_pio2+0x3c8>
 8008876:	3d01      	subs	r5, #1
 8008878:	e747      	b.n	800870a <__kernel_rem_pio2+0x292>
 800887a:	ec47 6b10 	vmov	d0, r6, r7
 800887e:	f1ca 0000 	rsb	r0, sl, #0
 8008882:	f000 f949 	bl	8008b18 <scalbn>
 8008886:	ec57 6b10 	vmov	r6, r7, d0
 800888a:	4ba0      	ldr	r3, [pc, #640]	; (8008b0c <__kernel_rem_pio2+0x694>)
 800888c:	ee10 0a10 	vmov	r0, s0
 8008890:	2200      	movs	r2, #0
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 f8da 	bl	8000a4c <__aeabi_dcmpge>
 8008898:	b1f8      	cbz	r0, 80088da <__kernel_rem_pio2+0x462>
 800889a:	4b9d      	ldr	r3, [pc, #628]	; (8008b10 <__kernel_rem_pio2+0x698>)
 800889c:	2200      	movs	r2, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fe4d 	bl	8000540 <__aeabi_dmul>
 80088a6:	f7f8 f8e5 	bl	8000a74 <__aeabi_d2iz>
 80088aa:	4680      	mov	r8, r0
 80088ac:	f7f7 fdde 	bl	800046c <__aeabi_i2d>
 80088b0:	4b96      	ldr	r3, [pc, #600]	; (8008b0c <__kernel_rem_pio2+0x694>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7f7 fe44 	bl	8000540 <__aeabi_dmul>
 80088b8:	460b      	mov	r3, r1
 80088ba:	4602      	mov	r2, r0
 80088bc:	4639      	mov	r1, r7
 80088be:	4630      	mov	r0, r6
 80088c0:	f7f7 fc86 	bl	80001d0 <__aeabi_dsub>
 80088c4:	f7f8 f8d6 	bl	8000a74 <__aeabi_d2iz>
 80088c8:	1c65      	adds	r5, r4, #1
 80088ca:	ab0c      	add	r3, sp, #48	; 0x30
 80088cc:	f10a 0a18 	add.w	sl, sl, #24
 80088d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80088d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80088d8:	e71f      	b.n	800871a <__kernel_rem_pio2+0x2a2>
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	f7f8 f8c9 	bl	8000a74 <__aeabi_d2iz>
 80088e2:	ab0c      	add	r3, sp, #48	; 0x30
 80088e4:	4625      	mov	r5, r4
 80088e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80088ea:	e716      	b.n	800871a <__kernel_rem_pio2+0x2a2>
 80088ec:	ab0c      	add	r3, sp, #48	; 0x30
 80088ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088f2:	f7f7 fdbb 	bl	800046c <__aeabi_i2d>
 80088f6:	4632      	mov	r2, r6
 80088f8:	463b      	mov	r3, r7
 80088fa:	f7f7 fe21 	bl	8000540 <__aeabi_dmul>
 80088fe:	4642      	mov	r2, r8
 8008900:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008904:	464b      	mov	r3, r9
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fe19 	bl	8000540 <__aeabi_dmul>
 800890e:	3c01      	subs	r4, #1
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	e713      	b.n	800873e <__kernel_rem_pio2+0x2c6>
 8008916:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800891a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800891e:	f7f7 fe0f 	bl	8000540 <__aeabi_dmul>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4648      	mov	r0, r9
 8008928:	4651      	mov	r1, sl
 800892a:	f7f7 fc53 	bl	80001d4 <__adddf3>
 800892e:	3701      	adds	r7, #1
 8008930:	4681      	mov	r9, r0
 8008932:	468a      	mov	sl, r1
 8008934:	9b00      	ldr	r3, [sp, #0]
 8008936:	429f      	cmp	r7, r3
 8008938:	dc02      	bgt.n	8008940 <__kernel_rem_pio2+0x4c8>
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	429f      	cmp	r7, r3
 800893e:	ddea      	ble.n	8008916 <__kernel_rem_pio2+0x49e>
 8008940:	9a06      	ldr	r2, [sp, #24]
 8008942:	ab48      	add	r3, sp, #288	; 0x120
 8008944:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008948:	e9c6 9a00 	strd	r9, sl, [r6]
 800894c:	3c01      	subs	r4, #1
 800894e:	e6fa      	b.n	8008746 <__kernel_rem_pio2+0x2ce>
 8008950:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008952:	2b02      	cmp	r3, #2
 8008954:	dc0b      	bgt.n	800896e <__kernel_rem_pio2+0x4f6>
 8008956:	2b00      	cmp	r3, #0
 8008958:	dc39      	bgt.n	80089ce <__kernel_rem_pio2+0x556>
 800895a:	d05d      	beq.n	8008a18 <__kernel_rem_pio2+0x5a0>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	f003 0007 	and.w	r0, r3, #7
 8008962:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008966:	ecbd 8b02 	vpop	{d8}
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008970:	2b03      	cmp	r3, #3
 8008972:	d1f3      	bne.n	800895c <__kernel_rem_pio2+0x4e4>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	9500      	str	r5, [sp, #0]
 8008978:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800897c:	eb0d 0403 	add.w	r4, sp, r3
 8008980:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008984:	46a2      	mov	sl, r4
 8008986:	9b00      	ldr	r3, [sp, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	f1aa 0a08 	sub.w	sl, sl, #8
 800898e:	dc69      	bgt.n	8008a64 <__kernel_rem_pio2+0x5ec>
 8008990:	46aa      	mov	sl, r5
 8008992:	f1ba 0f01 	cmp.w	sl, #1
 8008996:	f1a4 0408 	sub.w	r4, r4, #8
 800899a:	f300 8083 	bgt.w	8008aa4 <__kernel_rem_pio2+0x62c>
 800899e:	9c05      	ldr	r4, [sp, #20]
 80089a0:	ab48      	add	r3, sp, #288	; 0x120
 80089a2:	441c      	add	r4, r3
 80089a4:	2000      	movs	r0, #0
 80089a6:	2100      	movs	r1, #0
 80089a8:	2d01      	cmp	r5, #1
 80089aa:	f300 809a 	bgt.w	8008ae2 <__kernel_rem_pio2+0x66a>
 80089ae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80089b2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80089b6:	f1bb 0f00 	cmp.w	fp, #0
 80089ba:	f040 8098 	bne.w	8008aee <__kernel_rem_pio2+0x676>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	e9c3 7800 	strd	r7, r8, [r3]
 80089c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80089c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80089cc:	e7c6      	b.n	800895c <__kernel_rem_pio2+0x4e4>
 80089ce:	9e05      	ldr	r6, [sp, #20]
 80089d0:	ab48      	add	r3, sp, #288	; 0x120
 80089d2:	441e      	add	r6, r3
 80089d4:	462c      	mov	r4, r5
 80089d6:	2000      	movs	r0, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	2c00      	cmp	r4, #0
 80089dc:	da33      	bge.n	8008a46 <__kernel_rem_pio2+0x5ce>
 80089de:	f1bb 0f00 	cmp.w	fp, #0
 80089e2:	d036      	beq.n	8008a52 <__kernel_rem_pio2+0x5da>
 80089e4:	4602      	mov	r2, r0
 80089e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ea:	9c04      	ldr	r4, [sp, #16]
 80089ec:	e9c4 2300 	strd	r2, r3, [r4]
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80089f8:	f7f7 fbea 	bl	80001d0 <__aeabi_dsub>
 80089fc:	ae4a      	add	r6, sp, #296	; 0x128
 80089fe:	2401      	movs	r4, #1
 8008a00:	42a5      	cmp	r5, r4
 8008a02:	da29      	bge.n	8008a58 <__kernel_rem_pio2+0x5e0>
 8008a04:	f1bb 0f00 	cmp.w	fp, #0
 8008a08:	d002      	beq.n	8008a10 <__kernel_rem_pio2+0x598>
 8008a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a0e:	4619      	mov	r1, r3
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008a16:	e7a1      	b.n	800895c <__kernel_rem_pio2+0x4e4>
 8008a18:	9c05      	ldr	r4, [sp, #20]
 8008a1a:	ab48      	add	r3, sp, #288	; 0x120
 8008a1c:	441c      	add	r4, r3
 8008a1e:	2000      	movs	r0, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	da09      	bge.n	8008a3a <__kernel_rem_pio2+0x5c2>
 8008a26:	f1bb 0f00 	cmp.w	fp, #0
 8008a2a:	d002      	beq.n	8008a32 <__kernel_rem_pio2+0x5ba>
 8008a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a30:	4619      	mov	r1, r3
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	e9c3 0100 	strd	r0, r1, [r3]
 8008a38:	e790      	b.n	800895c <__kernel_rem_pio2+0x4e4>
 8008a3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a3e:	f7f7 fbc9 	bl	80001d4 <__adddf3>
 8008a42:	3d01      	subs	r5, #1
 8008a44:	e7ed      	b.n	8008a22 <__kernel_rem_pio2+0x5aa>
 8008a46:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008a4a:	f7f7 fbc3 	bl	80001d4 <__adddf3>
 8008a4e:	3c01      	subs	r4, #1
 8008a50:	e7c3      	b.n	80089da <__kernel_rem_pio2+0x562>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e7c8      	b.n	80089ea <__kernel_rem_pio2+0x572>
 8008a58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008a5c:	f7f7 fbba 	bl	80001d4 <__adddf3>
 8008a60:	3401      	adds	r4, #1
 8008a62:	e7cd      	b.n	8008a00 <__kernel_rem_pio2+0x588>
 8008a64:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4632      	mov	r2, r6
 8008a74:	463b      	mov	r3, r7
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f7 fbab 	bl	80001d4 <__adddf3>
 8008a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4640      	mov	r0, r8
 8008a88:	4649      	mov	r1, r9
 8008a8a:	f7f7 fba1 	bl	80001d0 <__aeabi_dsub>
 8008a8e:	4632      	mov	r2, r6
 8008a90:	463b      	mov	r3, r7
 8008a92:	f7f7 fb9f 	bl	80001d4 <__adddf3>
 8008a96:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a9e:	ed8a 7b00 	vstr	d7, [sl]
 8008aa2:	e770      	b.n	8008986 <__kernel_rem_pio2+0x50e>
 8008aa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008aa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008aac:	4640      	mov	r0, r8
 8008aae:	4632      	mov	r2, r6
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f7 fb8e 	bl	80001d4 <__adddf3>
 8008ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	f7f7 fb84 	bl	80001d0 <__aeabi_dsub>
 8008ac8:	4632      	mov	r2, r6
 8008aca:	463b      	mov	r3, r7
 8008acc:	f7f7 fb82 	bl	80001d4 <__adddf3>
 8008ad0:	ed9d 7b00 	vldr	d7, [sp]
 8008ad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ad8:	ed84 7b00 	vstr	d7, [r4]
 8008adc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ae0:	e757      	b.n	8008992 <__kernel_rem_pio2+0x51a>
 8008ae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ae6:	f7f7 fb75 	bl	80001d4 <__adddf3>
 8008aea:	3d01      	subs	r5, #1
 8008aec:	e75c      	b.n	80089a8 <__kernel_rem_pio2+0x530>
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	601f      	str	r7, [r3, #0]
 8008af4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008af8:	605c      	str	r4, [r3, #4]
 8008afa:	609d      	str	r5, [r3, #8]
 8008afc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b00:	60d3      	str	r3, [r2, #12]
 8008b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b06:	6110      	str	r0, [r2, #16]
 8008b08:	6153      	str	r3, [r2, #20]
 8008b0a:	e727      	b.n	800895c <__kernel_rem_pio2+0x4e4>
 8008b0c:	41700000 	.word	0x41700000
 8008b10:	3e700000 	.word	0x3e700000
 8008b14:	00000000 	.word	0x00000000

08008b18 <scalbn>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	ec55 4b10 	vmov	r4, r5, d0
 8008b1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008b22:	4606      	mov	r6, r0
 8008b24:	462b      	mov	r3, r5
 8008b26:	b999      	cbnz	r1, 8008b50 <scalbn+0x38>
 8008b28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b2c:	4323      	orrs	r3, r4
 8008b2e:	d03f      	beq.n	8008bb0 <scalbn+0x98>
 8008b30:	4b35      	ldr	r3, [pc, #212]	; (8008c08 <scalbn+0xf0>)
 8008b32:	4629      	mov	r1, r5
 8008b34:	ee10 0a10 	vmov	r0, s0
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f7f7 fd01 	bl	8000540 <__aeabi_dmul>
 8008b3e:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <scalbn+0xf4>)
 8008b40:	429e      	cmp	r6, r3
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	da10      	bge.n	8008b6a <scalbn+0x52>
 8008b48:	a327      	add	r3, pc, #156	; (adr r3, 8008be8 <scalbn+0xd0>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	e01f      	b.n	8008b90 <scalbn+0x78>
 8008b50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008b54:	4291      	cmp	r1, r2
 8008b56:	d10c      	bne.n	8008b72 <scalbn+0x5a>
 8008b58:	ee10 2a10 	vmov	r2, s0
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fb38 	bl	80001d4 <__adddf3>
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	e022      	b.n	8008bb0 <scalbn+0x98>
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b70:	3936      	subs	r1, #54	; 0x36
 8008b72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008b76:	4296      	cmp	r6, r2
 8008b78:	dd0d      	ble.n	8008b96 <scalbn+0x7e>
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	a11c      	add	r1, pc, #112	; (adr r1, 8008bf0 <scalbn+0xd8>)
 8008b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b82:	da02      	bge.n	8008b8a <scalbn+0x72>
 8008b84:	a11c      	add	r1, pc, #112	; (adr r1, 8008bf8 <scalbn+0xe0>)
 8008b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8a:	a319      	add	r3, pc, #100	; (adr r3, 8008bf0 <scalbn+0xd8>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fcd6 	bl	8000540 <__aeabi_dmul>
 8008b94:	e7e6      	b.n	8008b64 <scalbn+0x4c>
 8008b96:	1872      	adds	r2, r6, r1
 8008b98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b9c:	428a      	cmp	r2, r1
 8008b9e:	dcec      	bgt.n	8008b7a <scalbn+0x62>
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	dd08      	ble.n	8008bb6 <scalbn+0x9e>
 8008ba4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ba8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008bb0:	ec45 4b10 	vmov	d0, r4, r5
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008bba:	da08      	bge.n	8008bce <scalbn+0xb6>
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	a10a      	add	r1, pc, #40	; (adr r1, 8008be8 <scalbn+0xd0>)
 8008bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc4:	dac0      	bge.n	8008b48 <scalbn+0x30>
 8008bc6:	a10e      	add	r1, pc, #56	; (adr r1, 8008c00 <scalbn+0xe8>)
 8008bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bcc:	e7bc      	b.n	8008b48 <scalbn+0x30>
 8008bce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bd2:	3236      	adds	r2, #54	; 0x36
 8008bd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <scalbn+0xf8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	e7d5      	b.n	8008b90 <scalbn+0x78>
 8008be4:	f3af 8000 	nop.w
 8008be8:	c2f8f359 	.word	0xc2f8f359
 8008bec:	01a56e1f 	.word	0x01a56e1f
 8008bf0:	8800759c 	.word	0x8800759c
 8008bf4:	7e37e43c 	.word	0x7e37e43c
 8008bf8:	8800759c 	.word	0x8800759c
 8008bfc:	fe37e43c 	.word	0xfe37e43c
 8008c00:	c2f8f359 	.word	0xc2f8f359
 8008c04:	81a56e1f 	.word	0x81a56e1f
 8008c08:	43500000 	.word	0x43500000
 8008c0c:	ffff3cb0 	.word	0xffff3cb0
 8008c10:	3c900000 	.word	0x3c900000
 8008c14:	00000000 	.word	0x00000000

08008c18 <floor>:
 8008c18:	ec51 0b10 	vmov	r0, r1, d0
 8008c1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008c28:	2e13      	cmp	r6, #19
 8008c2a:	ee10 5a10 	vmov	r5, s0
 8008c2e:	ee10 8a10 	vmov	r8, s0
 8008c32:	460c      	mov	r4, r1
 8008c34:	dc31      	bgt.n	8008c9a <floor+0x82>
 8008c36:	2e00      	cmp	r6, #0
 8008c38:	da14      	bge.n	8008c64 <floor+0x4c>
 8008c3a:	a333      	add	r3, pc, #204	; (adr r3, 8008d08 <floor+0xf0>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fac8 	bl	80001d4 <__adddf3>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	f7f7 ff0a 	bl	8000a60 <__aeabi_dcmpgt>
 8008c4c:	b138      	cbz	r0, 8008c5e <floor+0x46>
 8008c4e:	2c00      	cmp	r4, #0
 8008c50:	da53      	bge.n	8008cfa <floor+0xe2>
 8008c52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008c56:	4325      	orrs	r5, r4
 8008c58:	d052      	beq.n	8008d00 <floor+0xe8>
 8008c5a:	4c2d      	ldr	r4, [pc, #180]	; (8008d10 <floor+0xf8>)
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	e024      	b.n	8008cae <floor+0x96>
 8008c64:	4f2b      	ldr	r7, [pc, #172]	; (8008d14 <floor+0xfc>)
 8008c66:	4137      	asrs	r7, r6
 8008c68:	ea01 0307 	and.w	r3, r1, r7
 8008c6c:	4303      	orrs	r3, r0
 8008c6e:	d01e      	beq.n	8008cae <floor+0x96>
 8008c70:	a325      	add	r3, pc, #148	; (adr r3, 8008d08 <floor+0xf0>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 faad 	bl	80001d4 <__adddf3>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f7f7 feef 	bl	8000a60 <__aeabi_dcmpgt>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d0eb      	beq.n	8008c5e <floor+0x46>
 8008c86:	2c00      	cmp	r4, #0
 8008c88:	bfbe      	ittt	lt
 8008c8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c8e:	4133      	asrlt	r3, r6
 8008c90:	18e4      	addlt	r4, r4, r3
 8008c92:	ea24 0407 	bic.w	r4, r4, r7
 8008c96:	2500      	movs	r5, #0
 8008c98:	e7e1      	b.n	8008c5e <floor+0x46>
 8008c9a:	2e33      	cmp	r6, #51	; 0x33
 8008c9c:	dd0b      	ble.n	8008cb6 <floor+0x9e>
 8008c9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ca2:	d104      	bne.n	8008cae <floor+0x96>
 8008ca4:	ee10 2a10 	vmov	r2, s0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	f7f7 fa93 	bl	80001d4 <__adddf3>
 8008cae:	ec41 0b10 	vmov	d0, r0, r1
 8008cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008cba:	f04f 37ff 	mov.w	r7, #4294967295
 8008cbe:	40df      	lsrs	r7, r3
 8008cc0:	4238      	tst	r0, r7
 8008cc2:	d0f4      	beq.n	8008cae <floor+0x96>
 8008cc4:	a310      	add	r3, pc, #64	; (adr r3, 8008d08 <floor+0xf0>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fa83 	bl	80001d4 <__adddf3>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f7f7 fec5 	bl	8000a60 <__aeabi_dcmpgt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d0c1      	beq.n	8008c5e <floor+0x46>
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	da0a      	bge.n	8008cf4 <floor+0xdc>
 8008cde:	2e14      	cmp	r6, #20
 8008ce0:	d101      	bne.n	8008ce6 <floor+0xce>
 8008ce2:	3401      	adds	r4, #1
 8008ce4:	e006      	b.n	8008cf4 <floor+0xdc>
 8008ce6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008cea:	2301      	movs	r3, #1
 8008cec:	40b3      	lsls	r3, r6
 8008cee:	441d      	add	r5, r3
 8008cf0:	45a8      	cmp	r8, r5
 8008cf2:	d8f6      	bhi.n	8008ce2 <floor+0xca>
 8008cf4:	ea25 0507 	bic.w	r5, r5, r7
 8008cf8:	e7b1      	b.n	8008c5e <floor+0x46>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	462c      	mov	r4, r5
 8008cfe:	e7ae      	b.n	8008c5e <floor+0x46>
 8008d00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008d04:	e7ab      	b.n	8008c5e <floor+0x46>
 8008d06:	bf00      	nop
 8008d08:	8800759c 	.word	0x8800759c
 8008d0c:	7e37e43c 	.word	0x7e37e43c
 8008d10:	bff00000 	.word	0xbff00000
 8008d14:	000fffff 	.word	0x000fffff

08008d18 <memset>:
 8008d18:	4402      	add	r2, r0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d100      	bne.n	8008d22 <memset+0xa>
 8008d20:	4770      	bx	lr
 8008d22:	f803 1b01 	strb.w	r1, [r3], #1
 8008d26:	e7f9      	b.n	8008d1c <memset+0x4>

08008d28 <__libc_init_array>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4d0d      	ldr	r5, [pc, #52]	; (8008d60 <__libc_init_array+0x38>)
 8008d2c:	4c0d      	ldr	r4, [pc, #52]	; (8008d64 <__libc_init_array+0x3c>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	2600      	movs	r6, #0
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	d109      	bne.n	8008d4c <__libc_init_array+0x24>
 8008d38:	4d0b      	ldr	r5, [pc, #44]	; (8008d68 <__libc_init_array+0x40>)
 8008d3a:	4c0c      	ldr	r4, [pc, #48]	; (8008d6c <__libc_init_array+0x44>)
 8008d3c:	f000 f818 	bl	8008d70 <_init>
 8008d40:	1b64      	subs	r4, r4, r5
 8008d42:	10a4      	asrs	r4, r4, #2
 8008d44:	2600      	movs	r6, #0
 8008d46:	42a6      	cmp	r6, r4
 8008d48:	d105      	bne.n	8008d56 <__libc_init_array+0x2e>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d50:	4798      	blx	r3
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7ee      	b.n	8008d34 <__libc_init_array+0xc>
 8008d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5a:	4798      	blx	r3
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	e7f2      	b.n	8008d46 <__libc_init_array+0x1e>
 8008d60:	08008fa8 	.word	0x08008fa8
 8008d64:	08008fa8 	.word	0x08008fa8
 8008d68:	08008fa8 	.word	0x08008fa8
 8008d6c:	08008fb0 	.word	0x08008fb0

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
